{"version":3,"sources":["components/LoadingSpinner.tsx","components/Message.tsx","firebase/firebase.ts","actions/rooms.ts","components/RoomContainer.tsx","components/CreateChatDialog.tsx","components/App.tsx","actions/auth.ts","reducers/rooms.ts","reducers/index.ts","reducers/auth.ts","reducers/redirect.ts","sagas/initSaga.ts","sagas/joinRoomSaga.ts","sagas/rootSaga.ts","store/configureStore.ts","index.tsx"],"names":["LoadingWrapper","styled","div","_templateObject","LoadingSpinner","react_default","a","createElement","spin","size","MessageLayout","Message_templateObject","LeftPanel","_templateObject2","RightPanel","_templateObject3","MessageHeader","_templateObject4","Message","_ref","children","name","isConsecutive","avatar","shape","icon","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","rsf","ReduxSagaFirebase","database","firestore","byCreatedAt","b","Date","createdAt","createRoom","id","people","_ref$messages","messages","type","room","showError","message","updateMessages","roomId","availableRooms","rooms","syncMessages","messagesSnapshot","forEach","doc","push","Object","objectSpread","data","sort","Header","Layout","Content","Title","Typography","ChatWrapper","RoomContainer_templateObject","Messages","RoomContainer_templateObject2","InputForm","form","RoomContainer_templateObject3","Input","input","RoomContainer_templateObject4","SendButton","button","_templateObject5","RoomContainer","state","messageValue","messagesEnd","messagesContainer","handleTyping","e","_this","setState","target","value","scrollToBottom","scrollIntoView","behavior","handleSend","preventDefault","props","text","length","trySendMessage","this","match","params","console","log","prevProps","previousLastMessage","slice","currentLastMessage","sender","uid","auth","_this$messagesContain","scrollHeight","scrollTop","clientHeight","offsetHeight","Math","abs","_this2","_this$props","isLoading","content","components_LoadingSpinner","ref","el","map","idx","components_Message","displayName","key","style","float","clear","onSubmit","onChange","react","background","borderBottom","padding","display","flexDirection","alignItems","margin","level","overflow","Component","connect","ownProps","joined","find","status","arguments","undefined","dispatch","getState","user","moment","format","collection","concat","add","TextArea","Text","TextWrap","CreateChatDialog_templateObject","CreateChatDialog","roomName","description","handleChange","defineProperty","handleSubmit","_this$props$auth","userDisplayName","unread","lastRead","tryCreateRoom","handleClose","modal","title","visible","isOpen","onOk","onCancel","okButtonProps","disabled","cancelButtonProps","rows","roomData","showCreateError","get","then","snapshot","r","roomRef","set","Sider","ButtonWrap","App_templateObject","RoomButtons","App_templateObject2","App","isCreateRoomDialogOpen","handleCloseCreateChatDialog","handleOpenCreateChatDialog","handleRoomSelect","history","tryLogin","nextProps","initSlacker","location","pathname","layout","height","position","left","es_button","onClick","components_CreateChatDialog","menu","theme","mode","onSelect","defaultSelectedKeys","Item","className","marginLeft","react_router","path","component","signInAnonymously","response","loginSuccess","catch","error","code","defaultState","available","reducers","combineReducers","action","toConsumableArray","redirect","redirectTo","fetchRoomSaga","initSlackerSaga","mySaga","roomDoc","regenerator_default","wrap","_context","prev","next","call","getDocument","sent","exists","getCollection","peopleDoc","messageDoc","put","fork","syncCollection","successActionCreator","stop","_marked","roomsPromise","roomsQuery","generalRoom","userRoomsQuery","userRoomIds","_i","_userRoomIds","_context2","select","abrupt","empty","userRoomDoc","includes","_marked2","_context3","takeLatest","_marked3","joinRoom","joinRoomSaga","person","setDocument","joinRoomSaga_marked","takeEvery","joinRoomSaga_marked2","rootSaga","all","initSaga","rootSaga_marked","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","run","configureStore","jsx","es","react_router_dom","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ece5b96.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Spin } from 'antd'\n\nconst LoadingWrapper = styled.div`\n\theight: 100%;\n\tpadding: 24;\n\tdisplay: flex;\n\tflex-direction: column;\n\tbackground: '#fff';\n\tjustify-content: center;\n\talign-items: center;\n`\n\nconst LoadingSpinner = () => (\n\t<LoadingWrapper>\n\t\t<Spin size=\"large\" />\n\t</LoadingWrapper>\n)\n\nexport default LoadingSpinner\n","import React, { FunctionComponent } from 'react'\nimport { Avatar } from 'antd'\nimport styled from 'styled-components'\n\nconst MessageLayout = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\tmargin-bottom: 2px;\n`\n\nconst LeftPanel = styled.div`\n\twidth: 46px;\n\tpadding: 5px;\n`\n\n// const Avatar = styled.div`\n// \t/* width: 35px;\n// \theight: 35px;\n// \tmargin: 5px;\n// \tborder-radius: 2px;\n// \tbackground-color: #cecece;\n// ` */\n\nconst RightPanel = styled.div`\n\tcolor: black;\n`\n\nconst MessageHeader = styled.div`\n\tcolor: black;\n\tfont-weight: bold;\n\tmargin-top: 2px;\n`\n\ninterface Props {\n\tname: string\n\tisConsecutive?: boolean\n}\n\nconst Message: FunctionComponent<Props> = ({\n\tchildren,\n\tname,\n\tisConsecutive,\n}) => {\n\tif (isConsecutive) {\n\t\treturn (\n\t\t\t<MessageLayout>\n\t\t\t\t<LeftPanel />\n\t\t\t\t<RightPanel>{children}</RightPanel>\n\t\t\t</MessageLayout>\n\t\t)\n\t}\n\n\treturn (\n\t\t<MessageLayout>\n\t\t\t<LeftPanel>\n\t\t\t\t<Avatar size={35} shape=\"square\" icon=\"user\" />\n\t\t\t</LeftPanel>\n\t\t\t<RightPanel>\n\t\t\t\t<MessageHeader>{name}</MessageHeader>\n\t\t\t\t{children}\n\t\t\t</RightPanel>\n\t\t</MessageLayout>\n\t)\n}\n\nexport default Message\n","import firebase from 'firebase'\nimport '@firebase/firestore' // 👈 Don't forget this!\nimport ReduxSagaFirebase from 'redux-saga-firebase'\nconst config = {\n\tapiKey: 'AIzaSyB2tCxT6yP0CWtCbD9JDj3ZKaxxW8T25PI',\n\tauthDomain: 'slacker-c3b01.firebaseapp.com',\n\tdatabaseURL: 'https://slacker-c3b01.firebaseio.com',\n\tprojectId: 'slacker-c3b01',\n\tstorageBucket: 'slacker-c3b01.appspot.com',\n\tmessagingSenderId: '286218247810',\n}\nconst firebaseApp = firebase.initializeApp(config)\nconst rsf = new ReduxSagaFirebase(firebaseApp)\nconst database = firebase.firestore() // const githubAuthProvider = new firebase.auth.GithubAuthProvider();\nexport { firebase, rsf, database as default }\n","import database, { firebase } from '../firebase/firebase'\n// import { history } from \"../routers/AppRouter\";\nimport moment from 'moment'\nimport * as path from 'path'\n// import { ipcRenderer } from 'electron';\n\nconst byCreatedAt = function(a: any, b: any) {\n\t// @ts-ignore\n\treturn new Date(a.createdAt) - new Date(b.createdAt)\n}\n\nexport interface RoomData {\n\tid?: string;\n\tname: string;\n\tpeople: any;\n\tmessages?: any;\n}\n\nexport const createRoom = ({ id, name, people, messages = [] }: RoomData) => ({\n\ttype: 'CREATE_ROOM',\n\troom: {\n\t\tid,\n\t\tname,\n\t\tpeople,\n\t\tmessages,\n\t},\n})\n\nexport const joinedRoom = (joinedRoom: RoomItem) => ({\n\ttype: 'JOINED_ROOM',\n\tjoinedRoom\n})\n\nexport const tryCreateRoom = (roomData: RoomData, showCreateError: any) => {\n\treturn (dispatch: any, getState: () => StoreState) => {\n\t\tconst room = {\n\t\t\tname: roomData.name,\n\t\t}\n\t\t// get all rooms\n\t\treturn database\n\t\t\t.collection('rooms')\n\t\t\t.get()\n\t\t\t.then(snapshot => {\n\t\t\t\tconst rooms: Room[] = []\n\t\t\t\tsnapshot.forEach(doc => {\n\t\t\t\t\tconsole.log(doc)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst room: Room = doc.data()\n\t\t\t\t\trooms.push({\n\t\t\t\t\t\t...room,\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t// if no room with this name\n\t\t\t\tif (!rooms.find(r => r.name === room.name)) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tdatabase\n\t\t\t\t\t\t\t.collection('rooms')\n\t\t\t\t\t\t\t.add(room)\n\t\t\t\t\t\t\t// create this room and\n\t\t\t\t\t\t\t.then(roomRef => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\tdatabase\n\t\t\t\t\t\t\t\t\t\t.collection(`rooms/${roomRef.id}/people`)\n\t\t\t\t\t\t\t\t\t\t.doc(roomData.people.id)\n\t\t\t\t\t\t\t\t\t\t// assign people to it?\n\t\t\t\t\t\t\t\t\t\t.set(roomData.people)\n\t\t\t\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t\t\t\tdatabase\n\t\t\t\t\t\t\t\t\t\t\t\t.collection(`users/${roomData.people.id}/rooms`)\n\t\t\t\t\t\t\t\t\t\t\t\t.doc(roomRef.id)\n\t\t\t\t\t\t\t\t\t\t\t\t.set({ roomName: room.name })\n\n\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\tcreateRoom({\n\t\t\t\t\t\t\t\t\t\t\t\t\tid: roomRef.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t...roomData,\n\t\t\t\t\t\t\t\t\t\t\t\t\tpeople: [roomData.people],\n\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tconst perName = roomData.people.name\n\t\t\t\t\t\t\t\t\t\t\t// dispatch(\n\t\t\t\t\t\t\t\t\t\t\t// \tstartSendMessage(\n\t\t\t\t\t\t\t\t\t\t\t// \t\t`${perName} created this room`,\n\t\t\t\t\t\t\t\t\t\t\t// \t\troom.name,\n\t\t\t\t\t\t\t\t\t\t\t// \t\ttrue,\n\t\t\t\t\t\t\t\t\t\t\t// \t),\n\t\t\t\t\t\t\t\t\t\t\t// ).then(() => {\n\t\t\t\t\t\t\t\t\t\t\t// \tdispatch(startListening(room.name))\n\t\t\t\t\t\t\t\t\t\t\t// \t// history.push(`/room/${room.name}`);\n\t\t\t\t\t\t\t\t\t\t\t// })\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\treturn showCreateError('Room name not available!')\n\t\t\t\t}\n\t\t\t})\n\t}\n}\n\nexport const startListening = (roomId: string) => {\n\treturn (dispatch: any, getState: () => StoreState) => {\n\t\treturn database\n\t\t\t.collection(`rooms/${roomId}/messages`)\n\t\t\t.onSnapshot(messagesQuery => {\n\t\t\t\tif (getState().rooms.joined.find(room => room.id === roomId)) {\n\t\t\t\t\tdatabase\n\t\t\t\t\t\t.collection(`rooms/${roomId}/people`)\n\t\t\t\t\t\t.get()\n\t\t\t\t\t\t.then(personQuery => {\n\t\t\t\t\t\t\tconst messages: any[] = []\n\t\t\t\t\t\t\tmessagesQuery.forEach(doc => {\n\t\t\t\t\t\t\t\tmessages.push({ id: doc.id, ...doc.data() })\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tconsole.log('listener -> ', { messages })\n\t\t\t\t\t\t\tmessages.sort(byCreatedAt)\n\t\t\t\t\t\t\treturn dispatch(updateMessages(messages, roomId))\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// dispatch(\n\t\t\t\t\t\t\t// \tsendMessage(\n\t\t\t\t\t\t\t// \t\t{\n\t\t\t\t\t\t\t// \t\t\t...message,\n\t\t\t\t\t\t\t// \t\t\tid: msgSnapshot ? msgSnapshot.key : 'nullSnap',\n\t\t\t\t\t\t\t// \t\t},\n\t\t\t\t\t\t\t// \t\troomName,\n\t\t\t\t\t\t\t// \t),\n\t\t\t\t\t\t\t// )\n\t\t\t\t\t\t\t// dispatch(orderRoomsStartState())\n\t\t\t\t\t\t\t// if (message.sender.displayName !== getState().auth.displayName) {\n\t\t\t\t\t\t\t// \t// ipcRenderer.send('playNotif', message.sender.displayName, message.text);\n\t\t\t\t\t\t\t// \tconst audio = new Audio('/sounds/notif.mp3')\n\t\t\t\t\t\t\t// \taudio.play()\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t// const keyword =\n\t\t\t\t\t\t\t// \tmessage.status && message.text.split(' ').splice(-1, 1)[0]\n\t\t\t\t\t\t\t// if (keyword === 'left') {\n\t\t\t\t\t\t\t// \tdispatch(onLeft(roomName, message.sender.uid))\n\t\t\t\t\t\t\t// } else if (keyword === 'joined') {\n\t\t\t\t\t\t\t// \tdispatch(\n\t\t\t\t\t\t\t// \t\tonJoined(roomName, personSnapshot.val()[message.sender.uid]),\n\t\t\t\t\t\t\t// \t)\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t// const personID = getState().auth.uid\n\n\t\t\t\t\t\t\t// if (personID === message.sender.uid && keyword !== 'left') {\n\t\t\t\t\t\t\t// \tdatabase\n\t\t\t\t\t\t\t// \t\t.ref(`rooms/${roomName}/people/${personID}`)\n\t\t\t\t\t\t\t// \t\t.update({ unread: 0, lastRead: message.createdAt })\n\t\t\t\t\t\t\t// \t\t.then(() => {\n\t\t\t\t\t\t\t// \t\t\tdispatch(\n\t\t\t\t\t\t\t// \t\t\t\tsetUnread(roomName, personID, message.createdAt, 0),\n\t\t\t\t\t\t\t// \t\t\t)\n\t\t\t\t\t\t\t// \t\t})\n\t\t\t\t\t\t\t// } else if (\n\t\t\t\t\t\t\t// \tpersonID !== message.sender.uid &&\n\t\t\t\t\t\t\t// \tmoment(message.createdAt) >\n\t\t\t\t\t\t\t// \t\tmoment(personSnapshot.val()[personID].lastRead)\n\t\t\t\t\t\t\t// ) {\n\t\t\t\t\t\t\t// \tdatabase\n\t\t\t\t\t\t\t// \t\t.ref(`rooms/${roomName}/people/${personID}`)\n\t\t\t\t\t\t\t// \t\t.update({\n\t\t\t\t\t\t\t// \t\t\tunread: personSnapshot.val()[personID].unread + 1,\n\t\t\t\t\t\t\t// \t\t\tlastRead: message.createdAt,\n\t\t\t\t\t\t\t// \t\t})\n\t\t\t\t\t\t\t// \t\t.then(() => {\n\t\t\t\t\t\t\t// \t\t\tdispatch(\n\t\t\t\t\t\t\t// \t\t\t\tsetUnread(\n\t\t\t\t\t\t\t// \t\t\t\t\troomName,\n\t\t\t\t\t\t\t// \t\t\t\t\tpersonID,\n\t\t\t\t\t\t\t// \t\t\t\t\tmessage.createdAt,\n\t\t\t\t\t\t\t// \t\t\t\t\tpersonSnapshot.val()[personID].unread + 1,\n\t\t\t\t\t\t\t// \t\t\t\t),\n\t\t\t\t\t\t\t// \t\t\t)\n\t\t\t\t\t\t\t// \t\t})\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t}\n}\n\nconst isAlreadyAdded = (data: any, id: string) => {\n\tfor (var key in data) {\n\t\tif (data[key].id === id) return true\n\t}\n\treturn false\n}\n\nexport const showError = (message: string) => ({\n\t\ttype: 'ERROR_MESSAGE',\n\t\tmessage\n})\n\nexport const sendMessage = (message: any, roomName: string) => ({\n\ttype: 'SEND_MESSAGE',\n\tmessage,\n\troomName,\n})\n\nexport const updateMessages = (messages: any, roomId: string) => ({\n\ttype: 'UPDATE_MESSAGES',\n\tmessages,\n\troomId,\n})\n\nexport const trySendMessage = (\n\ttext: string,\n\troomId: string,\n\tstatus: boolean = false,\n) => {\n\treturn (dispatch: any, getState: any) => {\n\t\tconst user = getState().auth\n\t\tif (user) {\n\t\t\tconst uid = user.uid\n\t\t\tconst displayName = user.displayName\n\t\t\tconst message = {\n\t\t\t\tsender: { uid, displayName },\n\t\t\t\ttext,\n\t\t\t\tcreatedAt: moment().format(),\n\t\t\t\tstatus,\n\t\t\t}\n\t\t\treturn database.collection(`rooms/${roomId}/messages`).add(message)\n\t\t}\n\t}\n}\n\nexport const orderRoomsStartState = () => ({\n\ttype: 'ORDER_ROOMS_START_STATE',\n})\n\nexport const availableRooms = (rooms: RoomItem[]) => ({\n\ttype: 'AVAILABLE_ROOMS',\n\trooms\n})\n\nexport const initSlacker = () => ({\n\ttype: 'INIT_SLACKER_SAGA'\n})\n\nexport const clearState = {\n\ttype: 'CLEAR_STATE',\n}\n\nexport const leaveRoom = (roomName: string, userId: string) => ({\n\ttype: 'LEAVE_ROOM',\n\troomName,\n\tuserId,\n})\n\n// export const startLeaveRoom = (roomName: string) => {\n// \treturn (dispatch: any, getState: any) => {\n// \t\tconst user = getState().auth\n// \t\tif (user) {\n// \t\t\tconst userId = user.uid\n// \t\t\tconst displayName = user.displayName\n// \t\t\tdatabase.ref(`rooms/${roomName}/people/${userId}`).remove()\n// \t\t\tdatabase.ref(`users/${userId}/rooms/${roomName}`).remove(() => {\n// \t\t\t\tdispatch(leaveRoom(roomName, userId))\n// \t\t\t\tdispatch(startSendMessage(`${displayName} left`, roomName, true))\n// \t\t\t\t// history.push(\"/join\");\n// \t\t\t})\n// \t\t}\n// \t}\n// }\n\nexport const clearUnread = (\n\troomName: string,\n\tuid: string,\n\ttime: any,\n\tunread: number,\n) => ({\n\ttype: 'CLEAR_UNREAD',\n\troomName,\n\tuid,\n\ttime,\n\tunread,\n})\n\nexport const setUnread = (\n\troomName: string,\n\tuid: string,\n\ttime: any,\n\tunread: number,\n) => {\n\treturn (dispatch: any) => {\n\t\tdispatch(clearUnread(roomName, uid, time, unread))\n\t}\n}\n\n// export const startClearUnread = (roomName: string) => {\n// \treturn (dispatch: any, getState: any) => {\n// \t\t// let time = moment().endOf(\"month\");\n// \t\tconst uid = getState().auth.uid\n// \t\tif (uid) {\n// \t\t\tconst time = moment().format()\n// \t\t\treturn database\n// \t\t\t\t.ref(`rooms/${roomName}/people/${uid}`)\n// \t\t\t\t.update({\n// \t\t\t\t\tunread: 0,\n// \t\t\t\t\tlastRead: time,\n// \t\t\t\t})\n// \t\t\t\t.then(() => {\n// \t\t\t\t\tdispatch(clearUnread(roomName, uid, time, 0))\n// \t\t\t\t})\n// \t\t}\n// \t}\n// }\n\nexport const onLeft = (roomName: string, personID: string) => ({\n\ttype: 'ON_LEFT',\n\troomName,\n\tpersonID,\n})\n\nexport const onJoined = (roomName: string, person: any) => ({\n\ttype: 'ON_JOINED',\n\troomName,\n\tperson,\n})\n\n\nexport const syncMessages = (messagesSnapshot: any, roomId: string) => {\n\tconst messages: any[] = []\n\tmessagesSnapshot.forEach((doc: any) => {\n\t\tmessages.push({ id: doc.id, ...doc.data() })\n\t})\n\n\tmessages.sort(byCreatedAt)\n\treturn updateMessages(messages, roomId)\n}\n","import React, { Fragment, Component } from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Layout, Typography } from 'antd'\n\nimport LoadingSpinner from './LoadingSpinner'\nimport Message from './Message'\nimport { trySendMessage } from '../actions/rooms'\n\nconst { Header, Content } = Layout\nconst { Title } = Typography\n\nconst ChatWrapper = styled.div`\n\theight: 100%;\n\tpadding: 24;\n\tdisplay: flex;\n\tflex-direction: column;\n\tbackground: '#fff';\n`\n\nconst Messages = styled.div`\n\tpadding-top: 8px;\n\tpadding-bottom: 8px;\n\tflex-grow: 1;\n\toverflow-y: scroll;\n\toverflow-x: hidden;\n`\n\nconst InputForm = styled.form`\n\theight: 44px;\n\tbackground-color: #fff;\n\tborder-radius: 4px;\n\tborder: 1px solid #acacac;\n\tdisplay: flex;\n\tflex-direction: row;\n\tflex-shrink: 0;\n`\n\nconst Input = styled.input`\n\tpadding-left: 14px;\n\tborder: none;\n\tborder-radius: 4px;\n\tflex-grow: 1;\n\toutline: none;\n`\n\nconst SendButton = styled.button`\n\tflex-shrink: 0;\n\tpadding: 0px 15px;\n\tbackground: none;\n\tborder: none;\n`\n\ninterface Props {\n\tauth: Auth\n\troom: RoomItem | { id: null; name: string; messages: any[] }\n\tmatch: any\n\tisLoading: boolean\n\tmessages: Message[]\n\ttrySendMessage: (text: string, roomId: string, status?: boolean) => void\n}\n\nclass RoomContainer extends Component<Props> {\n\tstate = {\n\t\tmessageValue: '',\n\t}\n\n\tmessagesEnd: any = null\n\tmessagesContainer: HTMLElement | null = null\n\n\tcomponentWillMount() {\n\t\tconst { roomId } = this.props.match.params\n\t\tconsole.log(roomId)\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.scrollToBottom()\n\t}\n\n\tcomponentDidUpdate(prevProps: Props) {\n\t\tif (prevProps.messages.length === 0 && this.props.messages.length > 0) {\n\t\t\tthis.scrollToBottom()\n\t\t\treturn\n\t\t}\n\n\t\t// scroll management\n\t\tif (\n\t\t\tprevProps.messages.length !== this.props.messages.length &&\n\t\t\tprevProps.messages.length > 0 &&\n\t\t\tthis.props.messages.length > 0\n\t\t) {\n\t\t\tconst previousLastMessage = prevProps.messages.slice(-1)[0]\n\t\t\tconst currentLastMessage = this.props.messages.slice(-1)[0]\n\t\t\tif (\n\t\t\t\tpreviousLastMessage.id !== currentLastMessage.id &&\n\t\t\t\t!!currentLastMessage &&\n\t\t\t\tcurrentLastMessage.sender.uid === this.props.auth.uid\n\t\t\t) {\n\t\t\t\t// last message was ours, scroll to the bottom\n\t\t\t\tthis.scrollToBottom()\n\t\t\t} else if (this.messagesContainer) {\n\t\t\t\t// last message is not ours, lets check scroll\n\t\t\t\tconst {\n\t\t\t\t\tscrollHeight,\n\t\t\t\t\tscrollTop,\n\t\t\t\t\toffsetHeight,\n\t\t\t\t\tclientHeight,\n\t\t\t\t} = this.messagesContainer\n\t\t\t\tconst calculato = scrollHeight - scrollTop === clientHeight\n\n\t\t\t\t// if our scroll is around bottom 2 messages, scroll to bottom pls\n\t\t\t\tif (Math.abs(clientHeight - (scrollHeight - scrollTop - 45)) < 45) {\n\t\t\t\t\tthis.scrollToBottom()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\thandleTyping = (e: any) => {\n\t\tthis.setState({ messageValue: e.target.value })\n\t}\n\n\tscrollToBottom = () => {\n\t\tif (this.messagesEnd) {\n\t\t\tthis.messagesEnd.scrollIntoView({ behavior: 'auto' })\n\t\t}\n\t}\n\n\thandleSend = (e: any) => {\n\t\te.preventDefault()\n\t\tconst { room } = this.props\n\t\tconst text = this.state.messageValue\n\t\tif (!!room.id && text.length > 0) {\n\t\t\tthis.props.trySendMessage(text, room.id)\n\t\t\tthis.setState({\n\t\t\t\tmessageValue: '',\n\t\t\t})\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { room, messages, isLoading } = this.props\n\t\t// console.log(messages)\n\t\tlet content = <LoadingSpinner />\n\t\tif (!isLoading) {\n\t\t\tcontent = (\n\t\t\t\t<ChatWrapper>\n\t\t\t\t\t<Messages\n\t\t\t\t\t\tref={el => {\n\t\t\t\t\t\t\tthis.messagesContainer = el\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{messages.map((message, idx) => (\n\t\t\t\t\t\t\t<Message\n\t\t\t\t\t\t\t\tisConsecutive={\n\t\t\t\t\t\t\t\t\t!!messages[idx - 1] &&\n\t\t\t\t\t\t\t\t\tmessages[idx - 1].sender.uid === message.sender.uid\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tname={message.sender.displayName || ''}\n\t\t\t\t\t\t\t\tkey={message.id}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{message.text}\n\t\t\t\t\t\t\t</Message>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ float: 'left', clear: 'both' }}\n\t\t\t\t\t\t\tref={el => {\n\t\t\t\t\t\t\t\tthis.messagesEnd = el\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Messages>\n\t\t\t\t\t<InputForm onSubmit={this.handleSend}>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tvalue={this.state.messageValue}\n\t\t\t\t\t\t\tonChange={this.handleTyping}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<SendButton type={'submit'}>Send</SendButton>\n\t\t\t\t\t</InputForm>\n\t\t\t\t</ChatWrapper>\n\t\t\t)\n\t\t}\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<Header\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackground: '#fff',\n\t\t\t\t\t\tborderBottom: '1px solid #acacac',\n\t\t\t\t\t\tpadding: 16,\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\tflexDirection: 'row',\n\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Title style={{ margin: 0 }} level={3}>\n\t\t\t\t\t\t# {room.name}\n\t\t\t\t\t</Title>\n\t\t\t\t</Header>\n\t\t\t\t<Content\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tmargin: '0px 16px 24px 26px',\n\t\t\t\t\t\toverflow: 'initial',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{content}\n\t\t\t\t</Content>\n\t\t\t</Fragment>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: StoreState, ownProps: any) => {\n\tconst { roomId } = ownProps.match.params\n\tconst room = state.rooms.joined.find(room => room.id === roomId)\n\tconst messages = room ? room.messages : []\n\treturn {\n\t\tauth: state.auth,\n\t\troom: room || { id: null, name: '', messages: [] },\n\t\tmessages,\n\t\tisLoading: !room,\n\t}\n}\n\nexport default connect(\n\tmapStateToProps,\n\t{ trySendMessage },\n)(RoomContainer)\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { connect } from 'react-redux'\nimport { Modal, Input, Typography } from 'antd'\nimport { tryCreateRoom, RoomData } from '../actions/rooms'\n\nconst { TextArea } = Input\nconst { Text } = Typography\n\nconst TextWrap = styled.div`\n\tmargin-top: 5px;\n\tmargin-bottom: 5px;\n`\n\ninterface Props {\n\tisOpen: boolean;\n\thandleClose: () => void;\n\ttryCreateRoom: (roomData: RoomData, showCreateError?: any) => Promise<any>;\n\tauth: Auth;\n}\n\ninterface State {\n\troomName: string;\n\tdescription: string;\n}\n\nclass CreateChatDialog extends Component<Props, State> {\n\tstate = {\n\t\troomName: '',\n\t\tdescription: '',\n\t}\n\n\thandleChange = (e: any) => {\n\t\tconsole.log(e.target.name)\n\t\t// @ts-ignore\n\t\tthis.setState({\n\t\t\t[e.target.name]: e.target.value,\n\t\t})\n\t}\n\n\thandleSubmit = () => {\n\t\tconst { uid, displayName: userDisplayName } = this.props.auth\n\t\tif (uid) {\n\t\t\tconsole.log('Create this room pls')\n\t\t\tconst roomName = this.state.roomName\n\t\t\tif (roomName && roomName.length > 0) {\n\t\t\t\t// this.setState({ error: '' })\n\t\t\t\tconst room = {\n\t\t\t\t\tname: roomName,\n\t\t\t\t\tpeople: {\n\t\t\t\t\t\tid: uid,\n\t\t\t\t\t\tname: userDisplayName,\n\t\t\t\t\t\tunread: 0,\n\t\t\t\t\t\tlastRead: 0,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tthis.props.tryCreateRoom(room)\n\t\t\t\tthis.props.handleClose()\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Modal\n\t\t\t\ttitle=\"Create Room\"\n\t\t\t\tvisible={this.props.isOpen}\n\t\t\t\tonOk={this.handleSubmit}\n\t\t\t\tonCancel={this.props.handleClose}\n\t\t\t\tokButtonProps={{ disabled: !this.props.auth.uid }}\n\t\t\t\tcancelButtonProps={{ disabled: !this.props.auth.uid }}\n\t\t\t>\n\t\t\t\t<TextWrap>\n\t\t\t\t\t<Text>Name:</Text>\n\t\t\t\t</TextWrap>\n\t\t\t\t<Input\n\t\t\t\t\tname=\"roomName\"\n\t\t\t\t\tvalue={this.state.roomName}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t\t<TextWrap>\n\t\t\t\t\t<Text>Description:</Text>\n\t\t\t\t</TextWrap>\n\t\t\t\t<TextArea\n\t\t\t\t\tname=\"description\"\n\t\t\t\t\tvalue={this.state.description}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\trows={4}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: any) => ({\n\tauth: state.auth,\n})\n\nexport default connect(\n\tmapStateToProps,\n\t{ tryCreateRoom },\n)(CreateChatDialog)\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { connect } from 'react-redux'\nimport { Layout, Menu, Button, Icon } from 'antd'\nimport RoomContainer from './RoomContainer'\nimport CreateChatDialog from './CreateChatDialog'\nimport LoadingSpinner from './LoadingSpinner'\nimport { tryLogin } from '../actions/auth'\nimport { initSlacker } from '../actions/rooms'\nimport '../styles/index.css'\n\nconst { Sider } = Layout\n// const { Text } = Typography\n\nconst ButtonWrap = styled.div`\n\ttext-align: center;\n\tpadding: 15px;\n`\n\nconst RoomButtons = styled.div`\n\tpadding: 10px;\n\tcolor: rgba(255, 255, 255, 0.65);\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tbackground: none;\n\tborder: none;\n\t-webkit-transition: color .5s;\n\ttransition: color .5s;\n\tcursor: pointer;\n\t&:hover {\n\t\tcolor: #fff;\n\t}\n`\n\ninterface Props {\n\ttryLogin: () => void\n\tinitSlacker: () => void\n\tauth: Auth\n\trooms: {\n\t\tjoined: RoomItem[]\n\t\tavailable: RoomItem[]\n\t}\n\thistory: any\n\tlocation: {\n\t\tpathname: any\n\t}\n}\n\ninterface State {\n\tisCreateRoomDialogOpen: boolean\n}\n\nclass App extends Component<Props> {\n\tstate = {\n\t\tisCreateRoomDialogOpen: false,\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.tryLogin()\n\t}\n\n\tcomponentWillUpdate(nextProps: Props) {\n\t\tif (!this.props.auth.uid && nextProps.auth.uid) {\n\t\t\tthis.props.initSlacker()\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps: Props) {\n\t\tconst { location, rooms, history } = this.props\n\t\tif (\n\t\t\tlocation.pathname === '/' &&\n\t\t\tprevProps.rooms.joined.length === 0 &&\n\t\t\trooms.joined.length !== 0\n\t\t) {\n\t\t\tconsole.log('redirect to first room?')\n\t\t\thistory.push(`/r/${rooms.joined[0].id}`)\n\t\t}\n\t}\n\n\thandleCloseCreateChatDialog = () => {\n\t\tthis.setState({\n\t\t\tisCreateRoomDialogOpen: false,\n\t\t})\n\t}\n\n\thandleOpenCreateChatDialog = () => {\n\t\tthis.setState({\n\t\t\tisCreateRoomDialogOpen: true,\n\t\t})\n\t}\n\n\thandleRoomSelect = ({ key }: { key: string }) => {\n\t\tthis.props.history.push(key)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Layout style={{ height: '100%' }}>\n\t\t\t\t<Sider\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\toverflow: 'auto',\n\t\t\t\t\t\theight: '100vh',\n\t\t\t\t\t\tposition: 'fixed',\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<ButtonWrap>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ticon=\"plus\"\n\t\t\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\t\t\tonClick={this.handleOpenCreateChatDialog}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCreate room\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</ButtonWrap>\n\t\t\t\t\t<CreateChatDialog\n\t\t\t\t\t\tisOpen={this.state.isCreateRoomDialogOpen}\n\t\t\t\t\t\thandleClose={this.handleCloseCreateChatDialog}\n\t\t\t\t\t/>\n\t\t\t\t\t<RoomButtons>\n\t\t\t\t\t\t<span>Rooms:</span>\n\t\t\t\t\t\t<Icon type=\"plus-circle\" />\n\t\t\t\t\t</RoomButtons>\n\t\t\t\t\t<Menu\n\t\t\t\t\t\ttheme=\"dark\"\n\t\t\t\t\t\tmode=\"inline\"\n\t\t\t\t\t\tonSelect={this.handleRoomSelect}\n\t\t\t\t\t\tdefaultSelectedKeys={[this.props.location.pathname]}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.props.rooms.joined.map(room => (\n\t\t\t\t\t\t\t<Menu.Item key={`/r/${room.id}`}>\n\t\t\t\t\t\t\t\t<span className=\"nav-text\"># {room.name}</span>\n\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Menu>\n\t\t\t\t</Sider>\n\t\t\t\t<Layout style={{ marginLeft: 200, background: '#fff' }}>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path={'/r/:roomId'} component={RoomContainer} />\n\t\t\t\t\t\t<Route path={'/'}>\n\t\t\t\t\t\t\t{this.props.rooms.joined.length === 0 ? (\n\t\t\t\t\t\t\t\t<LoadingSpinner />\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<div>No chat selected</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</Layout>\n\t\t\t</Layout>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n\tauth: state.auth,\n\trooms: state.rooms,\n})\n\nexport default connect(\n\tmapStateToProps,\n\t{ tryLogin, initSlacker },\n)(App)\n","import { firebase } from \"../firebase/firebase\";\n\nexport const loginSuccess = (uid: string, displayName: string) => ({\n  type: \"LOGIN\",\n  uid,\n  displayName\n});\n\nexport const tryLogin = () => {\n  return (dispatch: any) => {\n    return firebase\n      .auth()\n      .signInAnonymously()\n      .then(response => {\n        // console.log(response);\n        const { user } = response;\n\n        if (user) {\n          const displayName = user.displayName || \"Ninja\";\n          return dispatch(loginSuccess(user.uid, displayName));\n        }\n      })\n      .catch(function(error) {\n        console.log({ error });\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        // ...\n      });\n  };\n};\n\nexport const logout = () => ({\n  type: \"LOGOUT\"\n});\n\nexport const tryLogout = () => {\n  return () => {\n    return firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        console.log(\"log out!!!\");\n      });\n  };\n};\n","import moment from 'moment'\n\ninterface RoomsState {\n\tjoined: Room[];\n\tavailable: Room[];\n}\n\nconst defaultState: RoomsState = {\n\tjoined: [],\n\tavailable: [],\n}\n\nexport default (state: RoomsState = defaultState, action: any) => {\n\tswitch (action.type) {\n\t\tcase 'CREATE_ROOM':\n\t\t\treturn { ...state, joined: [...state.joined, action.room] }\n\t\tcase 'JOINED_ROOM':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tjoined: [...state.joined, action.room],\n\t\t\t}\n\n\t\tcase 'AVAILABLE_ROOMS':\n\t\t\treturn { ...state, available: action.rooms }\n\n\t\t// case 'ON_LEFT':\n\t\t// \t// console.log('onleft');\n\n\t\t// \treturn state.map(room => {\n\t\t// \t\t// console.log(room);\n\t\t// \t\tif (room.name === action.roomName) {\n\t\t// \t\t\tconst p = room.people.filter((person: Person) => {\n\t\t// \t\t\t\treturn person.id !== action.personID\n\t\t// \t\t\t})\n\t\t// \t\t\t// console.log(p);\n\t\t// \t\t\treturn {\n\t\t// \t\t\t\t...room,\n\t\t// \t\t\t\tpeople: p,\n\t\t// \t\t\t}\n\t\t// \t\t} else {\n\t\t// \t\t\treturn room\n\t\t// \t\t}\n\t\t// \t})\n\n\t\t// case 'ON_JOINED':\n\t\t// \treturn state.map(room => {\n\t\t// \t\tif (room.name === action.roomName) {\n\t\t// \t\t\troom.people.push(action.person)\n\t\t// \t\t\treturn room\n\t\t// \t\t} else {\n\t\t// \t\t\treturn room\n\t\t// \t\t}\n\t\t// \t})\n\n\t\tcase 'SEND_MESSAGE':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tjoined: state.joined.map(room => {\n\t\t\t\t\tif (room.name === action.roomName) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...room,\n\t\t\t\t\t\t\tmessages: [...room.messages, action.message],\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn room\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t}\n\t\tcase 'UPDATE_MESSAGES':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tjoined: state.joined.map(room => {\n\t\t\t\t\tif (room.id === action.roomId) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...room,\n\t\t\t\t\t\t\tmessages: [...action.messages],\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn room\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t}\n\t\t// case 'REORDER_ROOMS':\n\t\t//   let room;\n\t\t//   let rooms = state.filter((r) => {\n\t\t//     if(r.name === action.roomName) {\n\t\t//       room = r;\n\t\t//       return false;\n\t\t//     }\n\t\t//     else {\n\t\t//       return true;\n\t\t//     }\n\t\t//   });\n\t\t//   rooms.unshift(room);\n\t\t//   return rooms;\n\t\t// case 'ORDER_ROOMS_START_STATE':\n\t\t// \t//  const x =  action.rooms.sort((a, b) => {\n\t\t// \t//   //  console.log('a', a);\n\t\t// \t//   //  console.log('b', b);\n\t\t// \t//   if(a.messages.length > 0 && b.messages.length > 0) {\n\t\t// \t//     console.log(typeof a.messages);\n\n\t\t// \t//     return moment(a.messages[a.messages.length-1].createdAt) > moment(b.messages[b.messages.length-1].createdAt)\n\t\t// \t//     // {\n\t\t// \t//   //     return -1;\n\t\t// \t//   //   } else {\n\t\t// \t//   //     return 1;\n\t\t// \t//   //   }\n\t\t// \t//   // }\n\t\t// \t//   // else {\n\t\t// \t//   //   return -1;\n\t\t// \t//   }\n\t\t// \t// });\n\t\t// \t// console.log(typeof x)\n\t\t// \t// console.log(x);\n\t\t// \t// return x;\n\t\t// \tstate.sort((a: any, b: any) => {\n\t\t// \t\treturn moment(a.messages[a.messages.length - 1].createdAt) <\n\t\t// \t\t\tmoment(b.messages[b.messages.length - 1].createdAt)\n\t\t// \t\t\t? 1\n\t\t// \t\t\t: -1\n\t\t// \t})\n\t\t// \t// console.log(state);\n\t\t// \treturn state.map(room => room)\n\n\t\t// case 'CLEAR_UNREAD':\n\t\t// \treturn state.map(room => {\n\t\t// \t\tif (room.name === action.roomName) {\n\t\t// \t\t\tconst people = room.people.map((person: Person) => {\n\t\t// \t\t\t\tif (person.id === action.uid) {\n\t\t// \t\t\t\t\treturn {\n\t\t// \t\t\t\t\t\t...person,\n\t\t// \t\t\t\t\t\tunread: action.unread,\n\t\t// \t\t\t\t\t\tlastRead: action.time,\n\t\t// \t\t\t\t\t}\n\t\t// \t\t\t\t} else {\n\t\t// \t\t\t\t\treturn person\n\t\t// \t\t\t\t}\n\t\t// \t\t\t})\n\t\t// \t\t\treturn { ...room, people }\n\t\t// \t\t} else {\n\t\t// \t\t\treturn room\n\t\t// \t\t}\n\t\t// \t})\n\n\t\t// case 'LEAVE_ROOM':\n\t\t// \treturn state.filter(room => {\n\t\t// \t\treturn room.name !== action.roomName\n\t\t// \t})\n\t\t// case 'CLEAR_STATE':\n\t\t// \treturn []\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","import authReducer from '../reducers/auth'\nimport roomsReducer from '../reducers/rooms'\nimport redirectReducer from '../reducers/redirect'\nimport { combineReducers } from 'redux'\n\nconst reducers = combineReducers({\n\tauth: authReducer,\n\trooms: roomsReducer,\n\tredirect: redirectReducer,\n})\n\nexport default reducers\n","export default (state = {}, action: any) => {\n  switch (action.type) {\n    case \"LOGIN\":\n      return {\n        uid: action.uid,\n        displayName: action.displayName\n      };\n    case \"LOGOUT\":\n      return {};\n    default:\n      return state;\n  }\n};\n","export default (state = {}, action: any) => {\n\tswitch (action.type) {\n\t\tcase 'REDIRECT_TO':\n\t\t\treturn {\n\t\t\t\tredirectTo: action.redirectTo,\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","import { put, select, takeLatest, fork, call } from 'redux-saga/effects'\nimport database, { firebase, rsf } from '../firebase/firebase'\nimport { availableRooms, createRoom, syncMessages } from '../actions/rooms'\n\nconst byCreatedAt = function(a: any, b: any) {\n\t// @ts-ignore\n\treturn new Date(a.createdAt) - new Date(b.createdAt)\n}\n\nexport function* fetchRoomSaga(roomId: string) {\n\tconsole.log('try fetch room ', roomId)\n\t// fetch joined room from firestore\n\tconst roomRef = database.collection('rooms').doc(roomId)\n\tconst roomDoc = yield call(rsf.firestore.getDocument, roomRef)\n\n\t// if we have such room\n\tif (roomDoc.exists) {\n\t\tconst room = roomDoc.data()\n\t\tconst people: any[] = []\n\t\tconst messages: any[] = []\n\n\t\t// get room's people\n\t\tconst peopleQuery = yield call(\n\t\t\trsf.firestore.getCollection,\n\t\t\troomRef.collection('people'),\n\t\t)\n\t\tpeopleQuery.forEach((peopleDoc: any) => {\n\t\t\tpeople.push({ id: peopleDoc.id, ...peopleDoc.data() })\n\t\t})\n\t\tconsole.log({ people })\n\n\t\t// get room's people\n\t\tconst messagesQuery = yield call(\n\t\t\trsf.firestore.getCollection,\n\t\t\troomRef.collection('messages'),\n\t\t)\n\t\tmessagesQuery.forEach((messageDoc: any) => {\n\t\t\tmessages.push({\n\t\t\t\tid: messageDoc.id,\n\t\t\t\t...messageDoc.data(),\n\t\t\t})\n\t\t})\n\t\tmessages.sort(byCreatedAt)\n\t\tconsole.log({ messages })\n\n\t\tyield put(\n\t\t\tcreateRoom({\n\t\t\t\tid: roomRef.id,\n\t\t\t\tname: room ? room.name : 'Error',\n\t\t\t\tpeople,\n\t\t\t\tmessages,\n\t\t\t}),\n\t\t)\n\n\t\t// subscribe to messages\n\t\tyield fork(rsf.firestore.syncCollection, roomRef.collection('messages'), {\n\t\t\tsuccessActionCreator: (snapshot: any) => syncMessages(snapshot, roomId),\n\t\t})\n\t}\n}\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* initSlackerSaga(action: any) {\n\tconst auth = yield select(state => state.auth)\n\n\tif (!auth.uid) {\n\t\tconsole.log('no auth!')\n\t\treturn\n\t}\n\n\t// fetch all rooms\n\tconst roomsPromise = database.collection('rooms').get()\n\n\tconst roomsQuery: firebase.firestore.QuerySnapshot = yield roomsPromise\n\tconst rooms: RoomItem[] = []\n\troomsQuery.forEach(doc => {\n\t\tconst room = {\n\t\t\tid: doc.id,\n\t\t\t...doc.data(),\n\t\t}\n\t\t// @ts-ignore\n\t\trooms.push(room)\n\t})\n\n\tyield put(availableRooms(rooms))\n\tconst generalRoom = rooms.find(room => room.name === 'general')\n\n\t// get user rooms\n\tconst userRoomsQuery = yield call(\n\t\trsf.firestore.getCollection,\n\t\t`users/${auth.uid}/rooms`,\n\t)\n\n\tif (!userRoomsQuery.empty) {\n\t\tconst userRoomIds: string[] = []\n\t\tuserRoomsQuery.forEach((userRoomDoc: any) =>\n\t\t\tuserRoomIds.push(userRoomDoc.id),\n\t\t)\n\n\t\t// fetch each joined room\n\t\tfor (let roomId of userRoomIds) {\n\t\t\tconst task = yield fork(fetchRoomSaga, roomId)\n\t\t}\n\n\t\t// if no general room, join that as well\n\t\tif(generalRoom && !userRoomIds.includes(generalRoom.id)) {\n\t\t\tyield put({\n\t\t\t\ttype: 'JOIN_ROOM_SAGA',\n\t\t\t\troomId: generalRoom.id,\n\t\t\t\troom: generalRoom,\n\t\t\t})\n\t\t}\n\t} else {\n\t\tif (generalRoom) {\n\t\t\tyield put({\n\t\t\t\ttype: 'JOIN_ROOM_SAGA',\n\t\t\t\troomId: generalRoom.id,\n\t\t\t\troom: generalRoom,\n\t\t\t})\n\t\t}\n\t}\n}\n\nfunction* mySaga() {\n\tyield takeLatest('INIT_SLACKER_SAGA', initSlackerSaga)\n}\n\nexport default mySaga\n","import { put, select, takeEvery, fork, call } from 'redux-saga/effects'\nimport { AnyAction } from 'redux'\nimport database, { firebase, rsf } from '../firebase/firebase'\nimport { joinedRoom, showError, syncMessages } from '../actions/rooms'\nimport { fetchRoomSaga } from './initSaga'\n\nconst byCreatedAt = function(a: any, b: any) {\n\t// @ts-ignore\n\treturn new Date(a.createdAt) - new Date(b.createdAt)\n}\n\nfunction* joinRoom(action: AnyAction) {\n\tconst { roomId } = action\n\tconst { uid, displayName } = yield select(state => state.auth)\n\tconst roomRef = database.doc(`rooms/${roomId}`)\n\n\tconst roomDoc = yield call(rsf.firestore.getDocument, roomRef)\n\tconst room = <RoomItem>{ id: roomDoc.id, ...roomDoc.data() }\n\n\tif (!room || !roomDoc.exists) {\n\t\tyield put(showError('Room not found!'))\n\t\treturn\n\t} else if (\n\t\troom.people &&\n\t\troom.people.find((person: Person) => person.id === uid)\n\t) {\n\t\t// if we are already in this room then\n\t\t// history.push(`room/${data.roomName}`);\n\t\t// return i guess ?\n\t\treturn\n\t} else {\n\t\t// we should add ourselves to this room\n\n\t\tconst person = {\n\t\t\tname: displayName,\n\t\t\tid: uid,\n\t\t\tunread: 0,\n\t\t\tlastRead: 0,\n\t\t}\n\n\t\t// TODO figure wtf is wrong here\n\t\tyield call(\n\t\t\t// @ts-ignore\n\t\t\trsf.firestore.setDocument,\n\t\t\t`rooms/${roomId}/people/${person.id}`,\n\t\t\tperson,\n\t\t)\n\n\t\tyield call(\n\t\t\t// @ts-ignore\n\t\t\trsf.firestore.setDocument,\n\t\t\t`users/${person.id}/rooms/${roomId}`,\n\t\t\t{ roomName: room.name },\n\t\t)\n\n\t\t// fetch full room and subscribe\n\t\tyield call(fetchRoomSaga, roomId)\n\t}\n}\n\nfunction* joinRoomSaga() {\n\tyield takeEvery('JOIN_ROOM_SAGA', joinRoom)\n}\n\nexport default joinRoomSaga\n","import { all } from 'redux-saga/effects'\nimport initSaga from './initSaga'\nimport joinRoomSaga from './joinRoomSaga'\n\nexport default function* rootSaga() {\n\tyield all([initSaga(), joinRoomSaga()])\n}\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport createSagaMiddleware from 'redux-saga'\nimport reducers from '../reducers'\n\nimport mySaga from '../sagas/rootSaga'\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware()\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nexport default () => {\n\tconst store = createStore(\n\t\treducers,\n\t\tcomposeEnhancers(applyMiddleware(thunk, sagaMiddleware)),\n\t)\n\n\tsagaMiddleware.run(mySaga)\n\n\treturn store\n}\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { HashRouter as Router, Route } from 'react-router-dom'\nimport ReactDOM from 'react-dom'\nimport 'antd/dist/antd.css'\n\nimport App from './components/App'\nimport configureStore from './store/configureStore'\n\nconst store = configureStore()\nconst jsx = (\n\t<Provider store={store}>\n\t\t<Router>\n\t\t\t<Route path={'/'} component={App} />\n\t\t</Router>\n\t</Provider>\n)\n\nReactDOM.render(jsx, document.getElementById('container'))\n"],"sourceRoot":""}