{"version":3,"sources":["components/LoadingSpinner.tsx","firebase/firebase.ts","actions/rooms.ts","components/RoomContainer.tsx","components/CreateChatDialog.tsx","components/App.tsx","actions/auth.ts","reducers/rooms.ts","reducers/index.ts","reducers/auth.ts","reducers/redirect.ts","sagas/initSaga.ts","sagas/joinRoomSaga.ts","sagas/rootSaga.ts","store/configureStore.ts","index.tsx"],"names":["LoadingWrapper","styled","div","_templateObject","LoadingSpinner","react_default","a","createElement","spin","size","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","rsf","ReduxSagaFirebase","database","firestore","byCreatedAt","b","Date","createdAt","createRoom","_ref","id","name","people","_ref$messages","messages","type","room","showError","message","updateMessages","roomId","availableRooms","rooms","syncMessages","messagesSnapshot","forEach","doc","push","Object","objectSpread","data","sort","Header","Layout","Content","Title","Typography","ChatWrapper","RoomContainer_templateObject","Messages","_templateObject2","Message","_templateObject3","InputForm","form","_templateObject4","Input","input","_templateObject5","SendButton","button","_templateObject6","RoomContainer","state","messageValue","messagesEnd","handleTyping","e","_this","setState","target","value","scrollToBottom","scrollIntoView","behavior","handleSend","preventDefault","props","text","trySendMessage","this","prevProps","length","previousLastMessage","slice","currentLastMessage","sender","uid","auth","_this2","_this$props","isLoading","content","components_LoadingSpinner","map","key","style","float","clear","ref","el","onSubmit","onChange","react","background","padding","display","flexRirection","alignItems","margin","level","overflow","Component","connect","ownProps","match","params","joined","find","status","arguments","undefined","dispatch","getState","user","displayName","moment","format","collection","concat","add","TextArea","Text","TextWrap","CreateChatDialog_templateObject","CreateChatDialog","roomName","description","handleChange","console","log","defineProperty","handleSubmit","_this$props$auth","userDisplayName","unread","lastRead","tryCreateRoom","handleClose","modal","title","visible","isOpen","onOk","onCancel","okButtonProps","disabled","cancelButtonProps","rows","roomData","showCreateError","get","then","snapshot","r","roomRef","set","Sider","ButtonWrap","App_templateObject","MenuLabel","App_templateObject2","App","isCreateRoomDialogOpen","handleCloseCreateChatDialog","handleOpenCreateChatDialog","handleRoomSelect","history","tryLogin","nextProps","initSlacker","location","pathname","layout","height","position","left","es_button","icon","onClick","components_CreateChatDialog","menu","theme","mode","onSelect","defaultSelectedKeys","Item","className","marginLeft","react_router","path","component","signInAnonymously","response","loginSuccess","catch","error","code","defaultState","available","reducers","combineReducers","action","toConsumableArray","redirect","redirectTo","fetchRoomSaga","initSlackerSaga","mySaga","roomDoc","regenerator_default","wrap","_context","prev","next","call","getDocument","sent","exists","getCollection","peopleDoc","messageDoc","put","fork","syncCollection","successActionCreator","stop","_marked","roomsPromise","roomsQuery","generalRoom","userRoomsQuery","userRoomIds","_i","_userRoomIds","_context2","select","abrupt","empty","userRoomDoc","includes","_marked2","_context3","takeLatest","_marked3","joinRoom","joinRoomSaga","person","setDocument","joinRoomSaga_marked","takeEvery","joinRoomSaga_marked2","rootSaga","all","initSaga","rootSaga_marked","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","run","configureStore","jsx","es","react_router_dom","ReactDOM","render","document","getElementById"],"mappings":"uiBAIA,IAAMA,EAAiBC,IAAOC,IAAVC,KAgBLC,EANQ,kBACtBC,EAAAC,EAAAC,cAACP,EAAD,KACCK,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,KAAK,iECLPC,EAAcC,IAASC,cARd,CACdC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,iBAGdC,EAAM,IAAIC,IAAkBV,GAC5BW,EAAWV,IAASW,8BCPpBC,EAAc,SAASjB,EAAQkB,GAEpC,OAAO,IAAIC,KAAKnB,EAAEoB,WAAa,IAAID,KAAKD,EAAEE,YAU9BC,EAAa,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,GAAIC,EAAPF,EAAOE,KAAMC,EAAbH,EAAaG,OAAbC,EAAAJ,EAAqBK,SAArB,MAAoD,CAC7EC,KAAM,cACNC,KAAM,CACLN,KACAC,OACAC,SACAE,cANwB,IAAAD,EAAgC,GAAhCA,KA2KbI,EAAY,SAACC,GAAD,MAAsB,CAC7CH,KAAM,gBACNG,YASWC,EAAiB,SAACL,EAAeM,GAAhB,MAAoC,CACjEL,KAAM,kBACND,WACAM,WA4BYC,EAAiB,SAACC,GAAD,MAAwB,CACrDP,KAAM,kBACNO,UAyFYC,EAAe,SAACC,EAAuBJ,GACnD,IAAMN,EAAkB,GAMxB,OALAU,EAAiBC,QAAQ,SAACC,GACzBZ,EAASa,KAATC,OAAAC,EAAA,EAAAD,CAAA,CAAgBlB,GAAIgB,EAAIhB,IAAOgB,EAAII,WAGpChB,EAASiB,KAAK3B,GACPe,EAAeL,EAAUM,u5BCjUzBY,EAAoBC,IAApBD,OAAQE,EAAYD,IAAZC,QACRC,EAAUC,IAAVD,MAEFE,EAAcvD,IAAOC,IAAVuD,KAQXC,EAAWzD,IAAOC,IAAVyD,KAMRC,EAAU3D,IAAOC,IAAV2D,KAMPC,EAAY7D,IAAO8D,KAAVC,KAUTC,GAAQhE,IAAOiE,MAAVC,KAOLC,GAAanE,IAAOoE,OAAVC,KAYVC,8MACLC,MAAQ,CACPC,aAAc,MAGfC,YAAmB,OAgCnBC,aAAe,SAACC,GACfC,EAAKC,SAAS,CAAEL,aAAcG,EAAEG,OAAOC,WAGxCC,eAAiB,WACZJ,EAAKH,aACRG,EAAKH,YAAYQ,eAAe,CAAEC,SAAU,YAI9CC,WAAa,SAACR,GACbA,EAAES,iBADsB,IAEhBlD,EAAS0C,EAAKS,MAAdnD,KACR,GAAMA,EAAKN,GAAI,CACd,IAAM0D,EAAOV,EAAKL,MAAMC,aACxBI,EAAKS,MAAME,eAAeD,EAAMpD,EAAKN,IACrCgD,EAAKC,SAAS,CACbL,aAAc,0FA9ChBgB,KAAKR,4DAGaS,GAClB,GAAkC,IAA9BA,EAAUzD,SAAS0D,QAAgBF,KAAKH,MAAMrD,SAAS0D,OAAS,EACnEF,KAAKR,sBAIN,GACCS,EAAUzD,SAAS0D,SAAWF,KAAKH,MAAMrD,SAAS0D,QAClDD,EAAUzD,SAAS0D,OAAS,GAC5BF,KAAKH,MAAMrD,SAAS0D,OAAS,EAC5B,CACD,IAAMC,EAAsBF,EAAUzD,SAAS4D,OAAO,GAAG,GACnDC,EAAqBL,KAAKH,MAAMrD,SAAS4D,OAAO,GAAG,GAExDD,EAAoB/D,KAAOiE,EAAmBjE,IAC5CiE,GACFA,EAAmBC,OAAOC,MAAQP,KAAKH,MAAMW,KAAKD,KAGlDP,KAAKR,mDA6BC,IAAAiB,EAAAT,KAAAU,EAC8BV,KAAKH,MAAnCnD,EADAgE,EACAhE,KAAMF,EADNkE,EACMlE,SAAUmE,EADhBD,EACgBC,UAEpBC,EACHhG,EAAAC,EAAAC,cAAC+F,EAAD,MA0BD,OAxBKF,IACJC,EACChG,EAAAC,EAAAC,cAACiD,EAAD,KACCnD,EAAAC,EAAAC,cAACmD,EAAD,KACEzB,EAASsE,IAAI,SAAAlE,GAAO,OACpBhC,EAAAC,EAAAC,cAACqD,EAAD,CAAS4C,IAAKnE,EAAQR,IAAKQ,EAAQkD,QAEpClF,EAAAC,EAAAC,cAAA,OACCkG,MAAO,CAAEC,MAAO,OAAQC,MAAO,QAC/BC,IAAK,SAAAC,GACJX,EAAKxB,YAAcmC,MAItBxG,EAAAC,EAAAC,cAACuD,EAAD,CAAWgD,SAAUrB,KAAKL,YACzB/E,EAAAC,EAAAC,cAAC0D,GAAD,CACCe,MAAOS,KAAKjB,MAAMC,aAClBsC,SAAUtB,KAAKd,eAEhBtE,EAAAC,EAAAC,cAAC6D,GAAD,CAAYlC,KAAM,UAAlB,WAMH7B,EAAAC,EAAAC,cAACyG,EAAA,SAAD,KACC3G,EAAAC,EAAAC,cAAC4C,EAAD,CACCsD,MAAO,CACNQ,WAAY,OACZC,QAAS,GACTC,QAAS,OACTC,cAAe,MACfC,WAAY,WAGbhH,EAAAC,EAAAC,cAAC+C,EAAD,CAAOmD,MAAO,CAAEa,OAAQ,GAAKC,MAAO,GAApC,KACIpF,EAAKL,OAGVzB,EAAAC,EAAAC,cAAC8C,EAAD,CACCoD,MAAO,CACNa,OAAQ,YACRE,SAAU,YAGVnB,WA9GsBoB,aAiIbC,eAZS,SAAClD,EAAmBmD,GAAkB,IACrDpF,EAAWoF,EAASC,MAAMC,OAA1BtF,OACFJ,EAAOqC,EAAM/B,MAAMqF,OAAOC,KAAK,SAAA5F,GAAI,OAAIA,EAAKN,KAAOU,IACnDN,EAAWE,EAAOA,EAAKF,SAAW,GACxC,MAAO,CACNgE,KAAMzB,EAAMyB,KACZ9D,KAAMA,GAAQ,CAAEN,GAAI,KAAMC,KAAM,GAAIG,SAAU,IAC9CA,WACAmE,WAAYjE,IAMb,CAAEqD,eDe2B,SAC7BD,EACAhD,GAEI,IADJyF,EACIC,UAAAtC,OAAA,QAAAuC,IAAAD,UAAA,IAAAA,UAAA,GACJ,OAAO,SAACE,EAAeC,GACtB,IAAMC,EAAOD,IAAWnC,KACxB,GAAIoC,EAAM,CACT,IAEMhG,EAAU,CACf0D,OAAQ,CAAEC,IAHCqC,EAAKrC,IAGDsC,YAFID,EAAKC,aAGxB/C,OACA7D,UAAW6G,MAASC,SACpBR,UAED,OAAO3G,EAASoH,WAAT,SAAAC,OAA6BnG,EAA7B,cAAgDoG,IAAItG,OCjC/CqF,CAGbnD,0JC1LMqE,GAAa3E,KAAb2E,SACAC,GAAStF,IAATsF,KAEFC,GAAW7I,IAAOC,IAAV6I,MAiBRC,8MACLxE,MAAQ,CACPyE,SAAU,GACVC,YAAa,MAGdC,aAAe,SAACvE,GACfwE,QAAQC,IAAIzE,EAAEG,OAAOjD,MAErB+C,EAAKC,SAAL/B,OAAAuG,GAAA,EAAAvG,CAAA,GACE6B,EAAEG,OAAOjD,KAAO8C,EAAEG,OAAOC,WAI5BuE,aAAe,WAAM,IAAAC,EAC0B3E,EAAKS,MAAMW,KAAjDD,EADYwD,EACZxD,IAAkByD,EADND,EACPlB,YACb,GAAItC,EAAK,CACRoD,QAAQC,IAAI,wBACZ,IAAMJ,EAAWpE,EAAKL,MAAMyE,SAC5B,GAAIA,GAAYA,EAAStD,OAAS,EAAG,CAEpC,IAAMxD,EAAO,CACZL,KAAMmH,EACNlH,OAAQ,CACPF,GAAImE,EACJlE,KAAM2H,EACNC,OAAQ,EACRC,SAAU,IAGZ9E,EAAKS,MAAMsE,cAAczH,GACzB0C,EAAKS,MAAMuE,yFAMb,OACCxJ,EAAAC,EAAAC,cAACuJ,GAAA,EAAD,CACCC,MAAM,cACNC,QAASvE,KAAKH,MAAM2E,OACpBC,KAAMzE,KAAK8D,aACXY,SAAU1E,KAAKH,MAAMuE,YACrBO,cAAe,CAAEC,UAAW5E,KAAKH,MAAMW,KAAKD,KAC5CsE,kBAAmB,CAAED,UAAW5E,KAAKH,MAAMW,KAAKD,MAEhD3F,EAAAC,EAAAC,cAACuI,GAAD,KACCzI,EAAAC,EAAAC,cAACsI,GAAD,eAEDxI,EAAAC,EAAAC,cAAC2D,GAAA,EAAD,CACCpC,KAAK,WACLkD,MAAOS,KAAKjB,MAAMyE,SAClBlC,SAAUtB,KAAK0D,eAEhB9I,EAAAC,EAAAC,cAACuI,GAAD,KACCzI,EAAAC,EAAAC,cAACsI,GAAD,sBAEDxI,EAAAC,EAAAC,cAACqI,GAAD,CACC9G,KAAK,cACLkD,MAAOS,KAAKjB,MAAM0E,YAClBnC,SAAUtB,KAAK0D,aACfoB,KAAM,YA7DoB9C,aAwEhBC,eAJS,SAAClD,GAAD,MAAiB,CACxCyB,KAAMzB,EAAMyB,OAKZ,CAAE2D,cFnE0B,SAACY,EAAoBC,GACjD,OAAO,SAACtC,EAAeC,GACtB,IAAMjG,EAAO,CACZL,KAAM0I,EAAS1I,MAGhB,OAAOT,EACLoH,WAAW,SACXiC,MACAC,KAAK,SAAAC,GACL,IAAMnI,EAAgB,GAUtB,OATAmI,EAAShI,QAAQ,SAAAC,GAChBuG,QAAQC,IAAIxG,GAEZ,IAAMV,EAAaU,EAAII,OACvBR,EAAMK,KAANC,OAAAC,EAAA,EAAAD,CAAA,GACIZ,MAIAM,EAAMsF,KAAK,SAAA8C,GAAC,OAAIA,EAAE/I,OAASK,EAAKL,OA0C7B2I,EAAgB,4BAxCtBpJ,EACEoH,WAAW,SACXE,IAAIxG,GAEJwI,KAAK,SAAAG,GACL,OACCzJ,EACEoH,WADF,SAAAC,OACsBoC,EAAQjJ,GAD9B,YAEEgB,IAAI2H,EAASzI,OAAOF,IAEpBkJ,IAAIP,EAASzI,QACb4I,KAAK,WACLtJ,EACEoH,WADF,SAAAC,OACsB8B,EAASzI,OAAOF,GADtC,WAEEgB,IAAIiI,EAAQjJ,IACZkJ,IAAI,CAAE9B,SAAU9G,EAAKL,OAEvBqG,EACCxG,EAAWoB,OAAAC,EAAA,EAAAD,CAAA,CACVlB,GAAIiJ,EAAQjJ,IACT2I,EAFM,CAGTzI,OAAQ,CAACyI,EAASzI,YAGJyI,EAASzI,OAAOD,cEmB5B4F,CAGbsB,6XCzFMgC,GAAU5H,IAAV4H,MAGFC,GAAahL,IAAOC,IAAVgL,MAKVC,GAAYlL,IAAOoE,OAAV+G,MA8BTC,8MACL7G,MAAQ,CACP8G,wBAAwB,KAyBzBC,4BAA8B,WAC7B1G,EAAKC,SAAS,CACbwG,wBAAwB,OAI1BE,2BAA6B,WAC5B3G,EAAKC,SAAS,CACbwG,wBAAwB,OAI1BG,iBAAmB,SAAA7J,GAA8B,IAA3B4E,EAA2B5E,EAA3B4E,IACrB3B,EAAKS,MAAMoG,QAAQ5I,KAAK0D,uFAlCxBf,KAAKH,MAAMqG,uDAGQC,IACdnG,KAAKH,MAAMW,KAAKD,KAAO4F,EAAU3F,KAAKD,KAC1CP,KAAKH,MAAMuG,yDAIMnG,GAAkB,IAAAS,EACCV,KAAKH,MAAlCwG,EAD4B3F,EAC5B2F,SAAUrJ,EADkB0D,EAClB1D,MAAOiJ,EADWvF,EACXuF,QAEF,MAAtBI,EAASC,UACyB,IAAlCrG,EAAUjD,MAAMqF,OAAOnC,QACC,IAAxBlD,EAAMqF,OAAOnC,SAEbyD,QAAQC,IAAI,2BACZqC,EAAQ5I,KAAR,MAAA4F,OAAmBjG,EAAMqF,OAAO,GAAGjG,uCAqBpC,OACCxB,EAAAC,EAAAC,cAACyL,EAAA,EAAD,CAAQvF,MAAO,CAAEwF,OAAQ,SACxB5L,EAAAC,EAAAC,cAACyK,GAAD,CACCvE,MAAO,CACNe,SAAU,OACVyE,OAAQ,QACRC,SAAU,QACVC,KAAM,IAGP9L,EAAAC,EAAAC,cAAC0K,GAAD,KACC5K,EAAAC,EAAAC,cAAC6L,EAAA,EAAD,CACCC,KAAK,OACLnK,KAAK,UACLoK,QAAS7G,KAAK+F,4BAHf,gBAQDnL,EAAAC,EAAAC,cAACgM,GAAD,CACCtC,OAAQxE,KAAKjB,MAAM8G,uBACnBzB,YAAapE,KAAK8F,8BAEnBlL,EAAAC,EAAAC,cAAC4K,GAAD,KACC9K,EAAAC,EAAAC,cAAA,uBAEDF,EAAAC,EAAAC,cAACiM,EAAA,EAAD,CACCC,MAAM,OACNC,KAAK,SACLC,SAAUlH,KAAKgG,iBACfmB,oBAAqB,CAACnH,KAAKH,MAAMwG,SAASC,WAEzCtG,KAAKH,MAAM7C,MAAMqF,OAAOvB,IAAI,SAAApE,GAAI,OAChC9B,EAAAC,EAAAC,cAACiM,EAAA,EAAKK,KAAN,CAAWrG,IAAG,MAAAkC,OAAQvG,EAAKN,KAC1BxB,EAAAC,EAAAC,cAAA,QAAMuM,UAAU,YAAhB,KAA8B3K,EAAKL,WAKvCzB,EAAAC,EAAAC,cAACyL,EAAA,EAAD,CAAQvF,MAAO,CAAEsG,WAAY,MAC5B1M,EAAAC,EAAAC,cAACyM,EAAA,EAAD,KACC3M,EAAAC,EAAAC,cAACyM,EAAA,EAAD,CAAOC,KAAM,aAAcC,UAAW3I,KACtClE,EAAAC,EAAAC,cAACyM,EAAA,EAAD,CAAOC,KAAM,KACwB,IAAnCxH,KAAKH,MAAM7C,MAAMqF,OAAOnC,OACxBtF,EAAAC,EAAAC,cAAC+F,EAAD,MAEAjG,EAAAC,EAAAC,cAAA,0CA1FUkH,aAyGHC,eALS,SAAClD,GAAD,MAAwB,CAC/CyB,KAAMzB,EAAMyB,KACZxD,MAAO+B,EAAM/B,QAKb,CAAEkJ,SCrJqB,WACtB,OAAO,SAACxD,GACN,OAAOxH,IACJsF,OACAkH,oBACAxC,KAAK,SAAAyC,GAAY,IAER/E,EAAS+E,EAAT/E,KAER,GAAIA,EAAM,CACR,IAAMC,EAAcD,EAAKC,aAAe,QACxC,OAAOH,EAjBW,SAACnC,EAAasC,GAAd,MAAuC,CACjEpG,KAAM,QACN8D,MACAsC,eAcwB+E,CAAahF,EAAKrC,IAAKsC,OAG1CgF,MAAM,SAASC,GACdnE,QAAQC,IAAI,CAAEkE,UAEEA,EAAMC,KACHD,EAAMlL,YDmIpBwJ,YH+Ec,iBAAO,CACjC3J,KAAM,uBGlFQwF,CAGb2D,yCEvJIoC,GAA2B,CAChC3F,OAAQ,GACR4F,UAAW,ICEGC,GANEC,aAAgB,CAChC3H,KCNc,WAA6B,IAA5BzB,EAA4ByD,UAAAtC,OAAA,QAAAuC,IAAAD,UAAA,GAAAA,UAAA,GAApB,GAAI4F,EAAgB5F,UAAAtC,OAAA,EAAAsC,UAAA,QAAAC,EAC1C,OAAQ2F,EAAO3L,MACb,IAAK,QACH,MAAO,CACL8D,IAAK6H,EAAO7H,IACZsC,YAAauF,EAAOvF,aAExB,IAAK,SACH,MAAO,GACT,QACE,OAAO9D,IDHZ/B,MDKc,WAAmD,IAAlD+B,EAAkDyD,UAAAtC,OAAA,QAAAuC,IAAAD,UAAA,GAAAA,UAAA,GAA9BwF,GAAcI,EAAgB5F,UAAAtC,OAAA,EAAAsC,UAAA,QAAAC,EACjE,OAAQ2F,EAAO3L,MACd,IAAK,cAEL,IAAK,cACJ,OAAOa,OAAAC,EAAA,EAAAD,CAAA,GACHyB,EADJ,CAECsD,OAAM,GAAAY,OAAA3F,OAAA+K,GAAA,EAAA/K,CAAMyB,EAAMsD,QAAZ,CAAoB+F,EAAO1L,SAGnC,IAAK,kBACJ,OAAOY,OAAAC,EAAA,EAAAD,CAAA,GAAKyB,EAAZ,CAAmBkJ,UAAWG,EAAOpL,QA+BtC,IAAK,eACJ,OAAOM,OAAAC,EAAA,EAAAD,CAAA,GACHyB,EADJ,CAECsD,OAAQtD,EAAMsD,OAAOvB,IAAI,SAAApE,GACxB,OAAIA,EAAKL,OAAS+L,EAAO5E,SACjBlG,OAAAC,EAAA,EAAAD,CAAA,GACHZ,EADJ,CAECF,SAAQ,GAAAyG,OAAA3F,OAAA+K,GAAA,EAAA/K,CAAMZ,EAAKF,UAAX,CAAqB4L,EAAOxL,YAG9BF,MAIX,IAAK,kBACJ,OAAOY,OAAAC,EAAA,EAAAD,CAAA,GACHyB,EADJ,CAECsD,OAAQtD,EAAMsD,OAAOvB,IAAI,SAAApE,GACxB,OAAIA,EAAKN,KAAOgM,EAAOtL,OACfQ,OAAAC,EAAA,EAAAD,CAAA,GACHZ,EADJ,CAECF,SAASc,OAAA+K,GAAA,EAAA/K,CAAK8K,EAAO5L,YAGfE,MAyEX,QACC,OAAOqC,IChJTuJ,SERc,WAA6B,IAA5BvJ,EAA4ByD,UAAAtC,OAAA,QAAAuC,IAAAD,UAAA,GAAAA,UAAA,GAApB,GAAI4F,EAAgB5F,UAAAtC,OAAA,EAAAsC,UAAA,QAAAC,EAC3C,OAAQ2F,EAAO3L,MACd,IAAK,cACJ,MAAO,CACN8L,WAAYH,EAAOG,YAErB,QACC,OAAOxJ,gDCEOyJ,iBAqDPC,iBA6DAC,IAvHJ5M,GAAc,SAASjB,EAAQkB,GAEpC,OAAO,IAAIC,KAAKnB,EAAEoB,WAAa,IAAID,KAAKD,EAAEE,YAGpC,SAAUuM,GAAc1L,GAAxB,IAAAuI,EAAAsD,EAAAjM,EAAAJ,EAAAE,EAAA,OAAAoM,GAAA/N,EAAAgO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAIU,OAHhBrF,QAAQC,IAAI,kBAAmB9G,GAEzBuI,EAAUzJ,EAASoH,WAAW,SAAS5F,IAAIN,GAH3CgM,EAAAE,KAAA,EAIgBC,gBAAKvN,EAAIG,UAAUqN,YAAa7D,GAJhD,YAIAsD,EAJAG,EAAAK,MAOMC,OAPN,CAAAN,EAAAE,KAAA,SAae,OALdtM,EAAOiM,EAAQnL,OACflB,EAAgB,GAChBE,EAAkB,GAVnBsM,EAAAE,KAAA,GAaqBC,gBACzBvN,EAAIG,UAAUwN,cACdhE,EAAQrC,WAAW,WAff,QAuBiB,OAvBjB8F,EAAAK,KAiBOhM,QAAQ,SAACmM,GACpBhN,EAAOe,KAAPC,OAAAC,EAAA,EAAAD,CAAA,CAAclB,GAAIkN,EAAUlN,IAAOkN,EAAU9L,WAE9CmG,QAAQC,IAAI,CAAEtH,WApBTwM,EAAAE,KAAA,GAuBuBC,gBAC3BvN,EAAIG,UAAUwN,cACdhE,EAAQrC,WAAW,aAzBf,QAoCL,OApCK8F,EAAAK,KA2BShM,QAAQ,SAACoM,GACtB/M,EAASa,KAATC,OAAAC,EAAA,EAAAD,CAAA,CACClB,GAAImN,EAAWnN,IACZmN,EAAW/L,WAGhBhB,EAASiB,KAAK3B,IACd6H,QAAQC,IAAI,CAAEpH,aAlCTsM,EAAAE,KAAA,GAoCCQ,eACLtN,EAAW,CACVE,GAAIiJ,EAAQjJ,GACZC,KAAMK,EAAOA,EAAKL,KAAO,QACzBC,SACAE,cAzCG,QA8CL,OA9CKsM,EAAAE,KAAA,GA8CCS,gBAAK/N,EAAIG,UAAU6N,eAAgBrE,EAAQrC,WAAW,YAAa,CACxE2G,qBAAsB,SAACxE,GAAD,OAAmBlI,EAAakI,EAAUrI,MA/C5D,yBAAAgM,EAAAc,SAAAC,IAqDP,SAAUpB,GAAgBL,GAA1B,IAAA5H,EAAAsJ,EAAAC,EAAA/M,EAAAgN,EAAAC,EAAAC,EAAAC,EAAAC,EAAAtN,EAAA,OAAA8L,GAAA/N,EAAAgO,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,OACc,OADdqB,EAAArB,KAAA,EACoBsB,kBAAO,SAAAvL,GAAK,OAAIA,EAAMyB,OAD1C,WACOA,EADP6J,EAAAlB,MAGW5I,IAHX,CAAA8J,EAAArB,KAAA,eAIErF,QAAQC,IAAI,YAJdyG,EAAAE,OAAA,iBAWsD,OAF/CT,EAAelO,EAASoH,WAAW,SAASiC,MATnDoF,EAAArB,KAAA,EAW4Dc,EAX5D,OAsBC,OAXMC,EAXPM,EAAAlB,KAYOnM,EAAoB,GAC1B+M,EAAW5M,QAAQ,SAAAC,GAClB,IAAMV,EAAIY,OAAAC,EAAA,EAAAD,CAAA,CACTlB,GAAIgB,EAAIhB,IACLgB,EAAII,QAGRR,EAAMK,KAAKX,KAnBb2N,EAAArB,KAAA,GAsBOQ,eAAIzM,EAAeC,IAtB1B,QA0BwB,OAHjBgN,EAAchN,EAAMsF,KAAK,SAAA5F,GAAI,MAAkB,YAAdA,EAAKL,OAvB7CgO,EAAArB,KAAA,GA0B8BC,gBAC5BvN,EAAIG,UAAUwN,cADkB,SAAApG,OAEvBzC,EAAKD,IAFkB,WA1BlC,YA0BO0J,EA1BPI,EAAAlB,MA+BqBqB,MA/BrB,CAAAH,EAAArB,KAAA,SAgCQkB,EAAwB,GAC9BD,EAAe9M,QAAQ,SAACsN,GAAD,OACtBP,EAAY7M,KAAKoN,EAAYrO,MAlChC+N,EAAA,EAAAC,EAsCqBF,EAtCrB,aAAAC,EAAAC,EAAAlK,QAAA,CAAAmK,EAAArB,KAAA,SAuCgB,OADLlM,EAtCXsN,EAAAD,GAAAE,EAAArB,KAAA,GAuCsBS,gBAAKjB,GAAe1L,GAvC1C,QAAAuN,EAAAlB,KAAA,QAAAgB,IAAAE,EAAArB,KAAA,qBA2CKgB,GAAgBE,EAAYQ,SAASV,EAAY5N,IA3CtD,CAAAiO,EAAArB,KAAA,SA4CG,OA5CHqB,EAAArB,KAAA,GA4CSQ,eAAI,CACT/M,KAAM,iBACNK,OAAQkN,EAAY5N,GACpBM,KAAMsN,IA/CV,QAAAK,EAAArB,KAAA,qBAmDMgB,EAnDN,CAAAK,EAAArB,KAAA,SAoDG,OApDHqB,EAAArB,KAAA,GAoDSQ,eAAI,CACT/M,KAAM,iBACNK,OAAQkN,EAAY5N,GACpBM,KAAMsN,IAvDV,yBAAAK,EAAAT,SAAAe,IA6DA,SAAUjC,KAAV,OAAAE,GAAA/N,EAAAgO,KAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,OACC,OADD4B,EAAA5B,KAAA,EACO6B,sBAAW,oBAAqBpC,IADvC,wBAAAmC,EAAAhB,SAAAkB,IAIepC,uBCpHLqC,iBAiDAC,IAjDV,SAAUD,GAAS3C,GAAnB,IAAAtL,EAAAX,EAAAoE,EAAAsC,EAAAwC,EAAAsD,EAAAjM,EAAAuO,EAAA,OAAArC,GAAA/N,EAAAgO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAE8B,OADrBlM,EAAWsL,EAAXtL,OADTgM,EAAAE,KAAA,EAEoCsB,kBAAO,SAAAvL,GAAK,OAAIA,EAAMyB,OAF1D,OAKiB,OALjBrE,EAAA2M,EAAAK,KAES5I,EAFTpE,EAESoE,IAAKsC,EAFd1G,EAEc0G,YACPwC,EAAUzJ,EAASwB,IAAT,SAAA6F,OAAsBnG,IAHvCgM,EAAAE,KAAA,EAKuBC,gBAAKvN,EAAIG,UAAUqN,YAAa7D,GALvD,UAKOsD,EALPG,EAAAK,MAMOzM,EANPY,OAAAC,EAAA,EAAAD,CAAA,CAM0BlB,GAAIuM,EAAQvM,IAAOuM,EAAQnL,UAEtCmL,EAAQS,OARvB,CAAAN,EAAAE,KAAA,SASE,OATFF,EAAAE,KAAA,GASQQ,eAAI7M,EAAU,oBATtB,eAAAmM,EAAAyB,OAAA,sBAYE7N,EAAKJ,SACLI,EAAKJ,OAAOgG,KAAK,SAAC2I,GAAD,OAAoBA,EAAO7O,KAAOmE,IAbrD,CAAAuI,EAAAE,KAAA,gBAAAF,EAAAyB,OAAA,kBA8BE,OARMU,EAAS,CACd5O,KAAMwG,EACNzG,GAAImE,EACJ0D,OAAQ,EACRC,SAAU,GA1Bb4E,EAAAE,KAAA,GA8BQC,gBAELvN,EAAIG,UAAUqP,YAFL,SAAAjI,OAGAnG,EAHA,YAAAmG,OAGiBgI,EAAO7O,IACjC6O,GAlCH,QAqCE,OArCFnC,EAAAE,KAAA,GAqCQC,gBAELvN,EAAIG,UAAUqP,YAFL,SAAAjI,OAGAgI,EAAO7O,GAHP,WAAA6G,OAGmBnG,GAC5B,CAAE0G,SAAU9G,EAAKL,OAzCpB,QA6CE,OA7CFyM,EAAAE,KAAA,GA6CQC,gBAAKT,GAAe1L,GA7C5B,yBAAAgM,EAAAc,SAAAuB,IAiDA,SAAUH,KAAV,OAAApC,GAAA/N,EAAAgO,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,OACC,OADDqB,EAAArB,KAAA,EACOoC,qBAAU,iBAAkBL,IADnC,wBAAAV,EAAAT,SAAAyB,IAIeL,uBC5DUM,IAAV,SAAUA,KAAV,OAAA1C,GAAA/N,EAAAgO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACd,OADcF,EAAAE,KAAA,EACRuC,eAAI,CAACC,KAAYR,OADT,wBAAAlC,EAAAc,SAAA6B,ICIf,IAAMC,GAAiBC,qBAGjBC,GAAmBC,OAAOC,sCAAwCC,KCFlEC,GDIS,WACd,IAAMA,EAAQC,aACb/D,GACA0D,GAAiBM,aAAgBC,KAAOT,MAKzC,OAFAA,GAAeU,IAAI1D,IAEZsD,ECZMK,GACRC,GACL1R,EAAAC,EAAAC,cAACyR,EAAA,EAAD,CAAUP,MAAOA,IAChBpR,EAAAC,EAAAC,cAAC0R,EAAA,EAAD,KACC5R,EAAAC,EAAAC,cAACyM,EAAA,EAAD,CAAOC,KAAM,IAAKC,UAAW7B,OAKhC6G,IAASC,OAAOJ,GAAKK,SAASC,eAAe","file":"static/js/main.68c07459.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Spin } from 'antd'\n\nconst LoadingWrapper = styled.div`\n\theight: 100%;\n\tpadding: 24;\n\tdisplay: flex;\n\tflex-direction: column;\n\tbackground: '#fff';\n\tjustify-content: center;\n\talign-items: center;\n`\n\nconst LoadingSpinner = () => (\n\t<LoadingWrapper>\n\t\t<Spin size=\"large\" />\n\t</LoadingWrapper>\n)\n\nexport default LoadingSpinner\n","import firebase from 'firebase'\nimport '@firebase/firestore' // 👈 Don't forget this!\nimport ReduxSagaFirebase from 'redux-saga-firebase'\nconst config = {\n\tapiKey: 'AIzaSyB2tCxT6yP0CWtCbD9JDj3ZKaxxW8T25PI',\n\tauthDomain: 'slacker-c3b01.firebaseapp.com',\n\tdatabaseURL: 'https://slacker-c3b01.firebaseio.com',\n\tprojectId: 'slacker-c3b01',\n\tstorageBucket: 'slacker-c3b01.appspot.com',\n\tmessagingSenderId: '286218247810',\n}\nconst firebaseApp = firebase.initializeApp(config)\nconst rsf = new ReduxSagaFirebase(firebaseApp)\nconst database = firebase.firestore() // const githubAuthProvider = new firebase.auth.GithubAuthProvider();\nexport { firebase, rsf, database as default }\n","import database, { firebase } from '../firebase/firebase'\n// import { history } from \"../routers/AppRouter\";\nimport moment from 'moment'\nimport * as path from 'path'\n// import { ipcRenderer } from 'electron';\n\nconst byCreatedAt = function(a: any, b: any) {\n\t// @ts-ignore\n\treturn new Date(a.createdAt) - new Date(b.createdAt)\n}\n\nexport interface RoomData {\n\tid?: string;\n\tname: string;\n\tpeople: any;\n\tmessages?: any;\n}\n\nexport const createRoom = ({ id, name, people, messages = [] }: RoomData) => ({\n\ttype: 'CREATE_ROOM',\n\troom: {\n\t\tid,\n\t\tname,\n\t\tpeople,\n\t\tmessages,\n\t},\n})\n\nexport const joinedRoom = (joinedRoom: RoomItem) => ({\n\ttype: 'JOINED_ROOM',\n\tjoinedRoom\n})\n\nexport const tryCreateRoom = (roomData: RoomData, showCreateError: any) => {\n\treturn (dispatch: any, getState: () => StoreState) => {\n\t\tconst room = {\n\t\t\tname: roomData.name,\n\t\t}\n\t\t// get all rooms\n\t\treturn database\n\t\t\t.collection('rooms')\n\t\t\t.get()\n\t\t\t.then(snapshot => {\n\t\t\t\tconst rooms: Room[] = []\n\t\t\t\tsnapshot.forEach(doc => {\n\t\t\t\t\tconsole.log(doc)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst room: Room = doc.data()\n\t\t\t\t\trooms.push({\n\t\t\t\t\t\t...room,\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t// if no room with this name\n\t\t\t\tif (!rooms.find(r => r.name === room.name)) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tdatabase\n\t\t\t\t\t\t\t.collection('rooms')\n\t\t\t\t\t\t\t.add(room)\n\t\t\t\t\t\t\t// create this room and\n\t\t\t\t\t\t\t.then(roomRef => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\tdatabase\n\t\t\t\t\t\t\t\t\t\t.collection(`rooms/${roomRef.id}/people`)\n\t\t\t\t\t\t\t\t\t\t.doc(roomData.people.id)\n\t\t\t\t\t\t\t\t\t\t// assign people to it?\n\t\t\t\t\t\t\t\t\t\t.set(roomData.people)\n\t\t\t\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t\t\t\tdatabase\n\t\t\t\t\t\t\t\t\t\t\t\t.collection(`users/${roomData.people.id}/rooms`)\n\t\t\t\t\t\t\t\t\t\t\t\t.doc(roomRef.id)\n\t\t\t\t\t\t\t\t\t\t\t\t.set({ roomName: room.name })\n\n\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\tcreateRoom({\n\t\t\t\t\t\t\t\t\t\t\t\t\tid: roomRef.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t...roomData,\n\t\t\t\t\t\t\t\t\t\t\t\t\tpeople: [roomData.people],\n\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tconst perName = roomData.people.name\n\t\t\t\t\t\t\t\t\t\t\t// dispatch(\n\t\t\t\t\t\t\t\t\t\t\t// \tstartSendMessage(\n\t\t\t\t\t\t\t\t\t\t\t// \t\t`${perName} created this room`,\n\t\t\t\t\t\t\t\t\t\t\t// \t\troom.name,\n\t\t\t\t\t\t\t\t\t\t\t// \t\ttrue,\n\t\t\t\t\t\t\t\t\t\t\t// \t),\n\t\t\t\t\t\t\t\t\t\t\t// ).then(() => {\n\t\t\t\t\t\t\t\t\t\t\t// \tdispatch(startListening(room.name))\n\t\t\t\t\t\t\t\t\t\t\t// \t// history.push(`/room/${room.name}`);\n\t\t\t\t\t\t\t\t\t\t\t// })\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\treturn showCreateError('Room name not available!')\n\t\t\t\t}\n\t\t\t})\n\t}\n}\n\nexport const startListening = (roomId: string) => {\n\treturn (dispatch: any, getState: () => StoreState) => {\n\t\treturn database\n\t\t\t.collection(`rooms/${roomId}/messages`)\n\t\t\t.onSnapshot(messagesQuery => {\n\t\t\t\tif (getState().rooms.joined.find(room => room.id === roomId)) {\n\t\t\t\t\tdatabase\n\t\t\t\t\t\t.collection(`rooms/${roomId}/people`)\n\t\t\t\t\t\t.get()\n\t\t\t\t\t\t.then(personQuery => {\n\t\t\t\t\t\t\tconst messages: any[] = []\n\t\t\t\t\t\t\tmessagesQuery.forEach(doc => {\n\t\t\t\t\t\t\t\tmessages.push({ id: doc.id, ...doc.data() })\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tconsole.log('listener -> ', { messages })\n\t\t\t\t\t\t\tmessages.sort(byCreatedAt)\n\t\t\t\t\t\t\treturn dispatch(updateMessages(messages, roomId))\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// dispatch(\n\t\t\t\t\t\t\t// \tsendMessage(\n\t\t\t\t\t\t\t// \t\t{\n\t\t\t\t\t\t\t// \t\t\t...message,\n\t\t\t\t\t\t\t// \t\t\tid: msgSnapshot ? msgSnapshot.key : 'nullSnap',\n\t\t\t\t\t\t\t// \t\t},\n\t\t\t\t\t\t\t// \t\troomName,\n\t\t\t\t\t\t\t// \t),\n\t\t\t\t\t\t\t// )\n\t\t\t\t\t\t\t// dispatch(orderRoomsStartState())\n\t\t\t\t\t\t\t// if (message.sender.displayName !== getState().auth.displayName) {\n\t\t\t\t\t\t\t// \t// ipcRenderer.send('playNotif', message.sender.displayName, message.text);\n\t\t\t\t\t\t\t// \tconst audio = new Audio('/sounds/notif.mp3')\n\t\t\t\t\t\t\t// \taudio.play()\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t// const keyword =\n\t\t\t\t\t\t\t// \tmessage.status && message.text.split(' ').splice(-1, 1)[0]\n\t\t\t\t\t\t\t// if (keyword === 'left') {\n\t\t\t\t\t\t\t// \tdispatch(onLeft(roomName, message.sender.uid))\n\t\t\t\t\t\t\t// } else if (keyword === 'joined') {\n\t\t\t\t\t\t\t// \tdispatch(\n\t\t\t\t\t\t\t// \t\tonJoined(roomName, personSnapshot.val()[message.sender.uid]),\n\t\t\t\t\t\t\t// \t)\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t// const personID = getState().auth.uid\n\n\t\t\t\t\t\t\t// if (personID === message.sender.uid && keyword !== 'left') {\n\t\t\t\t\t\t\t// \tdatabase\n\t\t\t\t\t\t\t// \t\t.ref(`rooms/${roomName}/people/${personID}`)\n\t\t\t\t\t\t\t// \t\t.update({ unread: 0, lastRead: message.createdAt })\n\t\t\t\t\t\t\t// \t\t.then(() => {\n\t\t\t\t\t\t\t// \t\t\tdispatch(\n\t\t\t\t\t\t\t// \t\t\t\tsetUnread(roomName, personID, message.createdAt, 0),\n\t\t\t\t\t\t\t// \t\t\t)\n\t\t\t\t\t\t\t// \t\t})\n\t\t\t\t\t\t\t// } else if (\n\t\t\t\t\t\t\t// \tpersonID !== message.sender.uid &&\n\t\t\t\t\t\t\t// \tmoment(message.createdAt) >\n\t\t\t\t\t\t\t// \t\tmoment(personSnapshot.val()[personID].lastRead)\n\t\t\t\t\t\t\t// ) {\n\t\t\t\t\t\t\t// \tdatabase\n\t\t\t\t\t\t\t// \t\t.ref(`rooms/${roomName}/people/${personID}`)\n\t\t\t\t\t\t\t// \t\t.update({\n\t\t\t\t\t\t\t// \t\t\tunread: personSnapshot.val()[personID].unread + 1,\n\t\t\t\t\t\t\t// \t\t\tlastRead: message.createdAt,\n\t\t\t\t\t\t\t// \t\t})\n\t\t\t\t\t\t\t// \t\t.then(() => {\n\t\t\t\t\t\t\t// \t\t\tdispatch(\n\t\t\t\t\t\t\t// \t\t\t\tsetUnread(\n\t\t\t\t\t\t\t// \t\t\t\t\troomName,\n\t\t\t\t\t\t\t// \t\t\t\t\tpersonID,\n\t\t\t\t\t\t\t// \t\t\t\t\tmessage.createdAt,\n\t\t\t\t\t\t\t// \t\t\t\t\tpersonSnapshot.val()[personID].unread + 1,\n\t\t\t\t\t\t\t// \t\t\t\t),\n\t\t\t\t\t\t\t// \t\t\t)\n\t\t\t\t\t\t\t// \t\t})\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t}\n}\n\nconst isAlreadyAdded = (data: any, id: string) => {\n\tfor (var key in data) {\n\t\tif (data[key].id === id) return true\n\t}\n\treturn false\n}\n\nexport const showError = (message: string) => ({\n\t\ttype: 'ERROR_MESSAGE',\n\t\tmessage\n})\n\nexport const sendMessage = (message: any, roomName: string) => ({\n\ttype: 'SEND_MESSAGE',\n\tmessage,\n\troomName,\n})\n\nexport const updateMessages = (messages: any, roomId: string) => ({\n\ttype: 'UPDATE_MESSAGES',\n\tmessages,\n\troomId,\n})\n\nexport const trySendMessage = (\n\ttext: string,\n\troomId: string,\n\tstatus: boolean = false,\n) => {\n\treturn (dispatch: any, getState: any) => {\n\t\tconst user = getState().auth\n\t\tif (user) {\n\t\t\tconst uid = user.uid\n\t\t\tconst displayName = user.displayName\n\t\t\tconst message = {\n\t\t\t\tsender: { uid, displayName },\n\t\t\t\ttext,\n\t\t\t\tcreatedAt: moment().format(),\n\t\t\t\tstatus,\n\t\t\t}\n\t\t\treturn database.collection(`rooms/${roomId}/messages`).add(message)\n\t\t}\n\t}\n}\n\nexport const orderRoomsStartState = () => ({\n\ttype: 'ORDER_ROOMS_START_STATE',\n})\n\nexport const availableRooms = (rooms: RoomItem[]) => ({\n\ttype: 'AVAILABLE_ROOMS',\n\trooms\n})\n\nexport const initSlacker = () => ({\n\ttype: 'INIT_SLACKER_SAGA'\n})\n\nexport const clearState = {\n\ttype: 'CLEAR_STATE',\n}\n\nexport const leaveRoom = (roomName: string, userId: string) => ({\n\ttype: 'LEAVE_ROOM',\n\troomName,\n\tuserId,\n})\n\n// export const startLeaveRoom = (roomName: string) => {\n// \treturn (dispatch: any, getState: any) => {\n// \t\tconst user = getState().auth\n// \t\tif (user) {\n// \t\t\tconst userId = user.uid\n// \t\t\tconst displayName = user.displayName\n// \t\t\tdatabase.ref(`rooms/${roomName}/people/${userId}`).remove()\n// \t\t\tdatabase.ref(`users/${userId}/rooms/${roomName}`).remove(() => {\n// \t\t\t\tdispatch(leaveRoom(roomName, userId))\n// \t\t\t\tdispatch(startSendMessage(`${displayName} left`, roomName, true))\n// \t\t\t\t// history.push(\"/join\");\n// \t\t\t})\n// \t\t}\n// \t}\n// }\n\nexport const clearUnread = (\n\troomName: string,\n\tuid: string,\n\ttime: any,\n\tunread: number,\n) => ({\n\ttype: 'CLEAR_UNREAD',\n\troomName,\n\tuid,\n\ttime,\n\tunread,\n})\n\nexport const setUnread = (\n\troomName: string,\n\tuid: string,\n\ttime: any,\n\tunread: number,\n) => {\n\treturn (dispatch: any) => {\n\t\tdispatch(clearUnread(roomName, uid, time, unread))\n\t}\n}\n\n// export const startClearUnread = (roomName: string) => {\n// \treturn (dispatch: any, getState: any) => {\n// \t\t// let time = moment().endOf(\"month\");\n// \t\tconst uid = getState().auth.uid\n// \t\tif (uid) {\n// \t\t\tconst time = moment().format()\n// \t\t\treturn database\n// \t\t\t\t.ref(`rooms/${roomName}/people/${uid}`)\n// \t\t\t\t.update({\n// \t\t\t\t\tunread: 0,\n// \t\t\t\t\tlastRead: time,\n// \t\t\t\t})\n// \t\t\t\t.then(() => {\n// \t\t\t\t\tdispatch(clearUnread(roomName, uid, time, 0))\n// \t\t\t\t})\n// \t\t}\n// \t}\n// }\n\nexport const onLeft = (roomName: string, personID: string) => ({\n\ttype: 'ON_LEFT',\n\troomName,\n\tpersonID,\n})\n\nexport const onJoined = (roomName: string, person: any) => ({\n\ttype: 'ON_JOINED',\n\troomName,\n\tperson,\n})\n\n\nexport const syncMessages = (messagesSnapshot: any, roomId: string) => {\n\tconst messages: any[] = []\n\tmessagesSnapshot.forEach((doc: any) => {\n\t\tmessages.push({ id: doc.id, ...doc.data() })\n\t})\n\n\tmessages.sort(byCreatedAt)\n\treturn updateMessages(messages, roomId)\n}\n","import React, { Fragment, Component } from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Layout, Typography } from 'antd'\n\nimport LoadingSpinner from './LoadingSpinner'\nimport { trySendMessage } from '../actions/rooms'\n\nconst { Header, Content } = Layout\nconst { Title } = Typography\n\nconst ChatWrapper = styled.div`\n\theight: 100%;\n\tpadding: 24;\n\tdisplay: flex;\n\tflex-direction: column;\n\tbackground: '#fff';\n`\n\nconst Messages = styled.div`\n\tflex-grow: 1;\n\toverflow-y: scroll;\n\toverflow-x: hidden;\n`\n\nconst Message = styled.div`\n\tdisplay: flex;\n\tmin-height: 40px;\n\tborder-bottom: 1px solid grey;\n`\n\nconst InputForm = styled.form`\n\theight: 50px;\n\tbackground-color: #fff;\n\tborder-radius: 4px;\n\tdisplay: flex;\n\tflex-direction: row;\n\tflex-shrink: 0;\n\tmargin-top: 10px;\n`\n\nconst Input = styled.input`\n\tpadding-left: 14px;\n\tborder: none;\n\tborder-radius: 4px;\n\tflex-grow: 1;\n`\n\nconst SendButton = styled.button`\n\tflex-shrink: 0;\n`\n\ninterface Props {\n\tauth: Auth;\n\troom: RoomItem | { id: null, name: string, messages: any[] };\n\tisLoading: boolean;\n\tmessages: any[];\n\ttrySendMessage: (text: string, roomId: string, status?: boolean) => void;\n}\n\nclass RoomContainer extends Component<Props> {\n\tstate = {\n\t\tmessageValue: '',\n\t}\n\n\tmessagesEnd: any = null\n\n\tcomponentDidMount() {\n\t\tthis.scrollToBottom()\n\t}\n\n\tcomponentDidUpdate(prevProps: Props) {\n\t\tif (prevProps.messages.length === 0 && this.props.messages.length > 0) {\n\t\t\tthis.scrollToBottom()\n\t\t\treturn\n\t\t}\n\n\t\tif (\n\t\t\tprevProps.messages.length !== this.props.messages.length &&\n\t\t\tprevProps.messages.length > 0 &&\n\t\t\tthis.props.messages.length > 0\n\t\t) {\n\t\t\tconst previousLastMessage = prevProps.messages.slice(-1)[0]\n\t\t\tconst currentLastMessage = this.props.messages.slice(-1)[0]\n\t\t\tif (\n\t\t\t\tpreviousLastMessage.id !== currentLastMessage.id &&\n\t\t\t\t!!currentLastMessage &&\n\t\t\t\tcurrentLastMessage.sender.uid === this.props.auth.uid\n\t\t\t) {\n\t\t\t\t// last message was ours, scroll to the bottom\n\t\t\t\tthis.scrollToBottom()\n\t\t\t}\n\t\t}\n\n\t\t// check last message, if its mine, scroll to bottom?\n\t}\n\n\thandleTyping = (e: any) => {\n\t\tthis.setState({ messageValue: e.target.value })\n\t}\n\n\tscrollToBottom = () => {\n\t\tif (this.messagesEnd) {\n\t\t\tthis.messagesEnd.scrollIntoView({ behavior: 'auto' })\n\t\t}\n\t}\n\n\thandleSend = (e: any) => {\n\t\te.preventDefault()\n\t\tconst { room } = this.props\n\t\tif (!!room.id) {\n\t\t\tconst text = this.state.messageValue\n\t\t\tthis.props.trySendMessage(text, room.id)\n\t\t\tthis.setState({\n\t\t\t\tmessageValue: '',\n\t\t\t})\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { room, messages, isLoading } = this.props\n\t\t// console.log(messages)\n\t\tlet content = (\n\t\t\t<LoadingSpinner />\n\t\t)\n\t\tif (!isLoading) {\n\t\t\tcontent = (\n\t\t\t\t<ChatWrapper>\n\t\t\t\t\t<Messages>\n\t\t\t\t\t\t{messages.map(message => (\n\t\t\t\t\t\t\t<Message key={message.id}>{message.text}</Message>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ float: 'left', clear: 'both' }}\n\t\t\t\t\t\t\tref={el => {\n\t\t\t\t\t\t\t\tthis.messagesEnd = el\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Messages>\n\t\t\t\t\t<InputForm onSubmit={this.handleSend}>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tvalue={this.state.messageValue}\n\t\t\t\t\t\t\tonChange={this.handleTyping}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<SendButton type={'submit'}>Send</SendButton>\n\t\t\t\t\t</InputForm>\n\t\t\t\t</ChatWrapper>\n\t\t\t)\n\t\t}\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<Header\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackground: '#fff',\n\t\t\t\t\t\tpadding: 16,\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\tflexRirection: 'row',\n\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Title style={{ margin: 0 }} level={3}>\n\t\t\t\t\t\t# {room.name}\n\t\t\t\t\t</Title>\n\t\t\t\t</Header>\n\t\t\t\t<Content\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tmargin: '24px 16px',\n\t\t\t\t\t\toverflow: 'initial',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{content}\n\t\t\t\t</Content>\n\t\t\t</Fragment>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: StoreState, ownProps: any) => {\n\tconst { roomId } = ownProps.match.params\n\tconst room = state.rooms.joined.find(room => room.id === roomId)\n\tconst messages = room ? room.messages : []\n\treturn {\n\t\tauth: state.auth,\n\t\troom: room || { id: null, name: '', messages: [] },\n\t\tmessages,\n\t\tisLoading: !room,\n\t}\n}\n\nexport default connect(\n\tmapStateToProps,\n\t{ trySendMessage },\n)(RoomContainer)\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { connect } from 'react-redux'\nimport { Modal, Input, Typography } from 'antd'\nimport { tryCreateRoom, RoomData } from '../actions/rooms'\n\nconst { TextArea } = Input\nconst { Text } = Typography\n\nconst TextWrap = styled.div`\n\tmargin-top: 5px;\n\tmargin-bottom: 5px;\n`\n\ninterface Props {\n\tisOpen: boolean;\n\thandleClose: () => void;\n\ttryCreateRoom: (roomData: RoomData, showCreateError?: any) => Promise<any>;\n\tauth: Auth;\n}\n\ninterface State {\n\troomName: string;\n\tdescription: string;\n}\n\nclass CreateChatDialog extends Component<Props, State> {\n\tstate = {\n\t\troomName: '',\n\t\tdescription: '',\n\t}\n\n\thandleChange = (e: any) => {\n\t\tconsole.log(e.target.name)\n\t\t// @ts-ignore\n\t\tthis.setState({\n\t\t\t[e.target.name]: e.target.value,\n\t\t})\n\t}\n\n\thandleSubmit = () => {\n\t\tconst { uid, displayName: userDisplayName } = this.props.auth\n\t\tif (uid) {\n\t\t\tconsole.log('Create this room pls')\n\t\t\tconst roomName = this.state.roomName\n\t\t\tif (roomName && roomName.length > 0) {\n\t\t\t\t// this.setState({ error: '' })\n\t\t\t\tconst room = {\n\t\t\t\t\tname: roomName,\n\t\t\t\t\tpeople: {\n\t\t\t\t\t\tid: uid,\n\t\t\t\t\t\tname: userDisplayName,\n\t\t\t\t\t\tunread: 0,\n\t\t\t\t\t\tlastRead: 0,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tthis.props.tryCreateRoom(room)\n\t\t\t\tthis.props.handleClose()\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Modal\n\t\t\t\ttitle=\"Create Room\"\n\t\t\t\tvisible={this.props.isOpen}\n\t\t\t\tonOk={this.handleSubmit}\n\t\t\t\tonCancel={this.props.handleClose}\n\t\t\t\tokButtonProps={{ disabled: !this.props.auth.uid }}\n\t\t\t\tcancelButtonProps={{ disabled: !this.props.auth.uid }}\n\t\t\t>\n\t\t\t\t<TextWrap>\n\t\t\t\t\t<Text>Name:</Text>\n\t\t\t\t</TextWrap>\n\t\t\t\t<Input\n\t\t\t\t\tname=\"roomName\"\n\t\t\t\t\tvalue={this.state.roomName}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t\t<TextWrap>\n\t\t\t\t\t<Text>Description:</Text>\n\t\t\t\t</TextWrap>\n\t\t\t\t<TextArea\n\t\t\t\t\tname=\"description\"\n\t\t\t\t\tvalue={this.state.description}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\trows={4}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: any) => ({\n\tauth: state.auth,\n})\n\nexport default connect(\n\tmapStateToProps,\n\t{ tryCreateRoom },\n)(CreateChatDialog)\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { connect } from 'react-redux'\nimport { Layout, Menu, Button, Typography } from 'antd'\nimport RoomContainer from './RoomContainer'\nimport CreateChatDialog from './CreateChatDialog'\nimport LoadingSpinner from './LoadingSpinner'\nimport { tryLogin } from '../actions/auth'\nimport { initSlacker } from '../actions/rooms'\nimport '../styles/index.css'\n\nconst { Sider } = Layout\n// const { Text } = Typography\n\nconst ButtonWrap = styled.div`\n\ttext-align: center;\n\tpadding: 15px;\n`\n\nconst MenuLabel = styled.button`\n\tpadding-left: 10px;\n\tcolor: rgba(255, 255, 255, 0.65);\n\tbackground: none;\n\tborder: none;\n\ttransition: color 1s;\n\tcursor: pointer;\n\t&:hover {\n\t\tcolor: #fff;\n\t}\n`\n\ninterface Props {\n\ttryLogin: () => void\n\tinitSlacker: () => void\n\tauth: Auth\n\trooms: {\n\t\tjoined: RoomItem[]\n\t\tavailable: RoomItem[]\n\t}\n\thistory: any\n\tlocation: {\n\t\tpathname: any\n\t}\n}\n\ninterface State {\n\tisCreateRoomDialogOpen: boolean\n}\n\nclass App extends Component<Props> {\n\tstate = {\n\t\tisCreateRoomDialogOpen: false,\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.tryLogin()\n\t}\n\n\tcomponentWillUpdate(nextProps: Props) {\n\t\tif (!this.props.auth.uid && nextProps.auth.uid) {\n\t\t\tthis.props.initSlacker()\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps: Props) {\n\t\tconst { location, rooms, history } = this.props\n\t\tif (\n\t\t\tlocation.pathname === '/' &&\n\t\t\tprevProps.rooms.joined.length === 0 &&\n\t\t\trooms.joined.length !== 0\n\t\t) {\n\t\t\tconsole.log('redirect to first room?')\n\t\t\thistory.push(`/r/${rooms.joined[0].id}`)\n\t\t}\n\t}\n\n\thandleCloseCreateChatDialog = () => {\n\t\tthis.setState({\n\t\t\tisCreateRoomDialogOpen: false,\n\t\t})\n\t}\n\n\thandleOpenCreateChatDialog = () => {\n\t\tthis.setState({\n\t\t\tisCreateRoomDialogOpen: true,\n\t\t})\n\t}\n\n\thandleRoomSelect = ({ key }: { key: string }) => {\n\t\tthis.props.history.push(key)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Layout style={{ height: '100%' }}>\n\t\t\t\t<Sider\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\toverflow: 'auto',\n\t\t\t\t\t\theight: '100vh',\n\t\t\t\t\t\tposition: 'fixed',\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<ButtonWrap>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ticon=\"plus\"\n\t\t\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\t\t\tonClick={this.handleOpenCreateChatDialog}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCreate room\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</ButtonWrap>\n\t\t\t\t\t<CreateChatDialog\n\t\t\t\t\t\tisOpen={this.state.isCreateRoomDialogOpen}\n\t\t\t\t\t\thandleClose={this.handleCloseCreateChatDialog}\n\t\t\t\t\t/>\n\t\t\t\t\t<MenuLabel>\n\t\t\t\t\t\t<span>Rooms:</span>\n\t\t\t\t\t</MenuLabel>\n\t\t\t\t\t<Menu\n\t\t\t\t\t\ttheme=\"dark\"\n\t\t\t\t\t\tmode=\"inline\"\n\t\t\t\t\t\tonSelect={this.handleRoomSelect}\n\t\t\t\t\t\tdefaultSelectedKeys={[this.props.location.pathname]}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.props.rooms.joined.map(room => (\n\t\t\t\t\t\t\t<Menu.Item key={`/r/${room.id}`}>\n\t\t\t\t\t\t\t\t<span className=\"nav-text\"># {room.name}</span>\n\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Menu>\n\t\t\t\t</Sider>\n\t\t\t\t<Layout style={{ marginLeft: 200 }}>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path={'/r/:roomId'} component={RoomContainer} />\n\t\t\t\t\t\t<Route path={'/'}>\n\t\t\t\t\t\t\t{this.props.rooms.joined.length === 0 ? (\n\t\t\t\t\t\t\t\t<LoadingSpinner />\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<div>No chat selected</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</Layout>\n\t\t\t</Layout>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n\tauth: state.auth,\n\trooms: state.rooms,\n})\n\nexport default connect(\n\tmapStateToProps,\n\t{ tryLogin, initSlacker },\n)(App)\n","import { firebase } from \"../firebase/firebase\";\n\nexport const loginSuccess = (uid: string, displayName: string) => ({\n  type: \"LOGIN\",\n  uid,\n  displayName\n});\n\nexport const tryLogin = () => {\n  return (dispatch: any) => {\n    return firebase\n      .auth()\n      .signInAnonymously()\n      .then(response => {\n        // console.log(response);\n        const { user } = response;\n\n        if (user) {\n          const displayName = user.displayName || \"Ninja\";\n          return dispatch(loginSuccess(user.uid, displayName));\n        }\n      })\n      .catch(function(error) {\n        console.log({ error });\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        // ...\n      });\n  };\n};\n\nexport const logout = () => ({\n  type: \"LOGOUT\"\n});\n\nexport const tryLogout = () => {\n  return () => {\n    return firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        console.log(\"log out!!!\");\n      });\n  };\n};\n","import moment from 'moment'\n\ninterface RoomsState {\n\tjoined: Room[];\n\tavailable: Room[];\n}\n\nconst defaultState: RoomsState = {\n\tjoined: [],\n\tavailable: [],\n}\n\nexport default (state: RoomsState = defaultState, action: any) => {\n\tswitch (action.type) {\n\t\tcase 'CREATE_ROOM':\n\t\t\treturn { ...state, joined: [...state.joined, action.room] }\n\t\tcase 'JOINED_ROOM':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tjoined: [...state.joined, action.room],\n\t\t\t}\n\n\t\tcase 'AVAILABLE_ROOMS':\n\t\t\treturn { ...state, available: action.rooms }\n\n\t\t// case 'ON_LEFT':\n\t\t// \t// console.log('onleft');\n\n\t\t// \treturn state.map(room => {\n\t\t// \t\t// console.log(room);\n\t\t// \t\tif (room.name === action.roomName) {\n\t\t// \t\t\tconst p = room.people.filter((person: Person) => {\n\t\t// \t\t\t\treturn person.id !== action.personID\n\t\t// \t\t\t})\n\t\t// \t\t\t// console.log(p);\n\t\t// \t\t\treturn {\n\t\t// \t\t\t\t...room,\n\t\t// \t\t\t\tpeople: p,\n\t\t// \t\t\t}\n\t\t// \t\t} else {\n\t\t// \t\t\treturn room\n\t\t// \t\t}\n\t\t// \t})\n\n\t\t// case 'ON_JOINED':\n\t\t// \treturn state.map(room => {\n\t\t// \t\tif (room.name === action.roomName) {\n\t\t// \t\t\troom.people.push(action.person)\n\t\t// \t\t\treturn room\n\t\t// \t\t} else {\n\t\t// \t\t\treturn room\n\t\t// \t\t}\n\t\t// \t})\n\n\t\tcase 'SEND_MESSAGE':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tjoined: state.joined.map(room => {\n\t\t\t\t\tif (room.name === action.roomName) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...room,\n\t\t\t\t\t\t\tmessages: [...room.messages, action.message],\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn room\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t}\n\t\tcase 'UPDATE_MESSAGES':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tjoined: state.joined.map(room => {\n\t\t\t\t\tif (room.id === action.roomId) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...room,\n\t\t\t\t\t\t\tmessages: [...action.messages],\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn room\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t}\n\t\t// case 'REORDER_ROOMS':\n\t\t//   let room;\n\t\t//   let rooms = state.filter((r) => {\n\t\t//     if(r.name === action.roomName) {\n\t\t//       room = r;\n\t\t//       return false;\n\t\t//     }\n\t\t//     else {\n\t\t//       return true;\n\t\t//     }\n\t\t//   });\n\t\t//   rooms.unshift(room);\n\t\t//   return rooms;\n\t\t// case 'ORDER_ROOMS_START_STATE':\n\t\t// \t//  const x =  action.rooms.sort((a, b) => {\n\t\t// \t//   //  console.log('a', a);\n\t\t// \t//   //  console.log('b', b);\n\t\t// \t//   if(a.messages.length > 0 && b.messages.length > 0) {\n\t\t// \t//     console.log(typeof a.messages);\n\n\t\t// \t//     return moment(a.messages[a.messages.length-1].createdAt) > moment(b.messages[b.messages.length-1].createdAt)\n\t\t// \t//     // {\n\t\t// \t//   //     return -1;\n\t\t// \t//   //   } else {\n\t\t// \t//   //     return 1;\n\t\t// \t//   //   }\n\t\t// \t//   // }\n\t\t// \t//   // else {\n\t\t// \t//   //   return -1;\n\t\t// \t//   }\n\t\t// \t// });\n\t\t// \t// console.log(typeof x)\n\t\t// \t// console.log(x);\n\t\t// \t// return x;\n\t\t// \tstate.sort((a: any, b: any) => {\n\t\t// \t\treturn moment(a.messages[a.messages.length - 1].createdAt) <\n\t\t// \t\t\tmoment(b.messages[b.messages.length - 1].createdAt)\n\t\t// \t\t\t? 1\n\t\t// \t\t\t: -1\n\t\t// \t})\n\t\t// \t// console.log(state);\n\t\t// \treturn state.map(room => room)\n\n\t\t// case 'CLEAR_UNREAD':\n\t\t// \treturn state.map(room => {\n\t\t// \t\tif (room.name === action.roomName) {\n\t\t// \t\t\tconst people = room.people.map((person: Person) => {\n\t\t// \t\t\t\tif (person.id === action.uid) {\n\t\t// \t\t\t\t\treturn {\n\t\t// \t\t\t\t\t\t...person,\n\t\t// \t\t\t\t\t\tunread: action.unread,\n\t\t// \t\t\t\t\t\tlastRead: action.time,\n\t\t// \t\t\t\t\t}\n\t\t// \t\t\t\t} else {\n\t\t// \t\t\t\t\treturn person\n\t\t// \t\t\t\t}\n\t\t// \t\t\t})\n\t\t// \t\t\treturn { ...room, people }\n\t\t// \t\t} else {\n\t\t// \t\t\treturn room\n\t\t// \t\t}\n\t\t// \t})\n\n\t\t// case 'LEAVE_ROOM':\n\t\t// \treturn state.filter(room => {\n\t\t// \t\treturn room.name !== action.roomName\n\t\t// \t})\n\t\t// case 'CLEAR_STATE':\n\t\t// \treturn []\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","import authReducer from '../reducers/auth'\nimport roomsReducer from '../reducers/rooms'\nimport redirectReducer from '../reducers/redirect'\nimport { combineReducers } from 'redux'\n\nconst reducers = combineReducers({\n\tauth: authReducer,\n\trooms: roomsReducer,\n\tredirect: redirectReducer,\n})\n\nexport default reducers\n","export default (state = {}, action: any) => {\n  switch (action.type) {\n    case \"LOGIN\":\n      return {\n        uid: action.uid,\n        displayName: action.displayName\n      };\n    case \"LOGOUT\":\n      return {};\n    default:\n      return state;\n  }\n};\n","export default (state = {}, action: any) => {\n\tswitch (action.type) {\n\t\tcase 'REDIRECT_TO':\n\t\t\treturn {\n\t\t\t\tredirectTo: action.redirectTo,\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","import { put, select, takeLatest, fork, call } from 'redux-saga/effects'\nimport database, { firebase, rsf } from '../firebase/firebase'\nimport { availableRooms, createRoom, syncMessages } from '../actions/rooms'\n\nconst byCreatedAt = function(a: any, b: any) {\n\t// @ts-ignore\n\treturn new Date(a.createdAt) - new Date(b.createdAt)\n}\n\nexport function* fetchRoomSaga(roomId: string) {\n\tconsole.log('try fetch room ', roomId)\n\t// fetch joined room from firestore\n\tconst roomRef = database.collection('rooms').doc(roomId)\n\tconst roomDoc = yield call(rsf.firestore.getDocument, roomRef)\n\n\t// if we have such room\n\tif (roomDoc.exists) {\n\t\tconst room = roomDoc.data()\n\t\tconst people: any[] = []\n\t\tconst messages: any[] = []\n\n\t\t// get room's people\n\t\tconst peopleQuery = yield call(\n\t\t\trsf.firestore.getCollection,\n\t\t\troomRef.collection('people'),\n\t\t)\n\t\tpeopleQuery.forEach((peopleDoc: any) => {\n\t\t\tpeople.push({ id: peopleDoc.id, ...peopleDoc.data() })\n\t\t})\n\t\tconsole.log({ people })\n\n\t\t// get room's people\n\t\tconst messagesQuery = yield call(\n\t\t\trsf.firestore.getCollection,\n\t\t\troomRef.collection('messages'),\n\t\t)\n\t\tmessagesQuery.forEach((messageDoc: any) => {\n\t\t\tmessages.push({\n\t\t\t\tid: messageDoc.id,\n\t\t\t\t...messageDoc.data(),\n\t\t\t})\n\t\t})\n\t\tmessages.sort(byCreatedAt)\n\t\tconsole.log({ messages })\n\n\t\tyield put(\n\t\t\tcreateRoom({\n\t\t\t\tid: roomRef.id,\n\t\t\t\tname: room ? room.name : 'Error',\n\t\t\t\tpeople,\n\t\t\t\tmessages,\n\t\t\t}),\n\t\t)\n\n\t\t// subscribe to messages\n\t\tyield fork(rsf.firestore.syncCollection, roomRef.collection('messages'), {\n\t\t\tsuccessActionCreator: (snapshot: any) => syncMessages(snapshot, roomId),\n\t\t})\n\t}\n}\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* initSlackerSaga(action: any) {\n\tconst auth = yield select(state => state.auth)\n\n\tif (!auth.uid) {\n\t\tconsole.log('no auth!')\n\t\treturn\n\t}\n\n\t// fetch all rooms\n\tconst roomsPromise = database.collection('rooms').get()\n\n\tconst roomsQuery: firebase.firestore.QuerySnapshot = yield roomsPromise\n\tconst rooms: RoomItem[] = []\n\troomsQuery.forEach(doc => {\n\t\tconst room = {\n\t\t\tid: doc.id,\n\t\t\t...doc.data(),\n\t\t}\n\t\t// @ts-ignore\n\t\trooms.push(room)\n\t})\n\n\tyield put(availableRooms(rooms))\n\tconst generalRoom = rooms.find(room => room.name === 'general')\n\n\t// get user rooms\n\tconst userRoomsQuery = yield call(\n\t\trsf.firestore.getCollection,\n\t\t`users/${auth.uid}/rooms`,\n\t)\n\n\tif (!userRoomsQuery.empty) {\n\t\tconst userRoomIds: string[] = []\n\t\tuserRoomsQuery.forEach((userRoomDoc: any) =>\n\t\t\tuserRoomIds.push(userRoomDoc.id),\n\t\t)\n\n\t\t// fetch each joined room\n\t\tfor (let roomId of userRoomIds) {\n\t\t\tconst task = yield fork(fetchRoomSaga, roomId)\n\t\t}\n\n\t\t// if no general room, join that as well\n\t\tif(generalRoom && !userRoomIds.includes(generalRoom.id)) {\n\t\t\tyield put({\n\t\t\t\ttype: 'JOIN_ROOM_SAGA',\n\t\t\t\troomId: generalRoom.id,\n\t\t\t\troom: generalRoom,\n\t\t\t})\n\t\t}\n\t} else {\n\t\tif (generalRoom) {\n\t\t\tyield put({\n\t\t\t\ttype: 'JOIN_ROOM_SAGA',\n\t\t\t\troomId: generalRoom.id,\n\t\t\t\troom: generalRoom,\n\t\t\t})\n\t\t}\n\t}\n}\n\nfunction* mySaga() {\n\tyield takeLatest('INIT_SLACKER_SAGA', initSlackerSaga)\n}\n\nexport default mySaga\n","import { put, select, takeEvery, fork, call } from 'redux-saga/effects'\nimport { AnyAction } from 'redux'\nimport database, { firebase, rsf } from '../firebase/firebase'\nimport { joinedRoom, showError, syncMessages } from '../actions/rooms'\nimport { fetchRoomSaga } from './initSaga'\n\nconst byCreatedAt = function(a: any, b: any) {\n\t// @ts-ignore\n\treturn new Date(a.createdAt) - new Date(b.createdAt)\n}\n\nfunction* joinRoom(action: AnyAction) {\n\tconst { roomId } = action\n\tconst { uid, displayName } = yield select(state => state.auth)\n\tconst roomRef = database.doc(`rooms/${roomId}`)\n\n\tconst roomDoc = yield call(rsf.firestore.getDocument, roomRef)\n\tconst room = <RoomItem>{ id: roomDoc.id, ...roomDoc.data() }\n\n\tif (!room || !roomDoc.exists) {\n\t\tyield put(showError('Room not found!'))\n\t\treturn\n\t} else if (\n\t\troom.people &&\n\t\troom.people.find((person: Person) => person.id === uid)\n\t) {\n\t\t// if we are already in this room then\n\t\t// history.push(`room/${data.roomName}`);\n\t\t// return i guess ?\n\t\treturn\n\t} else {\n\t\t// we should add ourselves to this room\n\n\t\tconst person = {\n\t\t\tname: displayName,\n\t\t\tid: uid,\n\t\t\tunread: 0,\n\t\t\tlastRead: 0,\n\t\t}\n\n\t\t// TODO figure wtf is wrong here\n\t\tyield call(\n\t\t\t// @ts-ignore\n\t\t\trsf.firestore.setDocument,\n\t\t\t`rooms/${roomId}/people/${person.id}`,\n\t\t\tperson,\n\t\t)\n\n\t\tyield call(\n\t\t\t// @ts-ignore\n\t\t\trsf.firestore.setDocument,\n\t\t\t`users/${person.id}/rooms/${roomId}`,\n\t\t\t{ roomName: room.name },\n\t\t)\n\n\t\t// fetch full room and subscribe\n\t\tyield call(fetchRoomSaga, roomId)\n\t}\n}\n\nfunction* joinRoomSaga() {\n\tyield takeEvery('JOIN_ROOM_SAGA', joinRoom)\n}\n\nexport default joinRoomSaga\n","import { all } from 'redux-saga/effects'\nimport initSaga from './initSaga'\nimport joinRoomSaga from './joinRoomSaga'\n\nexport default function* rootSaga() {\n\tyield all([initSaga(), joinRoomSaga()])\n}\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport createSagaMiddleware from 'redux-saga'\nimport reducers from '../reducers'\n\nimport mySaga from '../sagas/rootSaga'\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware()\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nexport default () => {\n\tconst store = createStore(\n\t\treducers,\n\t\tcomposeEnhancers(applyMiddleware(thunk, sagaMiddleware)),\n\t)\n\n\tsagaMiddleware.run(mySaga)\n\n\treturn store\n}\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { HashRouter as Router, Route } from 'react-router-dom'\nimport ReactDOM from 'react-dom'\nimport 'antd/dist/antd.css'\n\nimport App from './components/App'\nimport configureStore from './store/configureStore'\n\nconst store = configureStore()\nconst jsx = (\n\t<Provider store={store}>\n\t\t<Router>\n\t\t\t<Route path={'/'} component={App} />\n\t\t</Router>\n\t</Provider>\n)\n\nReactDOM.render(jsx, document.getElementById('container'))\n"],"sourceRoot":""}