{"version":3,"sources":["components/LoadingSpinner.tsx","components/Message.tsx","firebase/firebase.ts","actions/rooms.ts","components/ChatInput.tsx","components/RoomContainer.tsx","components/CreateChatDialog.tsx","components/BrowseRoomsDialog.tsx","components/App.tsx","actions/auth.ts","reducers/rooms.ts","reducers/index.ts","reducers/auth.ts","reducers/redirect.ts","sagas/initSaga.ts","sagas/joinRoomSaga.ts","sagas/rootSaga.ts","store/configureStore.ts","index.tsx"],"names":["LoadingWrapper","styled","div","_templateObject","LoadingSpinner","react_default","a","createElement","spin","size","MessageLayout","Message_templateObject","LeftPanel","_templateObject2","RightPanel","_templateObject3","MessageHeader","_templateObject4","Message","_ref","children","name","isConsecutive","avatar","shape","icon","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","rsf","ReduxSagaFirebase","database","firestore","byCreatedAt","b","Date","createdAt","getTime","createRoom","id","people","_ref$messages","messages","type","room","tryCreateRoom","roomData","showCreateError","dispatch","getState","collection","get","then","snapshot","rooms","forEach","doc","console","log","data","push","Object","objectSpread","find","r","add","roomRef","concat","set","roomName","showError","message","trySendMessage","text","roomId","status","arguments","length","undefined","user","auth","sender","uid","displayName","moment","format","availableRooms","syncMessages","messagesSnapshot","sort","updateMessages","InputForm","form","ChatInput_templateObject","Input","input","ChatInput_templateObject2","SendButton","button","ChatInput_templateObject3","ChatInput","state","value","handleTyping","e","_this","setState","target","handleSend","preventDefault","props","onSubmit","this","onChange","Component","connect","Header","Layout","Content","Title","Typography","ChatWrapper","RoomContainer_templateObject","Messages","RoomContainer_templateObject2","RoomContainer","messagesEnd","messagesContainer","scrollToBottom","scrollIntoView","behavior","match","params","prevProps","previousLastMessage","slice","currentLastMessage","_this$messagesContain","scrollHeight","scrollTop","clientHeight","offsetHeight","Math","abs","_this2","_this$props","isLoading","content","components_LoadingSpinner","ref","el","map","idx","components_Message","key","style","float","clear","components_ChatInput","react","background","borderBottom","padding","display","flexDirection","alignItems","margin","level","overflow","ownProps","joined","TextArea","Text","TextWrap","CreateChatDialog_templateObject","CreateChatDialog","description","handleChange","defineProperty","handleSubmit","_this$props$auth","userDisplayName","unread","lastRead","handleClose","modal","title","visible","isOpen","onOk","onCancel","okButtonProps","disabled","cancelButtonProps","rows","Label","BrowseRoomsDialog_templateObject","BrowseRoomsDialog","handleJoinRoom","canJoin","bodyStyle","maxHeight","overflowY","list","dataSource","roomList","renderItem","item","Item","Meta","avatarUrl","src","onClick","es_button","_state$rooms","available","Sider","LogoWrap","App_templateObject","Logo","img","App_templateObject2","RoomButtons","App_templateObject3","MenuButton","App_templateObject4","App","openDialog","handleCloseDialog","handleOpenDialog","dialogName","handleRoomSelect","history","tryLogin","nextProps","initSlacker","location","pathname","layout","height","position","left","components_CreateChatDialog","components_BrowseRoomsDialog","menu","theme","mode","onSelect","selectedKeys","className","marginLeft","react_router","path","component","signInAnonymously","response","loginSuccess","catch","error","code","defaultState","reducers","combineReducers","action","toConsumableArray","redirect","redirectTo","fetchRoomSaga","initSlackerSaga","mySaga","roomDoc","regenerator_default","wrap","_context","prev","next","call","getDocument","sent","exists","getCollection","peopleDoc","messageDoc","put","fork","syncCollection","successActionCreator","stop","_marked","roomsPromise","roomsQuery","generalRoom","userRoomsQuery","userRoomIds","_i","_userRoomIds","_context2","select","abrupt","empty","userRoomDoc","includes","_marked2","_context3","takeLatest","_marked3","joinRoom","joinRoomSaga","person","setDocument","joinRoomSaga_marked","takeEvery","joinRoomSaga_marked2","rootSaga","all","initSaga","rootSaga_marked","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","run","configureStore","jsx","es","react_router_dom","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.91ef20cb.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Spin } from 'antd'\r\n\r\nconst LoadingWrapper = styled.div`\r\n\theight: 100%;\r\n\tpadding: 24;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tbackground: '#fff';\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n`\r\n\r\nconst LoadingSpinner = () => (\r\n\t<LoadingWrapper>\r\n\t\t<Spin size=\"large\" />\r\n\t</LoadingWrapper>\r\n)\r\n\r\nexport default LoadingSpinner\r\n","import React, { FunctionComponent } from 'react'\r\nimport { Avatar } from 'antd'\r\nimport styled from 'styled-components'\r\n\r\nconst MessageLayout = styled.div`\r\n\tdisplay: flex;\r\n\tflex-direction: row;\r\n\tmargin-bottom: 2px;\r\n`\r\n\r\nconst LeftPanel = styled.div`\r\n\twidth: 46px;\r\n\tpadding: 5px;\r\n`\r\n\r\n// const Avatar = styled.div`\r\n// \t/* width: 35px;\r\n// \theight: 35px;\r\n// \tmargin: 5px;\r\n// \tborder-radius: 2px;\r\n// \tbackground-color: #cecece;\r\n// ` */\r\n\r\nconst RightPanel = styled.div`\r\n\tcolor: black;\r\n`\r\n\r\nconst MessageHeader = styled.div`\r\n\tcolor: black;\r\n\tfont-weight: bold;\r\n\tmargin-top: 2px;\r\n`\r\n\r\ninterface Props {\r\n\tname: string\r\n\tisConsecutive?: boolean\r\n}\r\n\r\nconst Message: FunctionComponent<Props> = ({\r\n\tchildren,\r\n\tname,\r\n\tisConsecutive,\r\n}) => {\r\n\tif (isConsecutive) {\r\n\t\treturn (\r\n\t\t\t<MessageLayout>\r\n\t\t\t\t<LeftPanel />\r\n\t\t\t\t<RightPanel>{children}</RightPanel>\r\n\t\t\t</MessageLayout>\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<MessageLayout>\r\n\t\t\t<LeftPanel>\r\n\t\t\t\t<Avatar size={35} shape=\"square\" icon=\"user\" />\r\n\t\t\t</LeftPanel>\r\n\t\t\t<RightPanel>\r\n\t\t\t\t<MessageHeader>{name}</MessageHeader>\r\n\t\t\t\t{children}\r\n\t\t\t</RightPanel>\r\n\t\t</MessageLayout>\r\n\t)\r\n}\r\n\r\nexport default Message\r\n","import firebase from 'firebase'\r\nimport '@firebase/firestore' // 👈 Don't forget this!\r\nimport ReduxSagaFirebase from 'redux-saga-firebase'\r\nconst config = {\r\n\tapiKey: 'AIzaSyB2tCxT6yP0CWtCbD9JDj3ZKaxxW8T25PI',\r\n\tauthDomain: 'slacker-c3b01.firebaseapp.com',\r\n\tdatabaseURL: 'https://slacker-c3b01.firebaseio.com',\r\n\tprojectId: 'slacker-c3b01',\r\n\tstorageBucket: 'slacker-c3b01.appspot.com',\r\n\tmessagingSenderId: '286218247810',\r\n}\r\nconst firebaseApp = firebase.initializeApp(config)\r\nconst rsf = new ReduxSagaFirebase(firebaseApp)\r\nconst database = firebase.firestore() // const githubAuthProvider = new firebase.auth.GithubAuthProvider();\r\nexport { firebase, rsf, database as default }\r\n","import database, { firebase } from '../firebase/firebase'\r\nimport moment from 'moment'\r\nimport * as path from 'path'\r\n// import { ipcRenderer } from 'electron';\r\n\r\nconst byCreatedAt = function(a: any, b: any) {\r\n\treturn new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\r\n}\r\n\r\nexport interface RoomData {\r\n\tid?: string\r\n\tname: string\r\n\tpeople: any\r\n\tmessages?: any\r\n}\r\n\r\nexport const createRoom = ({ id, name, people, messages = [] }: RoomData) => ({\r\n\ttype: 'CREATE_ROOM',\r\n\troom: {\r\n\t\tid,\r\n\t\tname,\r\n\t\tpeople,\r\n\t\tmessages,\r\n\t},\r\n})\r\n\r\nexport const joinedRoom = (joinedRoom: RoomItem) => ({\r\n\ttype: 'JOINED_ROOM',\r\n\tjoinedRoom,\r\n})\r\n\r\nexport const tryCreateRoom = (roomData: RoomData, showCreateError: any) => {\r\n\treturn (dispatch: any, getState: () => StoreState) => {\r\n\t\tconst room = {\r\n\t\t\tname: roomData.name,\r\n\t\t}\r\n\t\t// get all rooms\r\n\t\treturn database\r\n\t\t\t.collection('rooms')\r\n\t\t\t.get()\r\n\t\t\t.then(snapshot => {\r\n\t\t\t\tconst rooms: Room[] = []\r\n\t\t\t\tsnapshot.forEach(doc => {\r\n\t\t\t\t\tconsole.log(doc)\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\tconst room: Room = doc.data()\r\n\t\t\t\t\trooms.push({\r\n\t\t\t\t\t\t...room,\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t\t// if no room with this name\r\n\t\t\t\tif (!rooms.find(r => r.name === room.name)) {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\tdatabase\r\n\t\t\t\t\t\t\t.collection('rooms')\r\n\t\t\t\t\t\t\t.add(room)\r\n\t\t\t\t\t\t\t// create this room and\r\n\t\t\t\t\t\t\t.then(roomRef => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\tdatabase\r\n\t\t\t\t\t\t\t\t\t\t.collection(`rooms/${roomRef.id}/people`)\r\n\t\t\t\t\t\t\t\t\t\t.doc(roomData.people.id)\r\n\t\t\t\t\t\t\t\t\t\t// assign people to it?\r\n\t\t\t\t\t\t\t\t\t\t.set(roomData.people)\r\n\t\t\t\t\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\t\t\t\t\tdatabase\r\n\t\t\t\t\t\t\t\t\t\t\t\t.collection(`users/${roomData.people.id}/rooms`)\r\n\t\t\t\t\t\t\t\t\t\t\t\t.doc(roomRef.id)\r\n\t\t\t\t\t\t\t\t\t\t\t\t.set({ roomName: room.name })\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tdispatch(\r\n\t\t\t\t\t\t\t\t\t\t\t\tcreateRoom({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tid: roomRef.id,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t...roomData,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tpeople: [roomData.people],\r\n\t\t\t\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\tconst perName = roomData.people.name\r\n\t\t\t\t\t\t\t\t\t\t\t// dispatch(\r\n\t\t\t\t\t\t\t\t\t\t\t// \tstartSendMessage(\r\n\t\t\t\t\t\t\t\t\t\t\t// \t\t`${perName} created this room`,\r\n\t\t\t\t\t\t\t\t\t\t\t// \t\troom.name,\r\n\t\t\t\t\t\t\t\t\t\t\t// \t\ttrue,\r\n\t\t\t\t\t\t\t\t\t\t\t// \t),\r\n\t\t\t\t\t\t\t\t\t\t\t// ).then(() => {\r\n\t\t\t\t\t\t\t\t\t\t\t// \tdispatch(startListening(room.name))\r\n\t\t\t\t\t\t\t\t\t\t\t// \t// history.push(`/room/${room.name}`);\r\n\t\t\t\t\t\t\t\t\t\t\t// })\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t)\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn showCreateError('Room name not available!')\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t}\r\n}\r\n\r\nconst isAlreadyAdded = (data: any, id: string) => {\r\n\tfor (var key in data) {\r\n\t\tif (data[key].id === id) return true\r\n\t}\r\n\treturn false\r\n}\r\n\r\nexport const showError = (message: string) => ({\r\n\ttype: 'ERROR_MESSAGE',\r\n\tmessage,\r\n})\r\n\r\nexport const sendMessage = (message: any, roomName: string) => ({\r\n\ttype: 'SEND_MESSAGE',\r\n\tmessage,\r\n\troomName,\r\n})\r\n\r\nexport const updateMessages = (messages: any, roomId: string) => ({\r\n\ttype: 'UPDATE_MESSAGES',\r\n\tmessages,\r\n\troomId,\r\n})\r\n\r\nexport const trySendMessage = (\r\n\ttext: string,\r\n\troomId: string,\r\n\tstatus: boolean = false,\r\n) => {\r\n\treturn (dispatch: any, getState: any) => {\r\n\t\tconst user = getState().auth\r\n\t\tif (user) {\r\n\t\t\tconst uid = user.uid\r\n\t\t\tconst displayName = user.displayName\r\n\t\t\tconst message = {\r\n\t\t\t\tsender: { uid, displayName },\r\n\t\t\t\ttext,\r\n\t\t\t\tcreatedAt: moment().format(),\r\n\t\t\t\tstatus,\r\n\t\t\t}\r\n\t\t\treturn database.collection(`rooms/${roomId}/messages`).add(message)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const orderRoomsStartState = () => ({\r\n\ttype: 'ORDER_ROOMS_START_STATE',\r\n})\r\n\r\nexport const availableRooms = (rooms: RoomItem[]) => ({\r\n\ttype: 'AVAILABLE_ROOMS',\r\n\trooms,\r\n})\r\n\r\nexport const initSlacker = () => ({\r\n\ttype: 'INIT_SLACKER_SAGA',\r\n})\r\n\r\nexport const clearState = {\r\n\ttype: 'CLEAR_STATE',\r\n}\r\n\r\nexport const leaveRoom = (roomName: string, userId: string) => ({\r\n\ttype: 'LEAVE_ROOM',\r\n\troomName,\r\n\tuserId,\r\n})\r\n\r\n// export const startLeaveRoom = (roomName: string) => {\r\n// \treturn (dispatch: any, getState: any) => {\r\n// \t\tconst user = getState().auth\r\n// \t\tif (user) {\r\n// \t\t\tconst userId = user.uid\r\n// \t\t\tconst displayName = user.displayName\r\n// \t\t\tdatabase.ref(`rooms/${roomName}/people/${userId}`).remove()\r\n// \t\t\tdatabase.ref(`users/${userId}/rooms/${roomName}`).remove(() => {\r\n// \t\t\t\tdispatch(leaveRoom(roomName, userId))\r\n// \t\t\t\tdispatch(startSendMessage(`${displayName} left`, roomName, true))\r\n// \t\t\t\t// history.push(\"/join\");\r\n// \t\t\t})\r\n// \t\t}\r\n// \t}\r\n// }\r\n\r\nexport const clearUnread = (\r\n\troomName: string,\r\n\tuid: string,\r\n\ttime: any,\r\n\tunread: number,\r\n) => ({\r\n\ttype: 'CLEAR_UNREAD',\r\n\troomName,\r\n\tuid,\r\n\ttime,\r\n\tunread,\r\n})\r\n\r\nexport const setUnread = (\r\n\troomName: string,\r\n\tuid: string,\r\n\ttime: any,\r\n\tunread: number,\r\n) => {\r\n\treturn (dispatch: any) => {\r\n\t\tdispatch(clearUnread(roomName, uid, time, unread))\r\n\t}\r\n}\r\n\r\n// export const startClearUnread = (roomName: string) => {\r\n// \treturn (dispatch: any, getState: any) => {\r\n// \t\t// let time = moment().endOf(\"month\");\r\n// \t\tconst uid = getState().auth.uid\r\n// \t\tif (uid) {\r\n// \t\t\tconst time = moment().format()\r\n// \t\t\treturn database\r\n// \t\t\t\t.ref(`rooms/${roomName}/people/${uid}`)\r\n// \t\t\t\t.update({\r\n// \t\t\t\t\tunread: 0,\r\n// \t\t\t\t\tlastRead: time,\r\n// \t\t\t\t})\r\n// \t\t\t\t.then(() => {\r\n// \t\t\t\t\tdispatch(clearUnread(roomName, uid, time, 0))\r\n// \t\t\t\t})\r\n// \t\t}\r\n// \t}\r\n// }\r\n\r\nexport const onLeft = (roomName: string, personID: string) => ({\r\n\ttype: 'ON_LEFT',\r\n\troomName,\r\n\tpersonID,\r\n})\r\n\r\nexport const onJoined = (roomName: string, person: any) => ({\r\n\ttype: 'ON_JOINED',\r\n\troomName,\r\n\tperson,\r\n})\r\n\r\nexport const syncMessages = (messagesSnapshot: any, roomId: string) => {\r\n\tconst messages: any[] = []\r\n\tmessagesSnapshot.forEach((doc: any) => {\r\n\t\tmessages.push({ id: doc.id, ...doc.data() })\r\n\t})\r\n\r\n\tmessages.sort(byCreatedAt)\r\n\treturn updateMessages(messages, roomId)\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport styled from 'styled-components'\r\n\r\nimport { trySendMessage } from '../actions/rooms'\r\n\r\nconst InputForm = styled.form`\r\n\theight: 44px;\r\n\tbackground-color: #fff;\r\n\tborder-radius: 4px;\r\n\tborder: 1px solid #acacac;\r\n\tdisplay: flex;\r\n\tflex-direction: row;\r\n\tflex-shrink: 0;\r\n`\r\n\r\nconst Input = styled.input`\r\n\tpadding-left: 14px;\r\n\tborder: none;\r\n\tborder-radius: 4px;\r\n\tflex-grow: 1;\r\n\toutline: none;\r\n`\r\n\r\nconst SendButton = styled.button`\r\n\tflex-shrink: 0;\r\n\tpadding: 0px 15px;\r\n\tbackground: none;\r\n\tborder: none;\r\n`\r\n\r\ninterface Props {\r\n\troom: RoomItem | undefined\r\n\ttrySendMessage: (text: string, roomId: string) => void\r\n}\r\n\r\ninterface State {\r\n\tvalue: string\r\n}\r\n\r\nclass ChatInput extends Component<Props, State> {\r\n\tstate = {\r\n\t\tvalue: '',\r\n\t}\r\n\r\n\thandleTyping = (e: any) => {\r\n\t\tthis.setState({ value: e.target.value })\r\n\t}\r\n\r\n\thandleSend = (e: any) => {\r\n\t\te.preventDefault()\r\n\t\tconst { room } = this.props\r\n\t\tconst text = this.state.value\r\n\t\tif (!!room && !!room.id && text.length > 0) {\r\n\t\t\tthis.props.trySendMessage(text, room.id)\r\n\t\t\tthis.setState({\r\n\t\t\t\tvalue: '',\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<InputForm onSubmit={this.handleSend}>\r\n\t\t\t\t<Input value={this.state.value} onChange={this.handleTyping} />\r\n\t\t\t\t<SendButton type={'submit'}>Send</SendButton>\r\n\t\t\t</InputForm>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default connect(\r\n\tnull,\r\n\t{ trySendMessage },\r\n)(ChatInput)\r\n","import React, { Fragment, Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport styled from 'styled-components'\r\nimport { Layout, Typography } from 'antd'\r\n\r\nimport LoadingSpinner from './LoadingSpinner'\r\nimport Message from './Message'\r\nimport ChatInput from './ChatInput'\r\n\r\nimport { trySendMessage } from '../actions/rooms'\r\n\r\nconst { Header, Content } = Layout\r\nconst { Title } = Typography\r\n\r\nconst ChatWrapper = styled.div`\r\n\theight: 100%;\r\n\tpadding: 24;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tbackground: '#fff';\r\n`\r\n\r\nconst Messages = styled.div`\r\n\tpadding-top: 8px;\r\n\tpadding-bottom: 8px;\r\n\tflex-grow: 1;\r\n\toverflow-y: scroll;\r\n\toverflow-x: hidden;\r\n`\r\n\r\ninterface Props {\r\n\tauth: Auth\r\n\troom: RoomItem | undefined\r\n\tmatch: any\r\n\tisLoading: boolean\r\n\tmessages: Message[]\r\n\ttrySendMessage: (text: string, roomId: string, status?: boolean) => void\r\n}\r\n\r\nclass RoomContainer extends Component<Props> {\r\n\tmessagesEnd: any = null\r\n\tmessagesContainer: HTMLElement | null = null\r\n\r\n\tcomponentWillMount() {\r\n\t\tconst { roomId } = this.props.match.params\r\n\t\tconsole.log(roomId)\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.scrollToBottom()\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps: Props) {\r\n\t\tif (prevProps.messages.length === 0 && this.props.messages.length > 0) {\r\n\t\t\tthis.scrollToBottom()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// scroll management\r\n\t\tif (\r\n\t\t\tprevProps.messages.length !== this.props.messages.length &&\r\n\t\t\tprevProps.messages.length > 0 &&\r\n\t\t\tthis.props.messages.length > 0\r\n\t\t) {\r\n\t\t\tconst previousLastMessage = prevProps.messages.slice(-1)[0]\r\n\t\t\tconst currentLastMessage = this.props.messages.slice(-1)[0]\r\n\t\t\tif (\r\n\t\t\t\tpreviousLastMessage.id !== currentLastMessage.id &&\r\n\t\t\t\t!!currentLastMessage &&\r\n\t\t\t\tcurrentLastMessage.sender.uid === this.props.auth.uid\r\n\t\t\t) {\r\n\t\t\t\t// last message was ours, scroll to the bottom\r\n\t\t\t\tthis.scrollToBottom()\r\n\t\t\t} else if (this.messagesContainer) {\r\n\t\t\t\t// last message is not ours, lets check scroll\r\n\t\t\t\tconst {\r\n\t\t\t\t\tscrollHeight,\r\n\t\t\t\t\tscrollTop,\r\n\t\t\t\t\toffsetHeight,\r\n\t\t\t\t\tclientHeight,\r\n\t\t\t\t} = this.messagesContainer\r\n\t\t\t\tconst calculato = scrollHeight - scrollTop === clientHeight\r\n\r\n\t\t\t\t// if our scroll is around bottom 2 messages, scroll to bottom pls\r\n\t\t\t\tif (Math.abs(clientHeight - (scrollHeight - scrollTop - 45)) < 45) {\r\n\t\t\t\t\tthis.scrollToBottom()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tscrollToBottom = () => {\r\n\t\tif (this.messagesEnd) {\r\n\t\t\tthis.messagesEnd.scrollIntoView({ behavior: 'auto' })\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { room, messages, isLoading } = this.props\r\n\t\tlet content = <LoadingSpinner />\r\n\t\tif (!isLoading) {\r\n\t\t\tcontent = (\r\n\t\t\t\t<ChatWrapper>\r\n\t\t\t\t\t<Messages\r\n\t\t\t\t\t\tref={el => {\r\n\t\t\t\t\t\t\tthis.messagesContainer = el\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{messages.map((message, idx) => (\r\n\t\t\t\t\t\t\t<Message\r\n\t\t\t\t\t\t\t\tisConsecutive={\r\n\t\t\t\t\t\t\t\t\t!!messages[idx - 1] &&\r\n\t\t\t\t\t\t\t\t\tmessages[idx - 1].sender.uid === message.sender.uid\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tname={message.sender.displayName || ''}\r\n\t\t\t\t\t\t\t\tkey={message.id}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{message.text}\r\n\t\t\t\t\t\t\t</Message>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tstyle={{ float: 'left', clear: 'both' }}\r\n\t\t\t\t\t\t\tref={el => {\r\n\t\t\t\t\t\t\t\tthis.messagesEnd = el\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Messages>\r\n\t\t\t\t\t<ChatInput room={this.props.room} />\r\n\t\t\t\t</ChatWrapper>\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t<Header\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tbackground: '#fff',\r\n\t\t\t\t\t\tborderBottom: '1px solid #acacac',\r\n\t\t\t\t\t\tpadding: 16,\r\n\t\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\t\tflexDirection: 'row',\r\n\t\t\t\t\t\talignItems: 'center',\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Title style={{ margin: 0 }} level={3}>\r\n\t\t\t\t\t\t# {room ? room.name : ''}\r\n\t\t\t\t\t</Title>\r\n\t\t\t\t</Header>\r\n\t\t\t\t<Content\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tmargin: '0px 16px 24px 16px',\r\n\t\t\t\t\t\toverflow: 'initial',\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t{content}\r\n\t\t\t\t</Content>\r\n\t\t\t</Fragment>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState, ownProps: any) => {\r\n\tconst { roomId } = ownProps.match.params\r\n\tconst room = state.rooms.joined.find(room => room.id === roomId)\r\n\tconst messages = room ? room.messages : []\r\n\treturn {\r\n\t\tauth: state.auth,\r\n\t\troom,\r\n\t\tmessages,\r\n\t\tisLoading: !room,\r\n\t}\r\n}\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\t{ trySendMessage },\r\n)(RoomContainer)\r\n","import React, { Component } from 'react'\r\nimport styled from 'styled-components'\r\nimport { connect } from 'react-redux'\r\nimport { Modal, Input, Typography } from 'antd'\r\nimport { tryCreateRoom, RoomData } from '../actions/rooms'\r\n\r\nconst { TextArea } = Input\r\nconst { Text } = Typography\r\n\r\nconst TextWrap = styled.div`\r\n\tmargin-top: 5px;\r\n\tmargin-bottom: 5px;\r\n`\r\n\r\ninterface Props {\r\n\tisOpen: boolean;\r\n\thandleClose: () => void;\r\n\ttryCreateRoom: (roomData: RoomData, showCreateError?: any) => Promise<any>;\r\n\tauth: Auth;\r\n}\r\n\r\ninterface State {\r\n\troomName: string;\r\n\tdescription: string;\r\n}\r\n\r\nclass CreateChatDialog extends Component<Props, State> {\r\n\tstate = {\r\n\t\troomName: '',\r\n\t\tdescription: '',\r\n\t}\r\n\r\n\thandleChange = (e: any) => {\r\n\t\tconsole.log(e.target.name)\r\n\t\t// @ts-ignore\r\n\t\tthis.setState({\r\n\t\t\t[e.target.name]: e.target.value,\r\n\t\t})\r\n\t}\r\n\r\n\thandleSubmit = () => {\r\n\t\tconst { uid, displayName: userDisplayName } = this.props.auth\r\n\t\tif (uid) {\r\n\t\t\tconsole.log('Create this room pls')\r\n\t\t\tconst roomName = this.state.roomName\r\n\t\t\tif (roomName && roomName.length > 0) {\r\n\t\t\t\t// this.setState({ error: '' })\r\n\t\t\t\tconst room = {\r\n\t\t\t\t\tname: roomName,\r\n\t\t\t\t\tpeople: {\r\n\t\t\t\t\t\tid: uid,\r\n\t\t\t\t\t\tname: userDisplayName,\r\n\t\t\t\t\t\tunread: 0,\r\n\t\t\t\t\t\tlastRead: 0,\r\n\t\t\t\t\t},\r\n\t\t\t\t}\r\n\t\t\t\tthis.props.tryCreateRoom(room)\r\n\t\t\t\tthis.props.handleClose()\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Modal\r\n\t\t\t\ttitle=\"Create Room\"\r\n\t\t\t\tvisible={this.props.isOpen}\r\n\t\t\t\tonOk={this.handleSubmit}\r\n\t\t\t\tonCancel={this.props.handleClose}\r\n\t\t\t\tokButtonProps={{ disabled: !this.props.auth.uid }}\r\n\t\t\t\tcancelButtonProps={{ disabled: !this.props.auth.uid }}\r\n\t\t\t>\r\n\t\t\t\t<TextWrap>\r\n\t\t\t\t\t<Text>Name:</Text>\r\n\t\t\t\t</TextWrap>\r\n\t\t\t\t<Input\r\n\t\t\t\t\tname=\"roomName\"\r\n\t\t\t\t\tvalue={this.state.roomName}\r\n\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<TextWrap>\r\n\t\t\t\t\t<Text>Description:</Text>\r\n\t\t\t\t</TextWrap>\r\n\t\t\t\t<TextArea\r\n\t\t\t\t\tname=\"description\"\r\n\t\t\t\t\tvalue={this.state.description}\r\n\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\trows={4}\r\n\t\t\t\t/>\r\n\t\t\t</Modal>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n\tauth: state.auth,\r\n})\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\t{ tryCreateRoom },\r\n)(CreateChatDialog)\r\n","import React, { Component } from 'react'\r\nimport styled from 'styled-components'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n\tModal,\r\n\tInput,\r\n\tTypography,\r\n\tList,\r\n\tmessage,\r\n\tAvatar,\r\n\tSpin,\r\n\tButton,\r\n} from 'antd'\r\n\r\nimport { tryCreateRoom, RoomData } from '../actions/rooms'\r\n\r\nconst Label = styled.div`\r\n\tpadding: 10px;\r\n`\r\n\r\ninterface RoomWithAvailability extends RoomItem {\r\n\tcanJoin: boolean\r\n}\r\n\r\ninterface Props {\r\n\tisOpen: boolean\r\n\thandleClose: () => void\r\n\ttryCreateRoom: (roomData: RoomData, showCreateError?: any) => Promise<any>\r\n\tauth: Auth\r\n\troomList: Array<RoomWithAvailability>\r\n}\r\n\r\ninterface State {\r\n\troomName: string\r\n\tdescription: string\r\n}\r\n\r\nclass BrowseRoomsDialog extends Component<Props, State> {\r\n\thandleJoinRoom = (room: RoomWithAvailability) => {\r\n\t\tif (!room.canJoin) {\r\n            console.log('redirect to that room')\r\n            this.props.handleClose()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.props.handleClose()\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Modal\r\n\t\t\t\ttitle=\"Browse Rooms\"\r\n\t\t\t\tvisible={this.props.isOpen}\r\n\t\t\t\tonOk={this.props.handleClose}\r\n\t\t\t\tonCancel={this.props.handleClose}\r\n\t\t\t\tokButtonProps={{ disabled: !this.props.auth.uid }}\r\n\t\t\t\tcancelButtonProps={{ disabled: !this.props.auth.uid }}\r\n\t\t\t\tbodyStyle={{ maxHeight: 450, overflowY: 'scroll' }}\r\n\t\t\t>\r\n\t\t\t\t<List\r\n\t\t\t\t\tdataSource={this.props.roomList}\r\n\t\t\t\t\trenderItem={item => (\r\n\t\t\t\t\t\t<List.Item key={item.id}>\r\n\t\t\t\t\t\t\t<List.Item.Meta\r\n\t\t\t\t\t\t\t\tavatar={item.avatarUrl ? <Avatar src={item.avatarUrl} /> : null}\r\n\t\t\t\t\t\t\t\ttitle={\r\n\t\t\t\t\t\t\t\t\t<a onClick={() => this.handleJoinRoom(item)}>{item.name}</a>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tdescription={'TODO room descriptions'}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t{item.canJoin ? (\r\n\t\t\t\t\t\t\t\t\t<Button onClick={() => this.handleJoinRoom(item)}>\r\n\t\t\t\t\t\t\t\t\t\tJoin\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<Label>joined</Label>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</List.Item>\r\n\t\t\t\t\t)}\r\n\t\t\t\t>\r\n\t\t\t\t\t{' '}\r\n\t\t\t\t</List>\r\n\t\t\t</Modal>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n\tconst { available, joined } = state.rooms\r\n\tconst roomList = available.map(room => {\r\n\t\tconst canJoin = joined.find(item => item.id === room.id) === undefined\r\n\t\treturn {\r\n\t\t\t...room,\r\n\t\t\tcanJoin,\r\n\t\t}\r\n\t})\r\n\treturn {\r\n\t\troomList,\r\n\t\tauth: state.auth,\r\n\t}\r\n}\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\t{ tryCreateRoom },\r\n)(BrowseRoomsDialog)\r\n","import React, { Component } from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { connect } from 'react-redux'\r\nimport { Layout, Menu, Icon } from 'antd'\r\n\r\nimport RoomContainer from './RoomContainer'\r\nimport CreateChatDialog from './CreateChatDialog'\r\nimport BrowseRoomsDialog from './BrowseRoomsDialog'\r\nimport LoadingSpinner from './LoadingSpinner'\r\n\r\nimport { tryLogin } from '../actions/auth'\r\nimport { initSlacker } from '../actions/rooms'\r\n\r\nimport '../styles/index.css'\r\n\r\nconst { Sider } = Layout\r\n// const { Text } = Typography\r\n\r\nconst LogoWrap = styled.div`\r\n\ttext-align: center;\r\n\tpadding: 10px;\r\n\theight: 64px;\r\n\tborder-bottom: 1px solid grey;\r\n`\r\n\r\nconst Logo = styled.img`\r\n\theight: 100%;\r\n`\r\n\r\nconst RoomButtons = styled.div`\r\n\tpadding: 10px;\r\n\tcolor: rgba(255, 255, 255, 0.65);\r\n\tdisplay: flex;\r\n\tjustify-content: space-between;\r\n\talign-items: center;\r\n`\r\n\r\nconst MenuButton = styled.button`\r\n\tfont-size: 16px;\r\n\tbackground: none;\r\n\tborder: none;\r\n\t-webkit-transition: color 0.5s;\r\n\ttransition: color 0.5s;\r\n\tcursor: pointer;\r\n\t&:hover {\r\n\t\tcolor: #fff;\r\n\t}\r\n`\r\n\r\ninterface Props {\r\n\ttryLogin: () => void\r\n\tinitSlacker: () => void\r\n\tauth: Auth\r\n\trooms: {\r\n\t\tjoined: RoomItem[]\r\n\t\tavailable: RoomItem[]\r\n\t}\r\n\thistory: any\r\n\tlocation: {\r\n\t\tpathname: any\r\n\t}\r\n}\r\n\r\ninterface State {\r\n\topenDialog: string | false\r\n}\r\n\r\nclass App extends Component<Props, State> {\r\n\tstate: State = {\r\n\t\topenDialog: false,\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.tryLogin()\r\n\t}\r\n\r\n\tcomponentWillUpdate(nextProps: Props) {\r\n\t\tif (!this.props.auth.uid && nextProps.auth.uid) {\r\n\t\t\tthis.props.initSlacker()\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps: Props) {\r\n\t\tconst { location, rooms, history } = this.props\r\n\t\tif (\r\n\t\t\tlocation.pathname === '/' &&\r\n\t\t\tprevProps.rooms.joined.length === 0 &&\r\n\t\t\trooms.joined.length !== 0\r\n\t\t) {\r\n\t\t\tconsole.log('redirect to first room?')\r\n\t\t\thistory.push(`/r/${rooms.joined[0].id}`)\r\n\t\t}\r\n\t}\r\n\r\n\thandleCloseDialog = () => {\r\n\t\tthis.setState({\r\n\t\t\topenDialog: false,\r\n\t\t})\r\n\t}\r\n\r\n\thandleOpenDialog = (dialogName: string) => {\r\n\t\tthis.setState({\r\n\t\t\topenDialog: dialogName,\r\n\t\t})\r\n\t}\r\n\r\n\thandleRoomSelect = ({ key }: { key: string }) => {\r\n\t\tthis.props.history.push(key)\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Layout style={{ height: '100%' }}>\r\n\t\t\t\t<Sider\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\toverflow: 'auto',\r\n\t\t\t\t\t\theight: '100vh',\r\n\t\t\t\t\t\tposition: 'fixed',\r\n\t\t\t\t\t\tleft: 0,\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<LogoWrap>\r\n\t\t\t\t\t\t<Logo src=\"fox.png\" />\r\n\t\t\t\t\t</LogoWrap>\r\n\r\n\t\t\t\t\t<RoomButtons>\r\n\t\t\t\t\t\t<MenuButton onClick={() => this.handleOpenDialog('browseRooms')}>\r\n\t\t\t\t\t\t\t<span>Rooms:</span>\r\n\t\t\t\t\t\t</MenuButton>\r\n\t\t\t\t\t\t<MenuButton onClick={() => this.handleOpenDialog('createRoom')}>\r\n\t\t\t\t\t\t\t<Icon type=\"plus-circle\" />\r\n\t\t\t\t\t\t</MenuButton>\r\n\t\t\t\t\t</RoomButtons>\r\n\t\t\t\t\t<CreateChatDialog\r\n\t\t\t\t\t\tisOpen={this.state.openDialog === 'createRoom'}\r\n\t\t\t\t\t\thandleClose={this.handleCloseDialog}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<BrowseRoomsDialog\r\n\t\t\t\t\t\tisOpen={this.state.openDialog === 'browseRooms'}\r\n\t\t\t\t\t\thandleClose={this.handleCloseDialog}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Menu\r\n\t\t\t\t\t\ttheme=\"dark\"\r\n\t\t\t\t\t\tmode=\"inline\"\r\n\t\t\t\t\t\tonSelect={this.handleRoomSelect}\r\n\t\t\t\t\t\tselectedKeys={[this.props.location.pathname]}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{this.props.rooms.joined.map(room => (\r\n\t\t\t\t\t\t\t<Menu.Item key={`/r/${room.id}`}>\r\n\t\t\t\t\t\t\t\t<span className=\"nav-text\"># {room.name}</span>\r\n\t\t\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</Menu>\r\n\t\t\t\t</Sider>\r\n\t\t\t\t<Layout style={{ marginLeft: 200, background: '#fff' }}>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route path={'/r/:roomId'} component={RoomContainer} />\r\n\t\t\t\t\t\t<Route path={'/'}>\r\n\t\t\t\t\t\t\t{this.props.rooms.joined.length === 0 ? (\r\n\t\t\t\t\t\t\t\t<LoadingSpinner />\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<div>No chat selected</div>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</Layout>\r\n\t\t\t</Layout>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n\tauth: state.auth,\r\n\trooms: state.rooms,\r\n})\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\t{ tryLogin, initSlacker },\r\n)(App)\r\n","import { firebase } from \"../firebase/firebase\";\r\n\r\nexport const loginSuccess = (uid: string, displayName: string) => ({\r\n  type: \"LOGIN\",\r\n  uid,\r\n  displayName\r\n});\r\n\r\nexport const tryLogin = () => {\r\n  return (dispatch: any) => {\r\n    return firebase\r\n      .auth()\r\n      .signInAnonymously()\r\n      .then(response => {\r\n        // console.log(response);\r\n        const { user } = response;\r\n\r\n        if (user) {\r\n          const displayName = user.displayName || \"Ninja\";\r\n          return dispatch(loginSuccess(user.uid, displayName));\r\n        }\r\n      })\r\n      .catch(function(error) {\r\n        console.log({ error });\r\n        // Handle Errors here.\r\n        var errorCode = error.code;\r\n        var errorMessage = error.message;\r\n        // ...\r\n      });\r\n  };\r\n};\r\n\r\nexport const logout = () => ({\r\n  type: \"LOGOUT\"\r\n});\r\n\r\nexport const tryLogout = () => {\r\n  return () => {\r\n    return firebase\r\n      .auth()\r\n      .signOut()\r\n      .then(() => {\r\n        console.log(\"log out!!!\");\r\n      });\r\n  };\r\n};\r\n","import moment from 'moment'\r\n\r\ninterface RoomsState {\r\n\tjoined: Room[];\r\n\tavailable: Room[];\r\n}\r\n\r\nconst defaultState: RoomsState = {\r\n\tjoined: [],\r\n\tavailable: [],\r\n}\r\n\r\nexport default (state: RoomsState = defaultState, action: any) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'CREATE_ROOM':\r\n\t\t\treturn { ...state, joined: [...state.joined, action.room] }\r\n\t\tcase 'JOINED_ROOM':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tjoined: [...state.joined, action.room],\r\n\t\t\t}\r\n\r\n\t\tcase 'AVAILABLE_ROOMS':\r\n\t\t\treturn { ...state, available: action.rooms }\r\n\r\n\t\t// case 'ON_LEFT':\r\n\t\t// \t// console.log('onleft');\r\n\r\n\t\t// \treturn state.map(room => {\r\n\t\t// \t\t// console.log(room);\r\n\t\t// \t\tif (room.name === action.roomName) {\r\n\t\t// \t\t\tconst p = room.people.filter((person: Person) => {\r\n\t\t// \t\t\t\treturn person.id !== action.personID\r\n\t\t// \t\t\t})\r\n\t\t// \t\t\t// console.log(p);\r\n\t\t// \t\t\treturn {\r\n\t\t// \t\t\t\t...room,\r\n\t\t// \t\t\t\tpeople: p,\r\n\t\t// \t\t\t}\r\n\t\t// \t\t} else {\r\n\t\t// \t\t\treturn room\r\n\t\t// \t\t}\r\n\t\t// \t})\r\n\r\n\t\t// case 'ON_JOINED':\r\n\t\t// \treturn state.map(room => {\r\n\t\t// \t\tif (room.name === action.roomName) {\r\n\t\t// \t\t\troom.people.push(action.person)\r\n\t\t// \t\t\treturn room\r\n\t\t// \t\t} else {\r\n\t\t// \t\t\treturn room\r\n\t\t// \t\t}\r\n\t\t// \t})\r\n\r\n\t\tcase 'SEND_MESSAGE':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tjoined: state.joined.map(room => {\r\n\t\t\t\t\tif (room.name === action.roomName) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t...room,\r\n\t\t\t\t\t\t\tmessages: [...room.messages, action.message],\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn room\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t}\r\n\t\tcase 'UPDATE_MESSAGES':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tjoined: state.joined.map(room => {\r\n\t\t\t\t\tif (room.id === action.roomId) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t...room,\r\n\t\t\t\t\t\t\tmessages: [...action.messages],\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn room\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t}\r\n\t\t// case 'REORDER_ROOMS':\r\n\t\t//   let room;\r\n\t\t//   let rooms = state.filter((r) => {\r\n\t\t//     if(r.name === action.roomName) {\r\n\t\t//       room = r;\r\n\t\t//       return false;\r\n\t\t//     }\r\n\t\t//     else {\r\n\t\t//       return true;\r\n\t\t//     }\r\n\t\t//   });\r\n\t\t//   rooms.unshift(room);\r\n\t\t//   return rooms;\r\n\t\t// case 'ORDER_ROOMS_START_STATE':\r\n\t\t// \t//  const x =  action.rooms.sort((a, b) => {\r\n\t\t// \t//   //  console.log('a', a);\r\n\t\t// \t//   //  console.log('b', b);\r\n\t\t// \t//   if(a.messages.length > 0 && b.messages.length > 0) {\r\n\t\t// \t//     console.log(typeof a.messages);\r\n\r\n\t\t// \t//     return moment(a.messages[a.messages.length-1].createdAt) > moment(b.messages[b.messages.length-1].createdAt)\r\n\t\t// \t//     // {\r\n\t\t// \t//   //     return -1;\r\n\t\t// \t//   //   } else {\r\n\t\t// \t//   //     return 1;\r\n\t\t// \t//   //   }\r\n\t\t// \t//   // }\r\n\t\t// \t//   // else {\r\n\t\t// \t//   //   return -1;\r\n\t\t// \t//   }\r\n\t\t// \t// });\r\n\t\t// \t// console.log(typeof x)\r\n\t\t// \t// console.log(x);\r\n\t\t// \t// return x;\r\n\t\t// \tstate.sort((a: any, b: any) => {\r\n\t\t// \t\treturn moment(a.messages[a.messages.length - 1].createdAt) <\r\n\t\t// \t\t\tmoment(b.messages[b.messages.length - 1].createdAt)\r\n\t\t// \t\t\t? 1\r\n\t\t// \t\t\t: -1\r\n\t\t// \t})\r\n\t\t// \t// console.log(state);\r\n\t\t// \treturn state.map(room => room)\r\n\r\n\t\t// case 'CLEAR_UNREAD':\r\n\t\t// \treturn state.map(room => {\r\n\t\t// \t\tif (room.name === action.roomName) {\r\n\t\t// \t\t\tconst people = room.people.map((person: Person) => {\r\n\t\t// \t\t\t\tif (person.id === action.uid) {\r\n\t\t// \t\t\t\t\treturn {\r\n\t\t// \t\t\t\t\t\t...person,\r\n\t\t// \t\t\t\t\t\tunread: action.unread,\r\n\t\t// \t\t\t\t\t\tlastRead: action.time,\r\n\t\t// \t\t\t\t\t}\r\n\t\t// \t\t\t\t} else {\r\n\t\t// \t\t\t\t\treturn person\r\n\t\t// \t\t\t\t}\r\n\t\t// \t\t\t})\r\n\t\t// \t\t\treturn { ...room, people }\r\n\t\t// \t\t} else {\r\n\t\t// \t\t\treturn room\r\n\t\t// \t\t}\r\n\t\t// \t})\r\n\r\n\t\t// case 'LEAVE_ROOM':\r\n\t\t// \treturn state.filter(room => {\r\n\t\t// \t\treturn room.name !== action.roomName\r\n\t\t// \t})\r\n\t\t// case 'CLEAR_STATE':\r\n\t\t// \treturn []\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n","import authReducer from '../reducers/auth'\r\nimport roomsReducer from '../reducers/rooms'\r\nimport redirectReducer from '../reducers/redirect'\r\nimport { combineReducers } from 'redux'\r\n\r\nconst reducers = combineReducers({\r\n\tauth: authReducer,\r\n\trooms: roomsReducer,\r\n\tredirect: redirectReducer,\r\n})\r\n\r\nexport default reducers\r\n","export default (state = {}, action: any) => {\r\n  switch (action.type) {\r\n    case \"LOGIN\":\r\n      return {\r\n        uid: action.uid,\r\n        displayName: action.displayName\r\n      };\r\n    case \"LOGOUT\":\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export default (state = {}, action: any) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'REDIRECT_TO':\r\n\t\t\treturn {\r\n\t\t\t\tredirectTo: action.redirectTo,\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n","import { put, select, takeLatest, fork, call } from 'redux-saga/effects'\r\nimport database, { firebase, rsf } from '../firebase/firebase'\r\nimport { availableRooms, createRoom, syncMessages } from '../actions/rooms'\r\n\r\nconst byCreatedAt = function(a: any, b: any) {\r\n\t// @ts-ignore\r\n\treturn new Date(a.createdAt) - new Date(b.createdAt)\r\n}\r\n\r\nexport function* fetchRoomSaga(roomId: string) {\r\n\tconsole.log('try fetch room ', roomId)\r\n\t// fetch joined room from firestore\r\n\tconst roomRef = database.collection('rooms').doc(roomId)\r\n\tconst roomDoc = yield call(rsf.firestore.getDocument, roomRef)\r\n\r\n\t// if we have such room\r\n\tif (roomDoc.exists) {\r\n\t\tconst room = roomDoc.data()\r\n\t\tconst people: any[] = []\r\n\t\tconst messages: any[] = []\r\n\r\n\t\t// get room's people\r\n\t\tconst peopleQuery = yield call(\r\n\t\t\trsf.firestore.getCollection,\r\n\t\t\troomRef.collection('people'),\r\n\t\t)\r\n\t\tpeopleQuery.forEach((peopleDoc: any) => {\r\n\t\t\tpeople.push({ id: peopleDoc.id, ...peopleDoc.data() })\r\n\t\t})\r\n\t\tconsole.log({ people })\r\n\r\n\t\t// get room's people\r\n\t\tconst messagesQuery = yield call(\r\n\t\t\trsf.firestore.getCollection,\r\n\t\t\troomRef.collection('messages'),\r\n\t\t)\r\n\t\tmessagesQuery.forEach((messageDoc: any) => {\r\n\t\t\tmessages.push({\r\n\t\t\t\tid: messageDoc.id,\r\n\t\t\t\t...messageDoc.data(),\r\n\t\t\t})\r\n\t\t})\r\n\t\tmessages.sort(byCreatedAt)\r\n\t\tconsole.log({ messages })\r\n\r\n\t\tyield put(\r\n\t\t\tcreateRoom({\r\n\t\t\t\tid: roomRef.id,\r\n\t\t\t\tname: room ? room.name : 'Error',\r\n\t\t\t\tpeople,\r\n\t\t\t\tmessages,\r\n\t\t\t}),\r\n\t\t)\r\n\r\n\t\t// subscribe to messages\r\n\t\tyield fork(rsf.firestore.syncCollection, roomRef.collection('messages'), {\r\n\t\t\tsuccessActionCreator: (snapshot: any) => syncMessages(snapshot, roomId),\r\n\t\t})\r\n\t}\r\n}\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* initSlackerSaga(action: any) {\r\n\tconst auth = yield select(state => state.auth)\r\n\r\n\tif (!auth.uid) {\r\n\t\tconsole.log('no auth!')\r\n\t\treturn\r\n\t}\r\n\r\n\t// fetch all rooms\r\n\tconst roomsPromise = database.collection('rooms').get()\r\n\r\n\tconst roomsQuery: firebase.firestore.QuerySnapshot = yield roomsPromise\r\n\tconst rooms: RoomItem[] = []\r\n\troomsQuery.forEach(doc => {\r\n\t\tconst room = {\r\n\t\t\tid: doc.id,\r\n\t\t\t...doc.data(),\r\n\t\t}\r\n\t\t// @ts-ignore\r\n\t\trooms.push(room)\r\n\t})\r\n\r\n\tyield put(availableRooms(rooms))\r\n\tconst generalRoom = rooms.find(room => room.name === 'general')\r\n\r\n\t// get user rooms\r\n\tconst userRoomsQuery = yield call(\r\n\t\trsf.firestore.getCollection,\r\n\t\t`users/${auth.uid}/rooms`,\r\n\t)\r\n\r\n\tif (!userRoomsQuery.empty) {\r\n\t\tconst userRoomIds: string[] = []\r\n\t\tuserRoomsQuery.forEach((userRoomDoc: any) =>\r\n\t\t\tuserRoomIds.push(userRoomDoc.id),\r\n\t\t)\r\n\r\n\t\t// fetch each joined room\r\n\t\tfor (let roomId of userRoomIds) {\r\n\t\t\tconst task = yield fork(fetchRoomSaga, roomId)\r\n\t\t}\r\n\r\n\t\t// if no general room, join that as well\r\n\t\tif(generalRoom && !userRoomIds.includes(generalRoom.id)) {\r\n\t\t\tyield put({\r\n\t\t\t\ttype: 'JOIN_ROOM_SAGA',\r\n\t\t\t\troomId: generalRoom.id,\r\n\t\t\t\troom: generalRoom,\r\n\t\t\t})\r\n\t\t}\r\n\t} else {\r\n\t\tif (generalRoom) {\r\n\t\t\tyield put({\r\n\t\t\t\ttype: 'JOIN_ROOM_SAGA',\r\n\t\t\t\troomId: generalRoom.id,\r\n\t\t\t\troom: generalRoom,\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction* mySaga() {\r\n\tyield takeLatest('INIT_SLACKER_SAGA', initSlackerSaga)\r\n}\r\n\r\nexport default mySaga\r\n","import { put, select, takeEvery, fork, call } from 'redux-saga/effects'\r\nimport { AnyAction } from 'redux'\r\nimport database, { firebase, rsf } from '../firebase/firebase'\r\nimport { joinedRoom, showError, syncMessages } from '../actions/rooms'\r\nimport { fetchRoomSaga } from './initSaga'\r\n\r\nconst byCreatedAt = function(a: any, b: any) {\r\n\t// @ts-ignore\r\n\treturn new Date(a.createdAt) - new Date(b.createdAt)\r\n}\r\n\r\nfunction* joinRoom(action: AnyAction) {\r\n\tconst { roomId } = action\r\n\tconst { uid, displayName } = yield select(state => state.auth)\r\n\tconst roomRef = database.doc(`rooms/${roomId}`)\r\n\r\n\tconst roomDoc = yield call(rsf.firestore.getDocument, roomRef)\r\n\tconst room = <RoomItem>{ id: roomDoc.id, ...roomDoc.data() }\r\n\r\n\tif (!room || !roomDoc.exists) {\r\n\t\tyield put(showError('Room not found!'))\r\n\t\treturn\r\n\t} else if (\r\n\t\troom.people &&\r\n\t\troom.people.find((person: Person) => person.id === uid)\r\n\t) {\r\n\t\t// if we are already in this room then\r\n\t\t// history.push(`room/${data.roomName}`);\r\n\t\t// return i guess ?\r\n\t\treturn\r\n\t} else {\r\n\t\t// we should add ourselves to this room\r\n\r\n\t\tconst person = {\r\n\t\t\tname: displayName,\r\n\t\t\tid: uid,\r\n\t\t\tunread: 0,\r\n\t\t\tlastRead: 0,\r\n\t\t}\r\n\r\n\t\t// TODO figure wtf is wrong here\r\n\t\tyield call(\r\n\t\t\t// @ts-ignore\r\n\t\t\trsf.firestore.setDocument,\r\n\t\t\t`rooms/${roomId}/people/${person.id}`,\r\n\t\t\tperson,\r\n\t\t)\r\n\r\n\t\tyield call(\r\n\t\t\t// @ts-ignore\r\n\t\t\trsf.firestore.setDocument,\r\n\t\t\t`users/${person.id}/rooms/${roomId}`,\r\n\t\t\t{ roomName: room.name },\r\n\t\t)\r\n\r\n\t\t// fetch full room and subscribe\r\n\t\tyield call(fetchRoomSaga, roomId)\r\n\t}\r\n}\r\n\r\nfunction* joinRoomSaga() {\r\n\tyield takeEvery('JOIN_ROOM_SAGA', joinRoom)\r\n}\r\n\r\nexport default joinRoomSaga\r\n","import { all } from 'redux-saga/effects'\r\nimport initSaga from './initSaga'\r\nimport joinRoomSaga from './joinRoomSaga'\r\n\r\nexport default function* rootSaga() {\r\n\tyield all([initSaga(), joinRoomSaga()])\r\n}\r\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport reducers from '../reducers'\r\n\r\nimport mySaga from '../sagas/rootSaga'\r\n\r\n// create the saga middleware\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nexport default () => {\r\n\tconst store = createStore(\r\n\t\treducers,\r\n\t\tcomposeEnhancers(applyMiddleware(thunk, sagaMiddleware)),\r\n\t)\r\n\r\n\tsagaMiddleware.run(mySaga)\r\n\r\n\treturn store\r\n}\r\n","import React from 'react'\r\nimport { Provider } from 'react-redux'\r\nimport { HashRouter as Router, Route } from 'react-router-dom'\r\nimport ReactDOM from 'react-dom'\r\nimport 'antd/dist/antd.css'\r\n\r\nimport App from './components/App'\r\nimport configureStore from './store/configureStore'\r\n\r\nconst store = configureStore()\r\nconst jsx = (\r\n\t<Provider store={store}>\r\n\t\t<Router>\r\n\t\t\t<Route path={'/'} component={App} />\r\n\t\t</Router>\r\n\t</Provider>\r\n)\r\n\r\nReactDOM.render(jsx, document.getElementById('container'))\r\n"],"sourceRoot":""}