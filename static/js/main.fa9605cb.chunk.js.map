{"version":3,"sources":["firebase/firebase.ts","actions/rooms.ts","components/RoomContainer.tsx","components/CreateChatDialog.tsx","components/App.tsx","actions/auth.ts","reducers/auth.ts","reducers/rooms.ts","sagas/initSaga.ts","sagas/joinRoomSaga.ts","sagas/rootSaga.ts","store/configureStore.ts","index.tsx"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","rsf","ReduxSagaFirebase","database","firestore","byCreatedAt","a","b","Date","createdAt","createRoom","_ref","id","name","people","_ref$messages","messages","type","room","joinedRoom","showError","message","updateMessages","roomId","availableRooms","rooms","syncMessages","messagesSnapshot","forEach","doc","push","Object","objectSpread","data","console","log","sort","Header","Layout","Content","Title","Typography","ChatWrapper","styled","div","_templateObject","LoadingWrapper","_templateObject2","Messages","_templateObject3","Message","_templateObject4","InputForm","form","_templateObject5","Input","input","_templateObject6","SendButton","button","_templateObject7","RoomContainer","state","messageValue","messagesEnd","handleTyping","e","_this","setState","target","value","scrollToBottom","scrollIntoView","behavior","handleSend","preventDefault","props","text","trySendMessage","prevProps","length","this","previousLastMessage","slice","currentLastMessage","sender","uid","auth","_this2","_this$props","isLoading","content","react_default","createElement","spin","size","map","key","style","float","clear","ref","el","onSubmit","onChange","react","background","padding","display","flexRirection","alignItems","margin","level","overflow","Component","connect","ownProps","match","params","joined","find","status","arguments","undefined","dispatch","getState","user","displayName","moment","format","collection","concat","add","TextArea","Text","TextWrap","CreateChatDialog_templateObject","CreateChatDialog","roomName","description","handleChange","defineProperty","handleSubmit","_this$props$auth","userDisplayName","unread","lastRead","tryCreateRoom","handleClose","modal","title","visible","isOpen","onOk","onCancel","okButtonProps","disabled","cancelButtonProps","rows","roomData","showCreateError","get","then","snapshot","r","roomRef","set","Sider","ButtonWrap","App_templateObject","MenuLabel","App_templateObject2","App","isCreateRoomDialogOpen","handleCloseCreateChatDialog","handleOpenCreateChatDialog","handleRoomSelect","history","tryLogin","nextProps","initSlacker","layout","height","position","left","es_button","icon","onClick","components_CreateChatDialog","menu","theme","mode","onSelect","defaultSelectedKeys","location","pathname","Item","className","marginLeft","react_router","path","component","signInAnonymously","response","loginSuccess","catch","error","code","reducers_auth","action","defaultState","available","reducers_rooms","toConsumableArray","fetchJoinedRoom","mySaga","roomDoc","regenerator_default","wrap","_context","prev","next","call","getDocument","sent","exists","getCollection","peopleDoc","messageDoc","put","fork","syncCollection","successActionCreator","stop","_marked","roomsPromise","roomsQuery","generalRoom","userRoomsQuery","userRoomIds","_i","_userRoomIds","_context2","select","abrupt","empty","userRoomDoc","includes","_marked2","_context3","takeLatest","_marked3","joinRoom","joinRoomSaga","person","roomWithPerson","setDocument","joinRoomSaga_marked","takeEvery","joinRoomSaga_marked2","rootSaga","all","initSaga","rootSaga_marked","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","authReducer","roomsReducer","applyMiddleware","thunk","run","configureStore","jsx","es","react_router_dom","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa9605cb.chunk.js","sourcesContent":["import firebase from 'firebase'\nimport '@firebase/firestore' // 👈 Don't forget this!\nimport ReduxSagaFirebase from 'redux-saga-firebase'\nconst config = {\n\tapiKey: 'AIzaSyB2tCxT6yP0CWtCbD9JDj3ZKaxxW8T25PI',\n\tauthDomain: 'slacker-c3b01.firebaseapp.com',\n\tdatabaseURL: 'https://slacker-c3b01.firebaseio.com',\n\tprojectId: 'slacker-c3b01',\n\tstorageBucket: 'slacker-c3b01.appspot.com',\n\tmessagingSenderId: '286218247810',\n}\nconst firebaseApp = firebase.initializeApp(config)\nconst rsf = new ReduxSagaFirebase(firebaseApp)\nconst database = firebase.firestore() // const githubAuthProvider = new firebase.auth.GithubAuthProvider();\nexport { firebase, rsf, database as default }\n","import database, { firebase } from '../firebase/firebase'\n// import { history } from \"../routers/AppRouter\";\nimport moment from 'moment'\nimport * as path from 'path'\n// import { ipcRenderer } from 'electron';\n\nconst byCreatedAt = function(a: any, b: any) {\n\t// @ts-ignore\n\treturn new Date(a.createdAt) - new Date(b.createdAt)\n}\n\nexport interface RoomData {\n\tid?: string;\n\tname: string;\n\tpeople: any;\n\tmessages?: any;\n}\n\nexport const createRoom = ({ id, name, people, messages = [] }: RoomData) => ({\n\ttype: 'CREATE_ROOM',\n\troom: {\n\t\tid,\n\t\tname,\n\t\tpeople,\n\t\tmessages,\n\t},\n})\n\nexport const joinedRoom = (joinedRoom: RoomItem) => ({\n\ttype: 'JOINED_ROOM',\n\tjoinedRoom\n})\n\nexport const tryCreateRoom = (roomData: RoomData, showCreateError: any) => {\n\treturn (dispatch: any, getState: () => StoreState) => {\n\t\tconst room = {\n\t\t\tname: roomData.name,\n\t\t}\n\t\t// get all rooms\n\t\treturn database\n\t\t\t.collection('rooms')\n\t\t\t.get()\n\t\t\t.then(snapshot => {\n\t\t\t\tconst rooms: Room[] = []\n\t\t\t\tsnapshot.forEach(doc => {\n\t\t\t\t\tconsole.log(doc)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst room: Room = doc.data()\n\t\t\t\t\trooms.push({\n\t\t\t\t\t\t...room,\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t// if no room with this name\n\t\t\t\tif (!rooms.find(r => r.name === room.name)) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tdatabase\n\t\t\t\t\t\t\t.collection('rooms')\n\t\t\t\t\t\t\t.add(room)\n\t\t\t\t\t\t\t// create this room and\n\t\t\t\t\t\t\t.then(roomRef => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\tdatabase\n\t\t\t\t\t\t\t\t\t\t.collection(`rooms/${roomRef.id}/people`)\n\t\t\t\t\t\t\t\t\t\t.doc(roomData.people.id)\n\t\t\t\t\t\t\t\t\t\t// assign people to it?\n\t\t\t\t\t\t\t\t\t\t.set(roomData.people)\n\t\t\t\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t\t\t\tdatabase\n\t\t\t\t\t\t\t\t\t\t\t\t.collection(`users/${roomData.people.id}/rooms`)\n\t\t\t\t\t\t\t\t\t\t\t\t.doc(roomRef.id)\n\t\t\t\t\t\t\t\t\t\t\t\t.set({ roomName: room.name })\n\n\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\tcreateRoom({\n\t\t\t\t\t\t\t\t\t\t\t\t\tid: roomRef.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t...roomData,\n\t\t\t\t\t\t\t\t\t\t\t\t\tpeople: [roomData.people],\n\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tconst perName = roomData.people.name\n\t\t\t\t\t\t\t\t\t\t\t// dispatch(\n\t\t\t\t\t\t\t\t\t\t\t// \tstartSendMessage(\n\t\t\t\t\t\t\t\t\t\t\t// \t\t`${perName} created this room`,\n\t\t\t\t\t\t\t\t\t\t\t// \t\troom.name,\n\t\t\t\t\t\t\t\t\t\t\t// \t\ttrue,\n\t\t\t\t\t\t\t\t\t\t\t// \t),\n\t\t\t\t\t\t\t\t\t\t\t// ).then(() => {\n\t\t\t\t\t\t\t\t\t\t\t// \tdispatch(startListening(room.name))\n\t\t\t\t\t\t\t\t\t\t\t// \t// history.push(`/room/${room.name}`);\n\t\t\t\t\t\t\t\t\t\t\t// })\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\treturn showCreateError('Room name not available!')\n\t\t\t\t}\n\t\t\t})\n\t}\n}\n\nexport const startListening = (roomId: string) => {\n\treturn (dispatch: any, getState: () => StoreState) => {\n\t\treturn database\n\t\t\t.collection(`rooms/${roomId}/messages`)\n\t\t\t.onSnapshot(messagesQuery => {\n\t\t\t\tif (getState().rooms.joined.find(room => room.id === roomId)) {\n\t\t\t\t\tdatabase\n\t\t\t\t\t\t.collection(`rooms/${roomId}/people`)\n\t\t\t\t\t\t.get()\n\t\t\t\t\t\t.then(personQuery => {\n\t\t\t\t\t\t\tconst messages: any[] = []\n\t\t\t\t\t\t\tmessagesQuery.forEach(doc => {\n\t\t\t\t\t\t\t\tmessages.push({ id: doc.id, ...doc.data() })\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tconsole.log('listener -> ', { messages })\n\t\t\t\t\t\t\tmessages.sort(byCreatedAt)\n\t\t\t\t\t\t\treturn dispatch(updateMessages(messages, roomId))\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// dispatch(\n\t\t\t\t\t\t\t// \tsendMessage(\n\t\t\t\t\t\t\t// \t\t{\n\t\t\t\t\t\t\t// \t\t\t...message,\n\t\t\t\t\t\t\t// \t\t\tid: msgSnapshot ? msgSnapshot.key : 'nullSnap',\n\t\t\t\t\t\t\t// \t\t},\n\t\t\t\t\t\t\t// \t\troomName,\n\t\t\t\t\t\t\t// \t),\n\t\t\t\t\t\t\t// )\n\t\t\t\t\t\t\t// dispatch(orderRoomsStartState())\n\t\t\t\t\t\t\t// if (message.sender.displayName !== getState().auth.displayName) {\n\t\t\t\t\t\t\t// \t// ipcRenderer.send('playNotif', message.sender.displayName, message.text);\n\t\t\t\t\t\t\t// \tconst audio = new Audio('/sounds/notif.mp3')\n\t\t\t\t\t\t\t// \taudio.play()\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t// const keyword =\n\t\t\t\t\t\t\t// \tmessage.status && message.text.split(' ').splice(-1, 1)[0]\n\t\t\t\t\t\t\t// if (keyword === 'left') {\n\t\t\t\t\t\t\t// \tdispatch(onLeft(roomName, message.sender.uid))\n\t\t\t\t\t\t\t// } else if (keyword === 'joined') {\n\t\t\t\t\t\t\t// \tdispatch(\n\t\t\t\t\t\t\t// \t\tonJoined(roomName, personSnapshot.val()[message.sender.uid]),\n\t\t\t\t\t\t\t// \t)\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t// const personID = getState().auth.uid\n\n\t\t\t\t\t\t\t// if (personID === message.sender.uid && keyword !== 'left') {\n\t\t\t\t\t\t\t// \tdatabase\n\t\t\t\t\t\t\t// \t\t.ref(`rooms/${roomName}/people/${personID}`)\n\t\t\t\t\t\t\t// \t\t.update({ unread: 0, lastRead: message.createdAt })\n\t\t\t\t\t\t\t// \t\t.then(() => {\n\t\t\t\t\t\t\t// \t\t\tdispatch(\n\t\t\t\t\t\t\t// \t\t\t\tsetUnread(roomName, personID, message.createdAt, 0),\n\t\t\t\t\t\t\t// \t\t\t)\n\t\t\t\t\t\t\t// \t\t})\n\t\t\t\t\t\t\t// } else if (\n\t\t\t\t\t\t\t// \tpersonID !== message.sender.uid &&\n\t\t\t\t\t\t\t// \tmoment(message.createdAt) >\n\t\t\t\t\t\t\t// \t\tmoment(personSnapshot.val()[personID].lastRead)\n\t\t\t\t\t\t\t// ) {\n\t\t\t\t\t\t\t// \tdatabase\n\t\t\t\t\t\t\t// \t\t.ref(`rooms/${roomName}/people/${personID}`)\n\t\t\t\t\t\t\t// \t\t.update({\n\t\t\t\t\t\t\t// \t\t\tunread: personSnapshot.val()[personID].unread + 1,\n\t\t\t\t\t\t\t// \t\t\tlastRead: message.createdAt,\n\t\t\t\t\t\t\t// \t\t})\n\t\t\t\t\t\t\t// \t\t.then(() => {\n\t\t\t\t\t\t\t// \t\t\tdispatch(\n\t\t\t\t\t\t\t// \t\t\t\tsetUnread(\n\t\t\t\t\t\t\t// \t\t\t\t\troomName,\n\t\t\t\t\t\t\t// \t\t\t\t\tpersonID,\n\t\t\t\t\t\t\t// \t\t\t\t\tmessage.createdAt,\n\t\t\t\t\t\t\t// \t\t\t\t\tpersonSnapshot.val()[personID].unread + 1,\n\t\t\t\t\t\t\t// \t\t\t\t),\n\t\t\t\t\t\t\t// \t\t\t)\n\t\t\t\t\t\t\t// \t\t})\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t}\n}\n\nconst isAlreadyAdded = (data: any, id: string) => {\n\tfor (var key in data) {\n\t\tif (data[key].id === id) return true\n\t}\n\treturn false\n}\n\nexport const showError = (message: string) => ({\n\t\ttype: 'ERROR_MESSAGE',\n\t\tmessage\n})\n\nexport const tryJoinRoom = (roomId: string) => {\n\treturn (dispatch: any, getState: () => StoreState) => {\n\t\tconst auth = getState().auth\n\t\treturn database.doc(`rooms/${roomId}`).get().then(doc => {\n\t\t\tconst room = <Optional<RoomItem>>doc.data()\n\t\t\tif (!room || !doc.exists) {\n\t\t\t\treturn dispatch(showError('Room not found!'))\n\t\t\t} else if (room.people && room.people.find(person => person.id === auth.uid)) {\n\t\t\t\t// if we are already in this room then\n\t\t\t\t// history.push(`room/${data.roomName}`);\n\t\t\t} else {\n\t\t\t\tdispatch(startListening(roomId))\n\t\t\t\tconst person = {\n\t\t\t\t\tname: auth.displayName || 'Error',\n\t\t\t\t\tid: auth.uid || 'Error',\n\t\t\t\t\tunread: 0,\n\t\t\t\t\tlastRead: 0,\n\t\t\t\t}\n\t\t\t\t// let people: any[] = []\n\t\t\t\t// let messages: any[] = []\n\t\t\t\t// for (var key in room.people) {\n\t\t\t\t// \tpeople.push({\n\t\t\t\t// \t\tid: room.people[key].id,\n\t\t\t\t// \t\tname: room.people[key].name,\n\t\t\t\t// \t\tunread: room.people[key].unread,\n\t\t\t\t// \t\tlastRead: room.people[key].lastRead,\n\t\t\t\t// \t})\n\t\t\t\t// }\n\t\t\t\t// for (var key in room.messages) {\n\t\t\t\t// \tmessages.push({\n\t\t\t\t// \t\t...room.messages[key],\n\t\t\t\t// \t})\n\t\t\t\t// }\n\t\t\t\treturn database\n\t\t\t\t\t.doc(`rooms/${roomId}/people/${person.id}`)\n\t\t\t\t\t.set(person)\n\t\t\t\t\t.then(ref => {\n\t\t\t\t\t\tdatabase\n\t\t\t\t\t\t\t.doc(`users/${person.id}/rooms/${roomId}`)\n\t\t\t\t\t\t\t.set({ roomName: room.name })\n\n\t\t\t\t\t\tconst updatedRoom: RoomItem = {\n\t\t\t\t\t\t\tid: room.id,\n\t\t\t\t\t\t\tname: room.name,\n\t\t\t\t\t\t\tpeople: [...room.people, person],\n\t\t\t\t\t\t\tmessages: room.messages\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\tjoinedRoom(updatedRoom),\n\t\t\t\t\t\t)\n\t\t\t\t\t\t//const perName = person.name\n\n\t\t\t\t\t\t// dispatch(startSendMessage(`${perName} joined`, data.roomName, true))\n\n\t\t\t\t\t\t// history.push(`room/${data.roomName}`);\n\t\t\t\t\t})\n\t\t\t}\n\t\t})\n\t}\n}\n\nexport const sendMessage = (message: any, roomName: string) => ({\n\ttype: 'SEND_MESSAGE',\n\tmessage,\n\troomName,\n})\n\nexport const updateMessages = (messages: any, roomId: string) => ({\n\ttype: 'UPDATE_MESSAGES',\n\tmessages,\n\troomId,\n})\n\nexport const trySendMessage = (\n\ttext: string,\n\troomId: string,\n\tstatus: boolean = false,\n) => {\n\treturn (dispatch: any, getState: any) => {\n\t\tconst user = getState().auth\n\t\tif (user) {\n\t\t\tconst uid = user.uid\n\t\t\tconst displayName = user.displayName\n\t\t\tconst message = {\n\t\t\t\tsender: { uid, displayName },\n\t\t\t\ttext,\n\t\t\t\tcreatedAt: moment().format(),\n\t\t\t\tstatus,\n\t\t\t}\n\t\t\treturn database.collection(`rooms/${roomId}/messages`).add(message)\n\t\t}\n\t}\n}\n\nexport const orderRoomsStartState = () => ({\n\ttype: 'ORDER_ROOMS_START_STATE',\n})\n\nexport const availableRooms = (rooms: RoomItem[]) => ({\n\ttype: 'AVAILABLE_ROOMS',\n\trooms\n})\n\nexport const initSlacker = () => ({\n\ttype: 'INIT_SLACKER_SAGA'\n})\n\nexport const clearState = {\n\ttype: 'CLEAR_STATE',\n}\n\nexport const leaveRoom = (roomName: string, userId: string) => ({\n\ttype: 'LEAVE_ROOM',\n\troomName,\n\tuserId,\n})\n\n// export const startLeaveRoom = (roomName: string) => {\n// \treturn (dispatch: any, getState: any) => {\n// \t\tconst user = getState().auth\n// \t\tif (user) {\n// \t\t\tconst userId = user.uid\n// \t\t\tconst displayName = user.displayName\n// \t\t\tdatabase.ref(`rooms/${roomName}/people/${userId}`).remove()\n// \t\t\tdatabase.ref(`users/${userId}/rooms/${roomName}`).remove(() => {\n// \t\t\t\tdispatch(leaveRoom(roomName, userId))\n// \t\t\t\tdispatch(startSendMessage(`${displayName} left`, roomName, true))\n// \t\t\t\t// history.push(\"/join\");\n// \t\t\t})\n// \t\t}\n// \t}\n// }\n\nexport const clearUnread = (\n\troomName: string,\n\tuid: string,\n\ttime: any,\n\tunread: number,\n) => ({\n\ttype: 'CLEAR_UNREAD',\n\troomName,\n\tuid,\n\ttime,\n\tunread,\n})\n\nexport const setUnread = (\n\troomName: string,\n\tuid: string,\n\ttime: any,\n\tunread: number,\n) => {\n\treturn (dispatch: any) => {\n\t\tdispatch(clearUnread(roomName, uid, time, unread))\n\t}\n}\n\n// export const startClearUnread = (roomName: string) => {\n// \treturn (dispatch: any, getState: any) => {\n// \t\t// let time = moment().endOf(\"month\");\n// \t\tconst uid = getState().auth.uid\n// \t\tif (uid) {\n// \t\t\tconst time = moment().format()\n// \t\t\treturn database\n// \t\t\t\t.ref(`rooms/${roomName}/people/${uid}`)\n// \t\t\t\t.update({\n// \t\t\t\t\tunread: 0,\n// \t\t\t\t\tlastRead: time,\n// \t\t\t\t})\n// \t\t\t\t.then(() => {\n// \t\t\t\t\tdispatch(clearUnread(roomName, uid, time, 0))\n// \t\t\t\t})\n// \t\t}\n// \t}\n// }\n\nexport const onLeft = (roomName: string, personID: string) => ({\n\ttype: 'ON_LEFT',\n\troomName,\n\tpersonID,\n})\n\nexport const onJoined = (roomName: string, person: any) => ({\n\ttype: 'ON_JOINED',\n\troomName,\n\tperson,\n})\n\n\nexport const syncMessages = (messagesSnapshot: any, roomId: string) => {\n\tconst messages: any[] = []\n\tmessagesSnapshot.forEach((doc: any) => {\n\t\tmessages.push({ id: doc.id, ...doc.data() })\n\t})\n\tconsole.log('saga message listener -> ', { messages })\n\tmessages.sort(byCreatedAt)\n\treturn updateMessages(messages, roomId)\n}\n","import React, { Fragment, Component } from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Layout, Typography, Spin } from 'antd'\n\nimport { trySendMessage } from '../actions/rooms'\n\nconst { Header, Content } = Layout\nconst { Title } = Typography\n\nconst ChatWrapper = styled.div`\n\theight: 100%;\n\tpadding: 24;\n\tdisplay: flex;\n\tflex-direction: column;\n\tbackground: '#fff';\n`\n\nconst LoadingWrapper = styled.div`\n\theight: 100%;\n\tpadding: 24;\n\tdisplay: flex;\n\tflex-direction: column;\n\tbackground: '#fff';\n\tjustify-content: center;\n\talign-items: center;\n`\n\nconst Messages = styled.div`\n\tflex-grow: 1;\n\toverflow: scroll;\n`\n\nconst Message = styled.div`\n\tdisplay: flex;\n\tmin-height: 40px;\n\tborder-bottom: 1px solid grey;\n`\n\nconst InputForm = styled.form`\n\theight: 50px;\n\tbackground-color: #fff;\n\tborder-radius: 4px;\n\tdisplay: flex;\n\tflex-direction: row;\n\tflex-shrink: 0;\n\tmargin-top: 10px;\n`\n\nconst Input = styled.input`\n\tpadding-left: 14px;\n\tborder: none;\n\tborder-radius: 4px;\n\tflex-grow: 1;\n`\n\nconst SendButton = styled.button`\n\tflex-shrink: 0;\n`\n\ninterface Props {\n\tauth: Auth;\n\troom: RoomItem | { id: null, name: string, messages: any[] };\n\tisLoading: boolean;\n\tmessages: any[];\n\ttrySendMessage: (text: string, roomId: string, status?: boolean) => void;\n}\n\nclass RoomContainer extends Component<Props> {\n\tstate = {\n\t\tmessageValue: '',\n\t}\n\n\tmessagesEnd: any = null\n\n\thandleTyping = (e: any) => {\n\t\tthis.setState({ messageValue: e.target.value })\n\t}\n\n\tscrollToBottom = () => {\n\t\tif (this.messagesEnd) {\n\t\t\tthis.messagesEnd.scrollIntoView({ behavior: 'auto' })\n\t\t}\n\t}\n\n\thandleSend = (e: any) => {\n\t\te.preventDefault()\n\t\tconst { room } = this.props\n\t\tif (!!room.id) {\n\t\t\tconst text = this.state.messageValue\n\t\t\tthis.props.trySendMessage(text, room.id)\n\t\t\tthis.setState({\n\t\t\t\tmessageValue: '',\n\t\t\t})\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps: Props) {\n\t\tif (prevProps.messages.length === 0 && this.props.messages.length > 0) {\n\t\t\tthis.scrollToBottom()\n\t\t\treturn\n\t\t}\n\n\t\tif (\n\t\t\tprevProps.messages.length !== this.props.messages.length &&\n\t\t\tprevProps.messages.length > 0 &&\n\t\t\tthis.props.messages.length > 0\n\t\t) {\n\t\t\tconst previousLastMessage = prevProps.messages.slice(-1)[0]\n\t\t\tconst currentLastMessage = this.props.messages.slice(-1)[0]\n\t\t\tif (\n\t\t\t\tpreviousLastMessage.id !== currentLastMessage.id &&\n\t\t\t\t!!currentLastMessage &&\n\t\t\t\tcurrentLastMessage.sender.uid === this.props.auth.uid\n\t\t\t) {\n\t\t\t\t// last message was ours, scroll to the bottom\n\t\t\t\tthis.scrollToBottom()\n\t\t\t}\n\t\t}\n\n\t\t// check last message, if its mine, scroll to bottom?\n\t}\n\n\trender() {\n\t\tconst { room, messages, isLoading } = this.props\n\t\t// console.log(messages)\n\t\tlet content = (\n\t\t\t<LoadingWrapper>\n\t\t\t\t<Spin size=\"large\" />\n\t\t\t</LoadingWrapper>\n\t\t)\n\t\tif (!isLoading) {\n\t\t\tcontent = (\n\t\t\t\t<ChatWrapper>\n\t\t\t\t\t<Messages>\n\t\t\t\t\t\t{messages.map(message => (\n\t\t\t\t\t\t\t<Message key={message.id}>{message.text}</Message>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ float: 'left', clear: 'both' }}\n\t\t\t\t\t\t\tref={el => {\n\t\t\t\t\t\t\t\tthis.messagesEnd = el\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Messages>\n\t\t\t\t\t<InputForm onSubmit={this.handleSend}>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tvalue={this.state.messageValue}\n\t\t\t\t\t\t\tonChange={this.handleTyping}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<SendButton type={'submit'}>Send</SendButton>\n\t\t\t\t\t</InputForm>\n\t\t\t\t</ChatWrapper>\n\t\t\t)\n\t\t}\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<Header\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackground: '#fff',\n\t\t\t\t\t\tpadding: 16,\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\tflexRirection: 'row',\n\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Title style={{ margin: 0 }} level={3}>\n\t\t\t\t\t\t{room.name}\n\t\t\t\t\t</Title>\n\t\t\t\t</Header>\n\t\t\t\t<Content\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tmargin: '24px 16px',\n\t\t\t\t\t\toverflow: 'initial',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{content}\n\t\t\t\t</Content>\n\t\t\t</Fragment>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: StoreState, ownProps: any) => {\n\tconst { roomId } = ownProps.match.params\n\tconst room = state.rooms.joined.find(room => room.id === roomId)\n\tconst messages = room ? room.messages : []\n\treturn {\n\t\tauth: state.auth,\n\t\troom: room || { id: null, name: '', messages: [] },\n\t\tmessages,\n\t\tisLoading: !room,\n\t}\n}\n\nexport default connect(\n\tmapStateToProps,\n\t{ trySendMessage },\n)(RoomContainer)\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { connect } from 'react-redux'\nimport { Modal, Input, Typography } from 'antd'\nimport { tryCreateRoom, RoomData } from '../actions/rooms'\n\nconst { TextArea } = Input\nconst { Text } = Typography\n\nconst TextWrap = styled.div`\n\tmargin-top: 5px;\n\tmargin-bottom: 5px;\n`\n\ninterface Props {\n\tisOpen: boolean;\n\thandleClose: () => void;\n\ttryCreateRoom: (roomData: RoomData, showCreateError?: any) => Promise<any>;\n\tauth: Auth;\n}\n\ninterface State {\n\troomName: string;\n\tdescription: string;\n}\n\nclass CreateChatDialog extends Component<Props, State> {\n\tstate = {\n\t\troomName: '',\n\t\tdescription: '',\n\t}\n\n\thandleChange = (e: any) => {\n\t\tconsole.log(e.target.name)\n\t\t// @ts-ignore\n\t\tthis.setState({\n\t\t\t[e.target.name]: e.target.value,\n\t\t})\n\t}\n\n\thandleSubmit = () => {\n\t\tconst { uid, displayName: userDisplayName } = this.props.auth\n\t\tif (uid) {\n\t\t\tconsole.log('Create this room pls')\n\t\t\tconst roomName = this.state.roomName\n\t\t\tif (roomName && roomName.length > 0) {\n\t\t\t\t// this.setState({ error: '' })\n\t\t\t\tconst room = {\n\t\t\t\t\tname: roomName,\n\t\t\t\t\tpeople: {\n\t\t\t\t\t\tid: uid,\n\t\t\t\t\t\tname: userDisplayName,\n\t\t\t\t\t\tunread: 0,\n\t\t\t\t\t\tlastRead: 0,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tthis.props.tryCreateRoom(room)\n\t\t\t\tthis.props.handleClose()\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Modal\n\t\t\t\ttitle=\"Create Room\"\n\t\t\t\tvisible={this.props.isOpen}\n\t\t\t\tonOk={this.handleSubmit}\n\t\t\t\tonCancel={this.props.handleClose}\n\t\t\t\tokButtonProps={{ disabled: !this.props.auth.uid }}\n\t\t\t\tcancelButtonProps={{ disabled: !this.props.auth.uid }}\n\t\t\t>\n\t\t\t\t<TextWrap>\n\t\t\t\t\t<Text>Name:</Text>\n\t\t\t\t</TextWrap>\n\t\t\t\t<Input\n\t\t\t\t\tname=\"roomName\"\n\t\t\t\t\tvalue={this.state.roomName}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t\t<TextWrap>\n\t\t\t\t\t<Text>Description:</Text>\n\t\t\t\t</TextWrap>\n\t\t\t\t<TextArea\n\t\t\t\t\tname=\"description\"\n\t\t\t\t\tvalue={this.state.description}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\trows={4}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: any) => ({\n\tauth: state.auth,\n})\n\nexport default connect(\n\tmapStateToProps,\n\t{ tryCreateRoom },\n)(CreateChatDialog)\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { connect } from 'react-redux'\nimport { Layout, Menu, Button, Typography } from 'antd'\nimport RoomContainer from './RoomContainer'\nimport CreateChatDialog from './CreateChatDialog'\nimport { tryLogin } from '../actions/auth'\nimport { initSlacker } from '../actions/rooms'\nimport '../styles/index.css'\n\nconst { Sider } = Layout\n// const { Text } = Typography\n\nconst ButtonWrap = styled.div`\n\ttext-align: center;\n\tpadding: 15px;\n`\n\nconst MenuLabel = styled.button`\n\tpadding-left: 10px;\n\tcolor: rgba(255, 255, 255, 0.65);\n\tbackground: none;\n\tborder: none;\n\ttransition: color 1s;\n\tcursor: pointer;\n\t&:hover {\n\t\tcolor: #fff;\n\t}\n`\n\ninterface Props {\n\ttryLogin: () => void;\n\tinitSlacker: () => void;\n\tauth: Auth;\n\trooms: {\n\t\tjoined: RoomItem[],\n\t\tavailable: RoomItem[],\n\t}\n\thistory: any;\n\tlocation: {\n\t\tpathname: any,\n\t};\n}\n\ninterface State {\n\tisCreateRoomDialogOpen: boolean;\n}\n\nclass App extends Component<Props> {\n\tstate = {\n\t\tisCreateRoomDialogOpen: false,\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.tryLogin()\n\t}\n\n\tcomponentWillUpdate(nextProps: Props) {\n\t\tif (!this.props.auth.uid && nextProps.auth.uid) {\n\t\t\tthis.props.initSlacker()\n\t\t}\n\t}\n\n\thandleCloseCreateChatDialog = () => {\n\t\tthis.setState({\n\t\t\tisCreateRoomDialogOpen: false,\n\t\t})\n\t}\n\n\thandleOpenCreateChatDialog = () => {\n\t\tthis.setState({\n\t\t\tisCreateRoomDialogOpen: true,\n\t\t})\n\t}\n\n\thandleRoomSelect = ({ key }: { key: string }) => {\n\t\tthis.props.history.push(key)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Layout style={{ height: '100%' }}>\n\t\t\t\t<Sider\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\toverflow: 'auto',\n\t\t\t\t\t\theight: '100vh',\n\t\t\t\t\t\tposition: 'fixed',\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<ButtonWrap>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ticon=\"plus\"\n\t\t\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\t\t\tonClick={this.handleOpenCreateChatDialog}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCreate room\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</ButtonWrap>\n\t\t\t\t\t<CreateChatDialog\n\t\t\t\t\t\tisOpen={this.state.isCreateRoomDialogOpen}\n\t\t\t\t\t\thandleClose={this.handleCloseCreateChatDialog}\n\t\t\t\t\t/>\n\t\t\t\t\t<MenuLabel>\n\t\t\t\t\t\t<span>Rooms:</span>\n\t\t\t\t\t</MenuLabel>\n\t\t\t\t\t<Menu\n\t\t\t\t\t\ttheme=\"dark\"\n\t\t\t\t\t\tmode=\"inline\"\n\t\t\t\t\t\tonSelect={this.handleRoomSelect}\n\t\t\t\t\t\tdefaultSelectedKeys={[this.props.location.pathname]}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.props.rooms.joined.map(room => (\n\t\t\t\t\t\t\t<Menu.Item key={`/r/${room.id}`}>\n\t\t\t\t\t\t\t\t<span className=\"nav-text\"># {room.name}</span>\n\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Menu>\n\t\t\t\t</Sider>\n\t\t\t\t<Layout style={{ marginLeft: 200 }}>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path={'/r/:roomId'} component={RoomContainer} />\n\t\t\t\t\t\t<Route path={'/'}>\n\t\t\t\t\t\t\t<div>No chat selected</div>\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</Layout>\n\t\t\t</Layout>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n\tauth: state.auth,\n\trooms: state.rooms,\n})\n\nexport default connect(\n\tmapStateToProps,\n\t{ tryLogin, initSlacker },\n)(App)\n","import { firebase } from \"../firebase/firebase\";\n\nexport const loginSuccess = (uid: string, displayName: string) => ({\n  type: \"LOGIN\",\n  uid,\n  displayName\n});\n\nexport const tryLogin = () => {\n  return (dispatch: any) => {\n    return firebase\n      .auth()\n      .signInAnonymously()\n      .then(response => {\n        // console.log(response);\n        const { user } = response;\n\n        if (user) {\n          const displayName = user.displayName || \"Ninja\";\n          return dispatch(loginSuccess(user.uid, displayName));\n        }\n      })\n      .catch(function(error) {\n        console.log({ error });\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        // ...\n      });\n  };\n};\n\nexport const logout = () => ({\n  type: \"LOGOUT\"\n});\n\nexport const tryLogout = () => {\n  return () => {\n    return firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        console.log(\"log out!!!\");\n      });\n  };\n};\n","export default (state = {}, action: any) => {\n  switch (action.type) {\n    case \"LOGIN\":\n      return {\n        uid: action.uid,\n        displayName: action.displayName\n      };\n    case \"LOGOUT\":\n      return {};\n    default:\n      return state;\n  }\n};\n","import moment from 'moment'\n\ninterface RoomsState {\n\tjoined: Room[];\n\tavailable: Room[];\n}\n\nconst defaultState: RoomsState = {\n\tjoined: [],\n\tavailable: [],\n}\n\nexport default (state: RoomsState = defaultState, action: any) => {\n\tswitch (action.type) {\n\t\tcase 'CREATE_ROOM':\n\t\t\treturn { ...state, joined: [...state.joined, action.room] }\n\t\tcase 'JOIN_ROOM':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tjoined: [...state.joined, action.room],\n\t\t\t}\n\n\t\tcase 'AVAILABLE_ROOMS':\n\t\t\treturn { ...state, available: action.rooms }\n\n\t\t// case 'ON_LEFT':\n\t\t// \t// console.log('onleft');\n\n\t\t// \treturn state.map(room => {\n\t\t// \t\t// console.log(room);\n\t\t// \t\tif (room.name === action.roomName) {\n\t\t// \t\t\tconst p = room.people.filter((person: Person) => {\n\t\t// \t\t\t\treturn person.id !== action.personID\n\t\t// \t\t\t})\n\t\t// \t\t\t// console.log(p);\n\t\t// \t\t\treturn {\n\t\t// \t\t\t\t...room,\n\t\t// \t\t\t\tpeople: p,\n\t\t// \t\t\t}\n\t\t// \t\t} else {\n\t\t// \t\t\treturn room\n\t\t// \t\t}\n\t\t// \t})\n\n\t\t// case 'ON_JOINED':\n\t\t// \treturn state.map(room => {\n\t\t// \t\tif (room.name === action.roomName) {\n\t\t// \t\t\troom.people.push(action.person)\n\t\t// \t\t\treturn room\n\t\t// \t\t} else {\n\t\t// \t\t\treturn room\n\t\t// \t\t}\n\t\t// \t})\n\n\t\tcase 'SEND_MESSAGE':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tjoined: state.joined.map(room => {\n\t\t\t\t\tif (room.name === action.roomName) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...room,\n\t\t\t\t\t\t\tmessages: [...room.messages, action.message],\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn room\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t}\n\t\tcase 'UPDATE_MESSAGES':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tjoined: state.joined.map(room => {\n\t\t\t\t\tif (room.id === action.roomId) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...room,\n\t\t\t\t\t\t\tmessages: [...action.messages],\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn room\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t}\n\t\t// case 'REORDER_ROOMS':\n\t\t//   let room;\n\t\t//   let rooms = state.filter((r) => {\n\t\t//     if(r.name === action.roomName) {\n\t\t//       room = r;\n\t\t//       return false;\n\t\t//     }\n\t\t//     else {\n\t\t//       return true;\n\t\t//     }\n\t\t//   });\n\t\t//   rooms.unshift(room);\n\t\t//   return rooms;\n\t\t// case 'ORDER_ROOMS_START_STATE':\n\t\t// \t//  const x =  action.rooms.sort((a, b) => {\n\t\t// \t//   //  console.log('a', a);\n\t\t// \t//   //  console.log('b', b);\n\t\t// \t//   if(a.messages.length > 0 && b.messages.length > 0) {\n\t\t// \t//     console.log(typeof a.messages);\n\n\t\t// \t//     return moment(a.messages[a.messages.length-1].createdAt) > moment(b.messages[b.messages.length-1].createdAt)\n\t\t// \t//     // {\n\t\t// \t//   //     return -1;\n\t\t// \t//   //   } else {\n\t\t// \t//   //     return 1;\n\t\t// \t//   //   }\n\t\t// \t//   // }\n\t\t// \t//   // else {\n\t\t// \t//   //   return -1;\n\t\t// \t//   }\n\t\t// \t// });\n\t\t// \t// console.log(typeof x)\n\t\t// \t// console.log(x);\n\t\t// \t// return x;\n\t\t// \tstate.sort((a: any, b: any) => {\n\t\t// \t\treturn moment(a.messages[a.messages.length - 1].createdAt) <\n\t\t// \t\t\tmoment(b.messages[b.messages.length - 1].createdAt)\n\t\t// \t\t\t? 1\n\t\t// \t\t\t: -1\n\t\t// \t})\n\t\t// \t// console.log(state);\n\t\t// \treturn state.map(room => room)\n\n\t\t// case 'CLEAR_UNREAD':\n\t\t// \treturn state.map(room => {\n\t\t// \t\tif (room.name === action.roomName) {\n\t\t// \t\t\tconst people = room.people.map((person: Person) => {\n\t\t// \t\t\t\tif (person.id === action.uid) {\n\t\t// \t\t\t\t\treturn {\n\t\t// \t\t\t\t\t\t...person,\n\t\t// \t\t\t\t\t\tunread: action.unread,\n\t\t// \t\t\t\t\t\tlastRead: action.time,\n\t\t// \t\t\t\t\t}\n\t\t// \t\t\t\t} else {\n\t\t// \t\t\t\t\treturn person\n\t\t// \t\t\t\t}\n\t\t// \t\t\t})\n\t\t// \t\t\treturn { ...room, people }\n\t\t// \t\t} else {\n\t\t// \t\t\treturn room\n\t\t// \t\t}\n\t\t// \t})\n\n\t\t// case 'LEAVE_ROOM':\n\t\t// \treturn state.filter(room => {\n\t\t// \t\treturn room.name !== action.roomName\n\t\t// \t})\n\t\t// case 'CLEAR_STATE':\n\t\t// \treturn []\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","import { put, select, takeLatest, fork, call } from 'redux-saga/effects'\nimport database, { firebase, rsf } from '../firebase/firebase'\nimport { availableRooms, createRoom, syncMessages } from '../actions/rooms'\n\nconst byCreatedAt = function(a: any, b: any) {\n\t// @ts-ignore\n\treturn new Date(a.createdAt) - new Date(b.createdAt)\n}\n\nfunction* fetchJoinedRoom(roomId: string) {\n\tconsole.log('try fetch room ', roomId)\n\t// fetch joined room from firestore\n\tconst roomRef = database.collection('rooms').doc(roomId)\n\tconst roomDoc = yield call(rsf.firestore.getDocument, roomRef)\n\n\t// if we have such room\n\tif (roomDoc.exists) {\n\t\tconst room = roomDoc.data()\n\t\tconst people: any[] = []\n\t\tconst messages: any[] = []\n\n\t\t// get room's people\n\t\tconst peopleQuery = yield call(\n\t\t\trsf.firestore.getCollection,\n\t\t\troomRef.collection('people'),\n\t\t)\n\t\tpeopleQuery.forEach((peopleDoc: any) => {\n\t\t\tpeople.push({ id: peopleDoc.id, ...peopleDoc.data() })\n\t\t})\n\t\tconsole.log({ people })\n\n\t\t// get room's people\n\t\tconst messagesQuery = yield call(\n\t\t\trsf.firestore.getCollection,\n\t\t\troomRef.collection('messages'),\n\t\t)\n\t\tmessagesQuery.forEach((messageDoc: any) => {\n\t\t\tmessages.push({\n\t\t\t\tid: messageDoc.id,\n\t\t\t\t...messageDoc.data(),\n\t\t\t})\n\t\t})\n\t\tmessages.sort(byCreatedAt)\n\t\tconsole.log({ messages })\n\n\t\tyield put(\n\t\t\tcreateRoom({\n\t\t\t\tid: roomRef.id,\n\t\t\t\tname: room ? room.name : 'Error',\n\t\t\t\tpeople,\n\t\t\t\tmessages,\n\t\t\t}),\n\t\t)\n\n\t\t// subscribe to messages\n\t\tyield fork(rsf.firestore.syncCollection, roomRef.collection('messages'), {\n\t\t\tsuccessActionCreator: (snapshot: any) => syncMessages(snapshot, roomId),\n\t\t})\n\t}\n}\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* initSlacker(action: any) {\n\tconst auth = yield select(state => state.auth)\n\n\tif (!auth.uid) {\n\t\tconsole.log('no auth!')\n\t\treturn\n\t}\n\n\t// fetch all rooms\n\tconst roomsPromise = database.collection('rooms').get()\n\n\tconst roomsQuery: firebase.firestore.QuerySnapshot = yield roomsPromise\n\tconst rooms: RoomItem[] = []\n\troomsQuery.forEach(doc => {\n\t\tconst room = {\n\t\t\tid: doc.id,\n\t\t\t...doc.data(),\n\t\t}\n\t\t// @ts-ignore\n\t\trooms.push(room)\n\t})\n\n\tyield put(availableRooms(rooms))\n\tconst generalRoom = rooms.find(room => room.name === 'general')\n\n\t// get user rooms\n\tconst userRoomsQuery = yield call(\n\t\trsf.firestore.getCollection,\n\t\t`users/${auth.uid}/rooms`,\n\t)\n\n\tif (!userRoomsQuery.empty) {\n\t\tconst userRoomIds: string[] = []\n\t\tuserRoomsQuery.forEach((userRoomDoc: any) =>\n\t\t\tuserRoomIds.push(userRoomDoc.id),\n\t\t)\n\n\t\t// fetch each joined room\n\t\tfor (let roomId of userRoomIds) {\n\t\t\tconst task = yield fork(fetchJoinedRoom, roomId)\n\t\t}\n\n\t\t// if no general room, join that as well\n\t\tif(generalRoom && !userRoomIds.includes(generalRoom.id)) {\n\t\t\tyield put({\n\t\t\t\ttype: 'JOIN_ROOM_SAGA',\n\t\t\t\troomId: generalRoom.id,\n\t\t\t\troom: generalRoom,\n\t\t\t})\n\t\t}\n\t} else {\n\t\tif (generalRoom) {\n\t\t\tyield put({\n\t\t\t\ttype: 'JOIN_ROOM_SAGA',\n\t\t\t\troomId: generalRoom.id,\n\t\t\t\troom: generalRoom,\n\t\t\t})\n\t\t}\n\t}\n}\n\nfunction* mySaga() {\n\tyield takeLatest('INIT_SLACKER_SAGA', initSlacker)\n}\n\nexport default mySaga\n","import { put, select, takeEvery, fork, call } from 'redux-saga/effects'\nimport { AnyAction } from 'redux'\nimport database, { firebase, rsf } from '../firebase/firebase'\nimport {\n\tavailableRooms,\n\tcreateRoom,\n\tupdateMessages,\n\tjoinedRoom,\n\tshowError,\n\tsyncMessages,\n} from '../actions/rooms'\n\nconst byCreatedAt = function(a: any, b: any) {\n\t// @ts-ignore\n\treturn new Date(a.createdAt) - new Date(b.createdAt)\n}\n\nfunction* joinRoom(action: AnyAction) {\n\tconst { roomId } = action\n\tconst { uid, displayName } = yield select(state => state.auth)\n\tconst roomRef = database.doc(`rooms/${roomId}`)\n\n\tconst roomDoc = yield call(rsf.firestore.getDocument, roomRef)\n\tconst room = <RoomItem>{ id: roomDoc.id, ...roomDoc.data() }\n\n\tif (!room || !roomDoc.exists) {\n\t\tyield put(showError('Room not found!'))\n\t\treturn\n\t} else if (\n\t\troom.people &&\n\t\troom.people.find((person: Person) => person.id === uid)\n\t) {\n\t\t// if we are already in this room then\n\t\t// history.push(`room/${data.roomName}`);\n\t\t// return i guess ?\n\t\treturn\n\t} else {\n\t\t// we should add ourselves to this room\n\n\t\t// subscribe to messages in separate fork\n\t\tyield fork(rsf.firestore.syncCollection, roomRef.collection('messages'), {\n\t\t\tsuccessActionCreator: (snapshot: any) => syncMessages(snapshot, roomId),\n\t\t})\n\n\t\tconst person = {\n\t\t\tname: displayName || 'Error',\n\t\t\tid: uid || 'Error',\n\t\t\tunread: 0,\n\t\t\tlastRead: 0,\n\t\t}\n\n\t\t// TODO figure wtf is wrong here\n\t\tyield call(\n\t\t\t// @ts-ignore\n\t\t\trsf.firestore.setDocument,\n\t\t\t`rooms/${roomId}/people/${person.id}`,\n\t\t\tperson,\n\t\t)\n\n\t\tyield call(\n\t\t\t// @ts-ignore\n\t\t\trsf.firestore.setDocument,\n\t\t\t`users/${person.id}/rooms/${roomId}`,\n\t\t\t{ roomName: room.name },\n\t\t)\n\n\t\tconsole.log(room)\n\t\tconsole.log('oops that aint gonna work')\n\n\t\t// TODO get people and messages here\n\n\t\tconst roomWithPerson: RoomItem = {\n\t\t\tid: room.id,\n\t\t\tname: room.name,\n\t\t\tpeople: [person],\n\t\t\tmessages: room.messages || [],\n\t\t}\n\n\t\tyield put(joinedRoom(roomWithPerson))\n\t}\n}\n\nfunction* joinRoomSaga() {\n\tyield takeEvery('JOIN_ROOM_SAGA', joinRoom)\n}\n\nexport default joinRoomSaga\n","import { all } from 'redux-saga/effects'\nimport initSaga from './initSaga'\nimport joinRoomSaga from './joinRoomSaga'\n\nexport default function* rootSaga() {\n\tyield all([initSaga(), joinRoomSaga()])\n}\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport createSagaMiddleware from 'redux-saga'\nimport authReducer from '../reducers/auth'\nimport roomsReducer from '../reducers/rooms'\n\nimport mySaga from '../sagas/rootSaga'\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware()\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nexport default () => {\n\tconst store = createStore(\n\t\tcombineReducers({\n\t\t\tauth: authReducer,\n\t\t\trooms: roomsReducer,\n\t\t}),\n\t\tcomposeEnhancers(applyMiddleware(thunk, sagaMiddleware)),\n  )\n  \n  sagaMiddleware.run(mySaga)\n\n\treturn store\n}\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { HashRouter as Router, Route } from 'react-router-dom'\nimport ReactDOM from 'react-dom'\nimport 'antd/dist/antd.css'\n\nimport App from './components/App'\nimport configureStore from './store/configureStore'\n\nconst store = configureStore()\nconst jsx = (\n\t<Provider store={store}>\n\t\t<Router>\n\t\t\t<Route path={'/'} component={App} />\n\t\t</Router>\n\t</Provider>\n)\n\nReactDOM.render(jsx, document.getElementById('container'))\n"],"sourceRoot":""}