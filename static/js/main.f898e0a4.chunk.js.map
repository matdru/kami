{"version":3,"sources":["components/LoadingSpinner.tsx","components/Message.tsx","firebase/firebase.ts","constants/ActionTypes.ts","actions/rooms.ts","components/ChatInput.tsx","actions/auth.ts","components/ProfileDialog.tsx","containers/AppHeader.tsx","utils/misc.ts","selectors/room.ts","containers/Room.tsx","components/CreateChatDialog.tsx","components/BrowseRoomsDialog.tsx","containers/App.tsx","reducers/rooms.ts","reducers/index.ts","reducers/auth.ts","reducers/redirect.ts","sagas/roomSagas.ts","sagas/initSaga.ts","sagas/rootSaga.ts","store/configureStore.ts","index.tsx"],"names":["LoadingWrapper","styled","div","LoadingSpinner","size","MessageLayout","LeftPanel","RightPanel","MessageHeader","Message","children","name","isConsecutive","shape","icon","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","rsf","ReduxSagaFirebase","database","firestore","githubAuthProvider","auth","GithubAuthProvider","googleAuthProvider","GoogleAuthProvider","UPDATE_ROOM_PRESENCES","JOIN_ROOM_SAGA","INIT_SLACKER_SAGA","byCreatedAt","a","b","Date","createdAt","getTime","updateRoom","id","people","messages","type","room","canFetchMore","messageCount","showError","message","trySendMessage","text","roomId","status","dispatch","getState","user","sender","uid","displayName","moment","format","collection","add","availableRooms","rooms","syncMessages","messagesSnapshot","forEach","doc","push","data","sort","updateMessages","InputForm","form","Input","input","SendButton","button","ChatInput","state","value","handleTyping","e","setState","target","handleSend","preventDefault","props","length","onSubmit","this","onChange","Component","connect","loginError","error","tryLoginAnonymously","signInAnonymously","then","catch","console","log","Title","Typography","LoginProviders","ProfileDialog","handleTryLogin","providerName","tryLoginProvider","handleClose","title","visible","isOpen","onOk","onCancel","okButtonProps","disabled","cancelButtonProps","level","span","onClick","style","margin","fontSize","provider","Promise","reject","signInWithPopup","response","Header","Layout","AccountButton","TopRightMenu","AppHeader","profileOpen","handleProfileOpen","handleProfileClose","photoURL","background","borderBottom","padding","display","flexDirection","alignItems","justifyContent","paddingTop","marginRight","src","getProps","createSelector","ownProps","match","params","joined","Object","values","isLoading","Content","ChatWrapper","Messages","RoomContainer","messagesEnd","messagesContainer","scrollToBottom","scrollIntoView","behavior","prevProps","previousLastMessage","slice","currentLastMessage","scrollHeight","scrollTop","clientHeight","Math","abs","content","ref","el","map","idx","key","float","clear","overflow","TextArea","Text","TextWrap","CreateChatDialog","roomName","description","handleChange","handleSubmit","userDisplayName","unread","lastRead","tryCreateRoom","rows","roomData","showCreateError","get","snapshot","find","r","roomRef","set","Label","BrowseRoomsDialog","handleJoinRoom","canJoin","tryJoinRoom","bodyStyle","maxHeight","overflowY","dataSource","roomList","renderItem","item","Item","Meta","avatar","avatarUrl","available","undefined","types","Sider","LogoWrap","Logo","img","RoomButtons","MenuButton","App","openDialog","handleCloseDialog","handleOpenDialog","dialogName","handleRoomSelect","history","initAuth","nextProps","initSlacker","location","joinedRooms","pathname","height","position","left","theme","mode","onSelect","selectedKeys","className","marginLeft","path","component","onAuthStateChanged","userData","email","loginSuccess","defaultState","reducers","combineReducers","action","reduce","acc","redirect","redirectTo","updateRoomPresences","joinRoom","fetchMessages","fetchRoom","joinRoomListener","updateRoomPresencesListener","select","call","getCollection","userRoomsQuery","empty","userRoomIds","userRoomDoc","setDocument","getDocument","roomDoc","exists","put","person","cursor","messagePage","orderBy","limit","startAfter","messageDoc","peopleDoc","newestMessage","fork","syncCollection","successActionCreator","takeEvery","initSlackerListner","roomsPromise","roomsQuery","generalRoom","includes","takeLatest","rootSaga","all","initSaga","roomSagas","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","run","mySaga","configureStore","jsx","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f898e0a4.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Spin } from 'antd'\n\nconst LoadingWrapper = styled.div`\n\twidth: 100%;\n\tpadding: 24;\n\tdisplay: flex;\n\tflex-direction: column;\n\tbackground: '#fff';\n\tjustify-content: center;\n\talign-items: center;\n`\n\nconst LoadingSpinner = () => (\n\t<LoadingWrapper>\n\t\t<Spin size=\"large\" />\n\t</LoadingWrapper>\n)\n\nexport default LoadingSpinner\n","import React, { FunctionComponent } from 'react'\nimport { Avatar } from 'antd'\nimport styled from 'styled-components'\n\nconst MessageLayout = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\tmargin-bottom: 2px;\n`\n\nconst LeftPanel = styled.div`\n\twidth: 46px;\n\tpadding: 5px;\n`\n\n// const Avatar = styled.div`\n// \t/* width: 35px;\n// \theight: 35px;\n// \tmargin: 5px;\n// \tborder-radius: 2px;\n// \tbackground-color: #cecece;\n// ` */\n\nconst RightPanel = styled.div`\n\tcolor: black;\n`\n\nconst MessageHeader = styled.div`\n\tcolor: black;\n\tfont-weight: bold;\n\tmargin-top: 2px;\n`\n\ninterface Props {\n\tname: string\n\tisConsecutive?: boolean\n}\n\nconst Message: FunctionComponent<Props> = ({\n\tchildren,\n\tname,\n\tisConsecutive,\n}) => {\n\tif (isConsecutive) {\n\t\treturn (\n\t\t\t<MessageLayout>\n\t\t\t\t<LeftPanel />\n\t\t\t\t<RightPanel>{children}</RightPanel>\n\t\t\t</MessageLayout>\n\t\t)\n\t}\n\n\treturn (\n\t\t<MessageLayout>\n\t\t\t<LeftPanel>\n\t\t\t\t<Avatar size={35} shape=\"square\" icon=\"user\" />\n\t\t\t</LeftPanel>\n\t\t\t<RightPanel>\n\t\t\t\t<MessageHeader>{name}</MessageHeader>\n\t\t\t\t{children}\n\t\t\t</RightPanel>\n\t\t</MessageLayout>\n\t)\n}\n\nexport default Message\n","import firebase from 'firebase'\nimport '@firebase/firestore' // 👈 Don't forget this!\nimport ReduxSagaFirebase from 'redux-saga-firebase'\nconst config = {\n\tapiKey: 'AIzaSyB2tCxT6yP0CWtCbD9JDj3ZKaxxW8T25PI',\n\tauthDomain: 'slacker-c3b01.firebaseapp.com',\n\tdatabaseURL: 'https://slacker-c3b01.firebaseio.com',\n\tprojectId: 'slacker-c3b01',\n\tstorageBucket: 'slacker-c3b01.appspot.com',\n\tmessagingSenderId: '286218247810',\n}\nconst firebaseApp = firebase.initializeApp(config)\nconst rsf = new ReduxSagaFirebase(firebaseApp)\nconst database = firebase.firestore()\nconst githubAuthProvider = new firebase.auth.GithubAuthProvider()\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider()\n\nconst auth = firebase.auth()\n\nexport {\n\tfirebase,\n\trsf,\n\tauth,\n\tgithubAuthProvider,\n\tgoogleAuthProvider,\n\tdatabase as default,\n}\n","// auth\nexport const LOGIN_SUCCESS = 'LOGIN'\nexport const LOGOUT_SUCCESS = 'LOGOUT'\n\n// update actions\nexport const UPDATE_USER_ROOM_PRESENCE = 'UPDATE_USER_ROOM_PRESENCE'\nexport const UPDATE_ROOM_PRESENCES = 'UPDATE_ROOM_PRESENCES'\nexport const UPDATE_MESSAGES = 'UPDATE_MESSAGES'\nexport const UPDATE_ROOM = 'UPDATE_ROOM'\nexport const UPDATE_AVAILABLE_ROOMS = 'UPDATE_AVAILABLE_ROOMS'\n\n// room related events\nexport const JOINED_ROOM = 'JOINED_ROOM'\nexport const SEND_MESSAGE = 'SEND_MESSAGE'\n\n// saga triggers\nexport const JOIN_ROOM_SAGA = 'JOIN_ROOM_SAGA'\nexport const INIT_SLACKER_SAGA = 'INIT_SLACKER_SAGA'\n","import database from '../firebase/firebase'\nimport moment from 'moment'\n// import { ipcRenderer } from 'electron';\n\nimport * as types from '../constants/ActionTypes'\n\nconst byCreatedAt = function(a: any, b: any) {\n\treturn new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n}\n\nexport interface RoomData {\n\tid?: string\n\tname: string\n\tpeople: any\n\tmessages?: any\n\tmessageCount?: number\n\tcanFetchMore?: boolean\n}\n\nexport const updateRoom = ({\n\tid,\n\tname,\n\tpeople,\n\tmessages = [],\n\tcanFetchMore,\n\tmessageCount,\n}: RoomData) => ({\n\ttype: types.UPDATE_ROOM,\n\troom: {\n\t\tid,\n\t\tname,\n\t\tpeople,\n\t\tmessages,\n\t\tcanFetchMore,\n\t\tmessageCount,\n\t},\n})\n\nexport const joinedRoom = (joinedRoom: RoomItem) => ({\n\ttype: types.JOINED_ROOM,\n\tjoinedRoom,\n})\n\nexport const tryJoinRoom = (roomId: string) => ({\n\ttype: types.JOIN_ROOM_SAGA,\n\troomId,\n})\n\nexport const tryCreateRoom = (roomData: RoomData, showCreateError: any) => {\n\treturn (dispatch: any, getState: () => StoreState) => {\n\t\tconst room = {\n\t\t\tname: roomData.name,\n\t\t}\n\t\t// get all rooms\n\t\treturn database\n\t\t\t.collection('rooms')\n\t\t\t.get()\n\t\t\t.then(snapshot => {\n\t\t\t\tconst rooms: Room[] = []\n\t\t\t\tsnapshot.forEach(doc => {\n\t\t\t\t\tconsole.log(doc)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst room: Room = doc.data()\n\t\t\t\t\trooms.push({\n\t\t\t\t\t\t...room,\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t// if no room with this name\n\t\t\t\tif (!rooms.find(r => r.name === room.name)) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tdatabase\n\t\t\t\t\t\t\t.collection('rooms')\n\t\t\t\t\t\t\t.add(room)\n\t\t\t\t\t\t\t// create this room and\n\t\t\t\t\t\t\t.then(roomRef => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\tdatabase\n\t\t\t\t\t\t\t\t\t\t.collection(`rooms/${roomRef.id}/people`)\n\t\t\t\t\t\t\t\t\t\t.doc(roomData.people.id)\n\t\t\t\t\t\t\t\t\t\t// assign people to it?\n\t\t\t\t\t\t\t\t\t\t.set(roomData.people)\n\t\t\t\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t\t\t\tdatabase\n\t\t\t\t\t\t\t\t\t\t\t\t.collection(`users/${roomData.people.id}/rooms`)\n\t\t\t\t\t\t\t\t\t\t\t\t.doc(roomRef.id)\n\t\t\t\t\t\t\t\t\t\t\t\t.set({ roomName: room.name })\n\n\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\tupdateRoom({\n\t\t\t\t\t\t\t\t\t\t\t\t\tid: roomRef.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t...roomData,\n\t\t\t\t\t\t\t\t\t\t\t\t\tpeople: [roomData.people],\n\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t// const perName = roomData.people.name\n\t\t\t\t\t\t\t\t\t\t\t// dispatch(\n\t\t\t\t\t\t\t\t\t\t\t// \tstartSendMessage(\n\t\t\t\t\t\t\t\t\t\t\t// \t\t`${perName} created this room`,\n\t\t\t\t\t\t\t\t\t\t\t// \t\troom.name,\n\t\t\t\t\t\t\t\t\t\t\t// \t\ttrue,\n\t\t\t\t\t\t\t\t\t\t\t// \t),\n\t\t\t\t\t\t\t\t\t\t\t// ).then(() => {\n\t\t\t\t\t\t\t\t\t\t\t// \tdispatch(startListening(room.name))\n\t\t\t\t\t\t\t\t\t\t\t// \t// history.push(`/room/${room.name}`);\n\t\t\t\t\t\t\t\t\t\t\t// })\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\treturn showCreateError('Room name not available!')\n\t\t\t\t}\n\t\t\t})\n\t}\n}\n\nexport const showError = (message: string) => ({\n\ttype: 'ERROR_MESSAGE',\n\tmessage,\n})\n\nexport const updateMessages = (messages: any, roomId: string) => ({\n\ttype: types.UPDATE_MESSAGES,\n\tmessages,\n\troomId,\n})\n\nexport const trySendMessage = (\n\ttext: string,\n\troomId: string,\n\tstatus: boolean = false,\n) => {\n\treturn (dispatch: any, getState: any) => {\n\t\tconst user = getState().auth\n\t\tif (user) {\n\t\t\tconst uid = user.uid\n\t\t\tconst displayName = user.displayName\n\t\t\tconst message = {\n\t\t\t\tsender: { uid, displayName },\n\t\t\t\ttext,\n\t\t\t\tcreatedAt: moment().format(),\n\t\t\t\tstatus,\n\t\t\t}\n\t\t\treturn database.collection(`rooms/${roomId}/messages`).add(message)\n\t\t}\n\t}\n}\n\nexport const orderRoomsStartState = () => ({\n\ttype: 'ORDER_ROOMS_START_STATE',\n})\n\nexport const availableRooms = (rooms: RoomItem[]) => ({\n\ttype: types.UPDATE_AVAILABLE_ROOMS,\n\trooms,\n})\n\nexport const initSlacker = () => ({\n\ttype: types.INIT_SLACKER_SAGA,\n})\n\nexport const clearState = {\n\ttype: 'CLEAR_STATE',\n}\n\nexport const leaveRoom = (roomName: string, userId: string) => ({\n\ttype: 'LEAVE_ROOM',\n\troomName,\n\tuserId,\n})\n\nexport const clearUnread = (\n\troomName: string,\n\tuid: string,\n\ttime: any,\n\tunread: number,\n) => ({\n\ttype: 'CLEAR_UNREAD',\n\troomName,\n\tuid,\n\ttime,\n\tunread,\n})\n\nexport const setUnread = (\n\troomName: string,\n\tuid: string,\n\ttime: any,\n\tunread: number,\n) => {\n\treturn (dispatch: any) => {\n\t\tdispatch(clearUnread(roomName, uid, time, unread))\n\t}\n}\n\n// export const startClearUnread = (roomName: string) => {\n// \treturn (dispatch: any, getState: any) => {\n// \t\t// let time = moment().endOf(\"month\");\n// \t\tconst uid = getState().auth.uid\n// \t\tif (uid) {\n// \t\t\tconst time = moment().format()\n// \t\t\treturn database\n// \t\t\t\t.ref(`rooms/${roomName}/people/${uid}`)\n// \t\t\t\t.update({\n// \t\t\t\t\tunread: 0,\n// \t\t\t\t\tlastRead: time,\n// \t\t\t\t})\n// \t\t\t\t.then(() => {\n// \t\t\t\t\tdispatch(clearUnread(roomName, uid, time, 0))\n// \t\t\t\t})\n// \t\t}\n// \t}\n// }\n\nexport const onLeft = (roomName: string, personID: string) => ({\n\ttype: 'ON_LEFT',\n\troomName,\n\tpersonID,\n})\n\nexport const onJoined = (roomName: string, person: any) => ({\n\ttype: 'ON_JOINED',\n\troomName,\n\tperson,\n})\n\nexport const syncMessages = (messagesSnapshot: any, roomId: string) => {\n\tconst messages: any[] = []\n\tmessagesSnapshot.forEach((doc: any) => {\n\t\tmessages.push({ id: doc.id, ...doc.data() })\n\t})\n\n\tmessages.sort(byCreatedAt)\n\treturn updateMessages(messages, roomId)\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { trySendMessage } from '../actions/rooms'\n\nconst InputForm = styled.form`\n\theight: 44px;\n\tbackground-color: #fff;\n\tborder-radius: 4px;\n\tborder: 1px solid #acacac;\n\tdisplay: flex;\n\tflex-direction: row;\n\tflex-shrink: 0;\n`\n\nconst Input = styled.input`\n\tpadding-left: 14px;\n\tborder: none;\n\tborder-radius: 4px;\n\tflex-grow: 1;\n\toutline: none;\n`\n\nconst SendButton = styled.button`\n\tflex-shrink: 0;\n\tpadding: 0px 15px;\n\tbackground: none;\n\tborder: none;\n`\n\ninterface Props {\n\troom: RoomItem | undefined\n\ttrySendMessage: (text: string, roomId: string) => void\n}\n\ninterface State {\n\tvalue: string\n}\n\nclass ChatInput extends Component<Props, State> {\n\tstate = {\n\t\tvalue: '',\n\t}\n\n\thandleTyping = (e: any) => {\n\t\tthis.setState({ value: e.target.value })\n\t}\n\n\thandleSend = (e: any) => {\n\t\te.preventDefault()\n\t\tconst { room } = this.props\n\t\tconst text = this.state.value\n\t\tif (!!room && !!room.id && text.length > 0) {\n\t\t\tthis.props.trySendMessage(text, room.id)\n\t\t\tthis.setState({\n\t\t\t\tvalue: '',\n\t\t\t})\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<InputForm onSubmit={this.handleSend}>\n\t\t\t\t<Input value={this.state.value} onChange={this.handleTyping} />\n\t\t\t\t<SendButton type={'submit'}>Send</SendButton>\n\t\t\t</InputForm>\n\t\t)\n\t}\n}\n\nexport default connect(\n\tnull,\n\t{ trySendMessage },\n)(ChatInput)\n","import {\n\tauth,\n\tgithubAuthProvider,\n\tgoogleAuthProvider,\n} from '../firebase/firebase'\n\nimport * as types from '../constants/ActionTypes'\n\nexport const loginSuccess = (uid: string, userData: any) => ({\n\ttype: types.LOGIN_SUCCESS,\n\tuid,\n\tuserData,\n})\n\nexport const loginError = (error: any) => ({\n\ttype: types.LOGIN_SUCCESS,\n\terror\n})\n\nexport const initAuth = () => {\n\treturn (dispatch: any) => {\n\t\treturn auth.onAuthStateChanged(user => {\n\t\t\tif (user) {\n\t\t\t\t// user authenticated, update redux\n\t\t\t\tif (user) {\n\t\t\t\t\tconst userData = {\n\t\t\t\t\t\tdisplayName: user.displayName || 'Ninja',\n\t\t\t\t\t\temail: user.email,\n\t\t\t\t\t\tphotoURL: user.photoURL,\n\t\t\t\t\t}\n\t\t\t\t\treturn dispatch(loginSuccess(user.uid, userData))\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// no saved user, create shadow\n\t\t\t\ttryLoginAnonymously()(dispatch)\n\t\t\t}\n\t\t})\n\t}\n}\n\nexport const tryLoginAnonymously = () => {\n\treturn (dispatch: any) => {\n\t\treturn auth\n\t\t\t.signInAnonymously()\n\t\t\t.then(() => {\n\t\t\t\t// console.log(response);\n\t\t\t\t// const { user } = response\n\n\t\t\t\t// if (user) {\n\t\t\t\t// \tconst displayName = user.displayName || 'Ninja'\n\t\t\t\t// \treturn dispatch(loginSuccess(user.uid, displayName))\n\t\t\t\t// }\n\t\t\t})\n\t\t\t.catch(function(error) {\n\t\t\t\tconsole.log({ error })\n\n\t\t\t\treturn dispatch(loginError({ error }))\n\t\t\t})\n\t}\n}\n\nexport const tryLoginProvider = (providerName: string) => {\n\treturn (dispatch: any) => {\n\t\t// pick login provider\n\t\tlet provider = null\n\t\tif (providerName === 'github') {\n\t\t\tprovider = githubAuthProvider\n\t\t} else if (providerName === 'google') {\n\t\t\tprovider = googleAuthProvider\n\t\t} else {\n\t\t\treturn Promise.reject('Invalid auth provider')\n\t\t}\n\n\t\t// TODO check if user exits maybe?\n\n\t\treturn auth\n\t\t\t.signInWithPopup(provider)\n\t\t\t.then(response => {\n\t\t\t\tconst { user } = response\n\n\t\t\t\tconsole.log({ user })\n\n\t\t\t\t// go through user rooms and update people collection with name and picture?\n\n\t\t\t\tif (user) {\n\t\t\t\t\treturn dispatch({\n\t\t\t\t\t\ttype: types.UPDATE_USER_ROOM_PRESENCE,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(function(error) {\n\t\t\t\tconsole.log({ error })\n\t\t\t\t\n\t\t\t\treturn dispatch(loginError({ error }))\n\t\t\t})\n\t}\n}\n\nexport const logout = () => ({\n\ttype: types.LOGOUT_SUCCESS,\n})\n\nexport const tryLogout = () => {\n\treturn () => {\n\t\treturn auth.signOut().then(() => {\n\t\t\tconsole.log('log out!!!')\n\t\t})\n\t}\n}\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { connect } from 'react-redux'\nimport { Modal, Typography, Row, Col, Icon, Button } from 'antd'\nimport { tryLoginProvider } from '../actions/auth'\nconst { Title } = Typography\n\nconst LoginProviders = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: center;\n\talign-items: center;\n`\n\ninterface Props {\n\tisOpen: boolean\n\thandleClose: () => void\n\ttryLoginProvider: (providerName: string) => Promise<any>\n\tauth: Auth\n}\n\ninterface State {\n\troomName: string\n\tdescription: string\n}\n\nclass ProfileDialog extends Component<Props, State> {\n\thandleTryLogin = (providerName: string) => {\n\t\tthis.props.tryLoginProvider(providerName).then(() => {\n\t\t\tthis.props.handleClose()\n\t\t})\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<Modal\n\t\t\t\ttitle=\"Profile\"\n\t\t\t\tvisible={this.props.isOpen}\n\t\t\t\tonOk={this.props.handleClose}\n\t\t\t\tonCancel={this.props.handleClose}\n\t\t\t\tokButtonProps={{ disabled: !this.props.auth.uid }}\n\t\t\t\tcancelButtonProps={{ disabled: !this.props.auth.uid }}\n\t\t\t>\n\t\t\t\t<div>\n\t\t\t\t\t<Title level={4}>Login with</Title>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col span={24}>\n\t\t\t\t\t\t\t<LoginProviders>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tonClick={() => this.handleTryLogin('github')}\n\t\t\t\t\t\t\t\t\tstyle={{ margin: 5 }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Icon style={{ fontSize: 24 }} type=\"github\" />\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<Button onClick={() => this.handleTryLogin('google')}>\n\t\t\t\t\t\t\t\t\t<Icon style={{ fontSize: 24 }} type=\"google\" />\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</LoginProviders>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</div>\n\t\t\t</Modal>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: any) => ({\n\tauth: state.auth,\n})\n\nexport default connect(\n\tmapStateToProps,\n\t{ tryLoginProvider },\n)(ProfileDialog)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Layout, Typography, Avatar, Button } from 'antd'\n\nimport ProfileDialog from '../components/ProfileDialog'\n\nconst { Header } = Layout\nconst { Title } = Typography\n\nconst AccountButton = styled.button`\n\tbackground: none;\n\tborder: 1px solid transparent;\n\tborder-radius: 4px;\n\ttransition: border 0.5s;\n\toutline: none;\n\tpadding: 0px;\n\tline-height: normal;\n\tcursor: pointer;\n`\n\nconst TopRightMenu = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n`\n\ninterface Props {\n\troom?: RoomItem\n\tuid?: string\n\tphotoURL?: string\n}\n\ninterface State {\n\tprofileOpen: boolean\n}\n\nclass AppHeader extends Component<Props, State> {\n\tstate = {\n\t\tprofileOpen: false,\n\t}\n\n\thandleProfileOpen = () => {\n\t\tthis.setState({\n\t\t\tprofileOpen: true,\n\t\t})\n\t}\n\n\thandleProfileClose = () => {\n\t\tthis.setState({\n\t\t\tprofileOpen: false,\n\t\t})\n\t}\n\n\trender() {\n\t\tconst { room, uid, photoURL } = this.props\n\t\t// TODO plan what is in here\n\t\t// const menu = (\n\t\t// \t<Menu>\n\t\t// \t\t<Menu.Item onClick={this.handleProfileOpen}>\n\t\t// \t\t\t<a>Profile</a>\n\t\t// \t\t</Menu.Item>\n\t\t// \t\t{/* <Menu.Item>\n\t\t// \t\t\t<a>2nd menu item</a>\n\t\t// \t\t</Menu.Item>\n\t\t// \t\t<Menu.Item>\n\t\t// \t\t\t<a>3rd menu item</a>\n\t\t// \t\t</Menu.Item> */}\n\t\t// \t</Menu>\n\t\t// )\n\t\treturn (\n\t\t\t<Header\n\t\t\t\tstyle={{\n\t\t\t\t\tbackground: '#fff',\n\t\t\t\t\tborderBottom: '1px solid #acacac',\n\t\t\t\t\tpadding: 16,\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\tflexDirection: 'row',\n\t\t\t\t\talignItems: 'center',\n\t\t\t\t\tjustifyContent: 'space-between',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Title style={{ margin: 0 }} level={3}>\n\t\t\t\t\t# {room ? room.name : ''}\n\t\t\t\t</Title>\n\t\t\t\t{!!uid && (\n\t\t\t\t\t<TopRightMenu>\n\t\t\t\t\t\t<Button icon=\"setting\" shape=\"circle\" style={{ paddingTop: 1, marginRight: 10 }} />\n\n\t\t\t\t\t\t<AccountButton onClick={this.handleProfileOpen}>\n\t\t\t\t\t\t\t<Avatar src={photoURL} size={35} shape=\"square\" />\n\t\t\t\t\t\t</AccountButton>\n\t\t\t\t\t\t<ProfileDialog\n\t\t\t\t\t\t\tisOpen={this.state.profileOpen}\n\t\t\t\t\t\t\thandleClose={this.handleProfileClose}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</TopRightMenu>\n\t\t\t\t)}\n\t\t\t</Header>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: StoreState) => {\n\tconst { auth } = state\n\treturn {\n\t\tuid: auth.uid,\n\t\tphotoURL: auth.photoURL,\n\t}\n}\n\nexport default connect(mapStateToProps)(AppHeader)\n","export const byCreatedAt = function(a: any, b: any) {\n\treturn new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n}","import { createSelector } from 'reselect'\nimport { byCreatedAt } from '../utils/misc'\n\nconst getAuth = (state: StoreState) => state.auth\n\nconst getRoom = (state: StoreState, ownProps: any) => {\n\tconst { roomId } = ownProps.match.params\n\treturn state.rooms.joined[roomId]\n}\n\nconst getRoomMessages = (state: StoreState, ownProps: any) => {\n\tconst { roomId } = ownProps.match.params\n\tconst room = state.rooms.joined[roomId]\n\treturn room ? Object.values(room.messages).sort(byCreatedAt) : []\n}\n\nexport const makeGetEarliestMessageForRoomId = (roomId: string) => (\n\tstate: StoreState,\n) => {\n\tconst room = state.rooms.joined[roomId]\n\tconst messages = Object.values(room.messages).sort(byCreatedAt)\n\treturn messages[0] || null\n}\n\nconst getProps = createSelector(\n\tgetRoom,\n\tgetRoomMessages,\n\tgetAuth,\n\t(room, messages, auth) => {\n\t\treturn {\n\t\t\tauth,\n\t\t\troom,\n\t\t\tmessages,\n\t\t\tisLoading: !room,\n\t\t}\n\t},\n)\n\nexport default getProps\n","import React, { Fragment, Component } from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Layout } from 'antd'\n\nimport LoadingSpinner from '../components/LoadingSpinner'\nimport Message from '../components/Message'\nimport ChatInput from '../components/ChatInput'\nimport AppHeader from './AppHeader'\n\nimport { trySendMessage } from '../actions/rooms'\nimport getProps from '../selectors/room'\n\nconst { Content } = Layout\n\nconst ChatWrapper = styled.div`\n\t/* height: 100%; */\n\twidth: 100%;\n\tpadding: 24;\n\tdisplay: flex;\n\tflex-direction: column;\n\tbackground: '#fff';\n`\n\nconst Messages = styled.div`\n\tpadding-top: 8px;\n\tpadding-bottom: 8px;\n\tflex-grow: 1;\n\toverflow-y: scroll;\n\toverflow-x: hidden;\n`\n\ninterface Props {\n\tauth: Auth\n\troom: RoomItem | undefined\n\tmatch: any\n\tisLoading: boolean\n\tmessages: Message[]\n\ttrySendMessage: (text: string, roomId: string, status?: boolean) => void\n}\n\nclass RoomContainer extends Component<Props> {\n\tmessagesEnd: any = null\n\tmessagesContainer: HTMLElement | null = null\n\n\tcomponentWillMount() {\n\t\tconst { roomId } = this.props.match.params\n\t\tconsole.log(roomId)\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.scrollToBottom()\n\t}\n\n\tcomponentDidUpdate(prevProps: Props) {\n\t\t// scroll management\n\t\tif (prevProps.messages.length === 0 && this.props.messages.length > 0) {\n\t\t\tthis.scrollToBottom()\n\t\t\treturn\n\t\t}\n\n\t\tif (\n\t\t\tprevProps.room &&\n\t\t\tthis.props.room &&\n\t\t\tprevProps.room.id !== this.props.room.id\n\t\t) {\n\t\t\tthis.scrollToBottom()\n\t\t\treturn\n\t\t}\n\n\t\tif (\n\t\t\tprevProps.messages.length !== this.props.messages.length &&\n\t\t\tprevProps.messages.length > 0 &&\n\t\t\tthis.props.messages.length > 0\n\t\t) {\n\t\t\tconst previousLastMessage = prevProps.messages.slice(-1)[0]\n\t\t\tconst currentLastMessage = this.props.messages.slice(-1)[0]\n\t\t\tif (\n\t\t\t\tpreviousLastMessage.id !== currentLastMessage.id &&\n\t\t\t\t!!currentLastMessage &&\n\t\t\t\tcurrentLastMessage.sender.uid === this.props.auth.uid\n\t\t\t) {\n\t\t\t\t// last message was ours, scroll to the bottom\n\t\t\t\tthis.scrollToBottom()\n\t\t\t} else if (this.messagesContainer) {\n\t\t\t\t// last message is not ours, lets check scroll\n\t\t\t\tconst {\n\t\t\t\t\tscrollHeight,\n\t\t\t\t\tscrollTop,\n\t\t\t\t\tclientHeight,\n\t\t\t\t} = this.messagesContainer\n\n\t\t\t\t// if our scroll is around bottom 2 messages, scroll to bottom pls\n\t\t\t\tif (Math.abs(clientHeight - (scrollHeight - scrollTop - 45)) < 45) {\n\t\t\t\t\tthis.scrollToBottom()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tscrollToBottom = () => {\n\t\tif (this.messagesEnd) {\n\t\t\tthis.messagesEnd.scrollIntoView({ behavior: 'auto' })\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { room, messages, isLoading } = this.props\n\t\tlet content = <LoadingSpinner />\n\t\tif (!isLoading) {\n\t\t\tcontent = (\n\t\t\t\t<ChatWrapper>\n\t\t\t\t\t<Messages\n\t\t\t\t\t\tref={el => {\n\t\t\t\t\t\t\tthis.messagesContainer = el\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{messages.map((message, idx) => (\n\t\t\t\t\t\t\t<Message\n\t\t\t\t\t\t\t\tisConsecutive={\n\t\t\t\t\t\t\t\t\t!!messages[idx - 1] &&\n\t\t\t\t\t\t\t\t\tmessages[idx - 1].sender.uid === message.sender.uid\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tname={message.sender.displayName || ''}\n\t\t\t\t\t\t\t\tkey={message.id}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{message.text}\n\t\t\t\t\t\t\t</Message>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ float: 'left', clear: 'both' }}\n\t\t\t\t\t\t\tref={el => {\n\t\t\t\t\t\t\t\tthis.messagesEnd = el\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Messages>\n\t\t\t\t\t<ChatInput room={this.props.room} />\n\t\t\t\t</ChatWrapper>\n\t\t\t)\n\t\t}\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<AppHeader room={room} />\n\t\t\t\t<Content\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tmargin: '0px 16px 24px 16px',\n\t\t\t\t\t\toverflow: 'initial',\n\t\t\t\t\t\tdisplay: 'flex'\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{content}\n\t\t\t\t</Content>\n\t\t\t</Fragment>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: StoreState, ownProps: any) =>\n\tgetProps(state, ownProps)\nexport default connect(\n\tmapStateToProps,\n\t{ trySendMessage },\n)(RoomContainer)\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { connect } from 'react-redux'\nimport { Modal, Input, Typography } from 'antd'\nimport { tryCreateRoom, RoomData } from '../actions/rooms'\n\nconst { TextArea } = Input\nconst { Text } = Typography\n\nconst TextWrap = styled.div`\n\tmargin-top: 5px;\n\tmargin-bottom: 5px;\n`\n\ninterface Props {\n\tisOpen: boolean;\n\thandleClose: () => void;\n\ttryCreateRoom: (roomData: RoomData, showCreateError?: any) => Promise<any>;\n\tauth: Auth;\n}\n\ninterface State {\n\troomName: string;\n\tdescription: string;\n}\n\nclass CreateChatDialog extends Component<Props, State> {\n\tstate = {\n\t\troomName: '',\n\t\tdescription: '',\n\t}\n\n\thandleChange = (e: any) => {\n\t\tconsole.log(e.target.name)\n\t\t// @ts-ignore\n\t\tthis.setState({\n\t\t\t[e.target.name]: e.target.value,\n\t\t})\n\t}\n\n\thandleSubmit = () => {\n\t\tconst { uid, displayName: userDisplayName } = this.props.auth\n\t\tif (uid) {\n\t\t\tconsole.log('Create this room pls')\n\t\t\tconst roomName = this.state.roomName\n\t\t\tif (roomName && roomName.length > 0) {\n\t\t\t\t// this.setState({ error: '' })\n\t\t\t\tconst room = {\n\t\t\t\t\tname: roomName,\n\t\t\t\t\tpeople: {\n\t\t\t\t\t\tid: uid,\n\t\t\t\t\t\tname: userDisplayName,\n\t\t\t\t\t\tunread: 0,\n\t\t\t\t\t\tlastRead: 0,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tthis.props.tryCreateRoom(room)\n\t\t\t\tthis.props.handleClose()\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Modal\n\t\t\t\ttitle=\"Create Room\"\n\t\t\t\tvisible={this.props.isOpen}\n\t\t\t\tonOk={this.handleSubmit}\n\t\t\t\tonCancel={this.props.handleClose}\n\t\t\t\tokButtonProps={{ disabled: !this.props.auth.uid }}\n\t\t\t\tcancelButtonProps={{ disabled: !this.props.auth.uid }}\n\t\t\t>\n\t\t\t\t<TextWrap>\n\t\t\t\t\t<Text>Name:</Text>\n\t\t\t\t</TextWrap>\n\t\t\t\t<Input\n\t\t\t\t\tname=\"roomName\"\n\t\t\t\t\tvalue={this.state.roomName}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t\t<TextWrap>\n\t\t\t\t\t<Text>Description:</Text>\n\t\t\t\t</TextWrap>\n\t\t\t\t<TextArea\n\t\t\t\t\tname=\"description\"\n\t\t\t\t\tvalue={this.state.description}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\trows={4}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: any) => ({\n\tauth: state.auth,\n})\n\nexport default connect(\n\tmapStateToProps,\n\t{ tryCreateRoom },\n)(CreateChatDialog)\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { connect } from 'react-redux'\nimport { Modal, List, Avatar, Button } from 'antd'\n\nimport { tryJoinRoom } from '../actions/rooms'\n\nconst Label = styled.div`\n\tpadding: 10px;\n`\n\ninterface RoomWithAvailability extends RoomItem {\n\tcanJoin: boolean\n}\n\ninterface Props {\n\tisOpen: boolean\n\thandleClose: () => void\n\ttryJoinRoom: (roomId: string) => void\n\tauth: Auth\n\troomList: Array<RoomWithAvailability>\n}\n\ninterface State {\n\troomName: string\n\tdescription: string\n}\n\nclass BrowseRoomsDialog extends Component<Props, State> {\n\thandleJoinRoom = (room: RoomWithAvailability) => {\n\t\tif (!room.canJoin) {\n\t\t\tconsole.log('redirect to that room')\n\t\t\tthis.props.handleClose()\n\t\t\treturn\n\t\t}\n\n\t\tthis.props.tryJoinRoom(room.id)\n\t\t// this.props.handleClose()\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Modal\n\t\t\t\ttitle=\"Browse Rooms\"\n\t\t\t\tvisible={this.props.isOpen}\n\t\t\t\tonOk={this.props.handleClose}\n\t\t\t\tonCancel={this.props.handleClose}\n\t\t\t\tokButtonProps={{ disabled: !this.props.auth.uid }}\n\t\t\t\tcancelButtonProps={{ disabled: !this.props.auth.uid }}\n\t\t\t\tbodyStyle={{ maxHeight: 450, overflowY: 'scroll' }}\n\t\t\t>\n\t\t\t\t<List\n\t\t\t\t\tdataSource={this.props.roomList}\n\t\t\t\t\trenderItem={item => (\n\t\t\t\t\t\t<List.Item key={item.id}>\n\t\t\t\t\t\t\t<List.Item.Meta\n\t\t\t\t\t\t\t\tavatar={item.avatarUrl ? <Avatar src={item.avatarUrl} /> : null}\n\t\t\t\t\t\t\t\ttitle={\n\t\t\t\t\t\t\t\t\t<button onClick={() => this.handleJoinRoom(item)}>\n\t\t\t\t\t\t\t\t\t\t{item.name}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdescription={'TODO room descriptions'}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{item.canJoin ? (\n\t\t\t\t\t\t\t\t\t<Button onClick={() => this.handleJoinRoom(item)}>\n\t\t\t\t\t\t\t\t\t\tJoin\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<Label>joined</Label>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{' '}\n\t\t\t\t</List>\n\t\t\t</Modal>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: StoreState) => {\n\tconst { available, joined } = state.rooms\n\tconst roomList = Object.values(available).map(room => {\n\t\tconst canJoin =\n\t\t\tObject.values(joined).find(item => item.id === room.id) === undefined\n\t\treturn {\n\t\t\t...room,\n\t\t\tcanJoin,\n\t\t}\n\t})\n\treturn {\n\t\troomList,\n\t\tauth: state.auth,\n\t}\n}\n\nexport default connect(\n\tmapStateToProps,\n\t{ tryJoinRoom },\n)(BrowseRoomsDialog)\n","import React, { Component } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { connect } from 'react-redux'\nimport { Layout, Menu, Icon } from 'antd'\n\nimport RoomContainer from './Room'\nimport CreateChatDialog from '../components/CreateChatDialog'\nimport BrowseRoomsDialog from '../components/BrowseRoomsDialog'\nimport LoadingSpinner from '../components/LoadingSpinner'\n\nimport { initAuth } from '../actions/auth'\nimport { initSlacker } from '../actions/rooms'\n\nimport '../styles/index.css'\n\nconst { Sider } = Layout\n\nconst LogoWrap = styled.div`\n\ttext-align: center;\n\tpadding: 10px;\n\theight: 64px;\n\tborder-bottom: 1px solid grey;\n`\n\nconst Logo = styled.img`\n\theight: 100%;\n`\n\nconst RoomButtons = styled.div`\n\tpadding: 10px;\n\tcolor: rgba(255, 255, 255, 0.65);\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n`\n\nconst MenuButton = styled.button`\n\tfont-size: 16px;\n\tbackground: none;\n\tborder: none;\n\t-webkit-transition: color 0.5s;\n\ttransition: color 0.5s;\n\tcursor: pointer;\n\t&:hover {\n\t\tcolor: #fff;\n\t}\n`\n\nconst Content = styled.div`\n\theight: 100%;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n`\n\ninterface Props {\n\tinitAuth: () => void\n\tinitSlacker: () => void\n\tauth: Auth\n\tjoinedRooms: RoomItem[]\n\tavailableRooms: RoomItem[]\n\thistory: any\n\tlocation: {\n\t\tpathname: any\n\t}\n}\n\ninterface State {\n\topenDialog: string | false\n}\n\nclass App extends Component<Props, State> {\n\tstate: State = {\n\t\topenDialog: false,\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.initAuth()\n\t}\n\n\tcomponentWillUpdate(nextProps: Props) {\n\t\tif (!this.props.auth.uid && nextProps.auth.uid) {\n\t\t\tthis.props.initSlacker()\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps: Props) {\n\t\tconst { location, joinedRooms, history } = this.props\n\t\tif (\n\t\t\tlocation.pathname === '/' &&\n\t\t\tprevProps.joinedRooms.length === 0 &&\n\t\t\tjoinedRooms.length !== 0\n\t\t) {\n\t\t\thistory.push(`/r/${joinedRooms[0].id}`)\n\t\t}\n\t}\n\n\thandleCloseDialog = () => {\n\t\tthis.setState({\n\t\t\topenDialog: false,\n\t\t})\n\t}\n\n\thandleOpenDialog = (dialogName: string) => {\n\t\tthis.setState({\n\t\t\topenDialog: dialogName,\n\t\t})\n\t}\n\n\thandleRoomSelect = ({ key }: { key: string }) => {\n\t\tthis.props.history.push(key)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Layout style={{ height: '100%' }}>\n\t\t\t\t<Sider\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\toverflow: 'auto',\n\t\t\t\t\t\theight: '100vh',\n\t\t\t\t\t\tposition: 'fixed',\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<LogoWrap>\n\t\t\t\t\t\t<Logo src=\"fox.png\" />\n\t\t\t\t\t</LogoWrap>\n\n\t\t\t\t\t<RoomButtons>\n\t\t\t\t\t\t<MenuButton onClick={() => this.handleOpenDialog('browseRooms')}>\n\t\t\t\t\t\t\t<span>Rooms:</span>\n\t\t\t\t\t\t</MenuButton>\n\t\t\t\t\t\t<MenuButton onClick={() => this.handleOpenDialog('createRoom')}>\n\t\t\t\t\t\t\t<Icon type=\"plus-circle\" />\n\t\t\t\t\t\t</MenuButton>\n\t\t\t\t\t</RoomButtons>\n\t\t\t\t\t<CreateChatDialog\n\t\t\t\t\t\tisOpen={this.state.openDialog === 'createRoom'}\n\t\t\t\t\t\thandleClose={this.handleCloseDialog}\n\t\t\t\t\t/>\n\t\t\t\t\t<BrowseRoomsDialog\n\t\t\t\t\t\tisOpen={this.state.openDialog === 'browseRooms'}\n\t\t\t\t\t\thandleClose={this.handleCloseDialog}\n\t\t\t\t\t/>\n\t\t\t\t\t<Menu\n\t\t\t\t\t\ttheme=\"dark\"\n\t\t\t\t\t\tmode=\"inline\"\n\t\t\t\t\t\tonSelect={this.handleRoomSelect}\n\t\t\t\t\t\tselectedKeys={[this.props.location.pathname]}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.props.joinedRooms.map(room => (\n\t\t\t\t\t\t\t<Menu.Item key={`/r/${room.id}`}>\n\t\t\t\t\t\t\t\t<span className=\"nav-text\"># {room.name}</span>\n\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Menu>\n\t\t\t\t</Sider>\n\t\t\t\t<Layout style={{ marginLeft: 200, background: '#fff' }}>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path={'/r/:roomId'} component={RoomContainer} />\n\t\t\t\t\t\t<Route path={'/'}>\n\t\t\t\t\t\t\t<Content>\n\t\t\t\t\t\t\t\t{this.props.joinedRooms.length === 0 ? (\n\t\t\t\t\t\t\t\t\t<LoadingSpinner />\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div>No chat selected</div>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Content>\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</Layout>\n\t\t\t</Layout>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n\tauth: state.auth,\n\tjoinedRooms: Object.values(state.rooms.joined),\n\tavailableRooms: Object.values(state.rooms.available),\n})\n\nexport default connect(\n\tmapStateToProps,\n\t{ initAuth, initSlacker },\n)(App)\n","import * as types from '../constants/ActionTypes'\n\ninterface RoomsState {\n\tjoined: {\n\t\t[key: string]: RoomItem\n\t}\n\tavailable: {\n\t\t[key: string]: RoomItem\n\t}\n}\n\nconst defaultState: RoomsState = {\n\tjoined: {},\n\tavailable: {},\n}\n\nexport default (state: RoomsState = defaultState, action: any) => {\n\tswitch (action.type) {\n\t\tcase types.UPDATE_ROOM:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tjoined: { ...state.joined, [action.room.id]: action.room },\n\t\t\t}\n\t\tcase types.JOINED_ROOM:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tjoined: { ...state.joined, [action.room.id]: action.room },\n\t\t\t}\n\n\t\tcase types.UPDATE_AVAILABLE_ROOMS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tavailable: {\n\t\t\t\t\t...action.rooms.reduce(\n\t\t\t\t\t\t(acc: any, value: RoomItem) => ({\n\t\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t\t[value.id]: value,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\t{},\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t}\n\n\t\tcase types.SEND_MESSAGE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tjoined: {\n\t\t\t\t\t...state.joined,\n\t\t\t\t\t[action.roomId]: {\n\t\t\t\t\t\t...[state.joined[action.roomId]],\n\t\t\t\t\t\tmessages: {\n\t\t\t\t\t\t\t...state.joined[action.roomId].messages,\n\t\t\t\t\t\t\t[action.message.id]: action.message,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\tcase types.UPDATE_MESSAGES:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tjoined: {\n\t\t\t\t\t...state.joined,\n\t\t\t\t\t[action.roomId]: {\n\t\t\t\t\t\t...state.joined[action.roomId],\n\t\t\t\t\t\tmessages: {\n\t\t\t\t\t\t\t...state.joined[action.roomId].messages,\n\t\t\t\t\t\t\t...action.messages.reduce(\n\t\t\t\t\t\t\t\t(acc: any, message: Message) => ({\n\t\t\t\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t\t\t\t[message.id]: message,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","import authReducer from '../reducers/auth'\nimport roomsReducer from '../reducers/rooms'\nimport redirectReducer from '../reducers/redirect'\nimport { combineReducers } from 'redux'\n\nconst reducers = combineReducers({\n\tauth: authReducer,\n\trooms: roomsReducer,\n\tredirect: redirectReducer,\n})\n\nexport default reducers\n","export default (state = {}, action: any) => {\n  switch (action.type) {\n    case \"LOGIN\":\n      return {\n        uid: action.uid,\n        ...action.userData,\n      };\n    case \"LOGOUT\":\n      return {};\n    default:\n      return state;\n  }\n};\n","export default (state = {}, action: any) => {\n\tswitch (action.type) {\n\t\tcase 'REDIRECT_TO':\n\t\t\treturn {\n\t\t\t\tredirectTo: action.redirectTo,\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","import { put, select, takeEvery, call, fork } from 'redux-saga/effects'\nimport { AnyAction } from 'redux'\nimport database, { rsf } from '../firebase/firebase'\nimport * as types from '../constants/ActionTypes'\nimport { showError, updateRoom, syncMessages } from '../actions/rooms'\nimport { CollectionReference, QuerySnapshot } from '@firebase/firestore-types'\nimport { makeGetEarliestMessageForRoomId } from '../selectors/room'\n\nexport function* updateRoomPresences() {\n\tconst auth = yield select(state => state.auth)\n\tconst { uid, ...userData } = auth\n\t// get user rooms\n\tconst userRoomsQuery = yield call(\n\t\trsf.firestore.getCollection,\n\t\t`users/${auth.uid}/rooms`,\n\t)\n\n\tif (!userRoomsQuery.empty) {\n\t\tconst userRoomIds: string[] = []\n\t\tuserRoomsQuery.forEach((userRoomDoc: any) => {\n\t\t\tuserRoomIds.push(userRoomDoc.id)\n\t\t})\n\n\t\tfor (var roomId in userRoomIds) {\n\t\t\tyield call(\n\t\t\t\t// @ts-ignore\n\t\t\t\trsf.firestore.setDocument,\n\t\t\t\t`rooms/${roomId}/people/${auth.uid}`,\n\t\t\t\t{\n\t\t\t\t\tid: auth.uid,\n\t\t\t\t\t...userData,\n\t\t\t\t},\n\t\t\t)\n\t\t}\n\t}\n}\n\nexport function* joinRoom(action: AnyAction) {\n\tconst { roomId } = action\n\tconst { uid, displayName, photoURL } = yield select(state => state.auth)\n\tconst roomRef = database.doc(`rooms/${roomId}`)\n\n\tconst roomDoc = yield call(rsf.firestore.getDocument, roomRef)\n\tconst room = { id: roomDoc.id, ...roomDoc.data() } as RoomItem\n\n\tif (!room || !roomDoc.exists) {\n\t\tyield put(showError('Room not found!'))\n\t\treturn\n\t} else if (\n\t\troom.people &&\n\t\troom.people.find((person: Person) => person.id === uid)\n\t) {\n\t\t// if we are already in this room then\n\t\t// history.push(`room/${data.roomName}`);\n\t\t// return i guess ?\n\t\treturn\n\t} else {\n\t\t// we should add ourselves to this room\n\n\t\tconst person = {\n\t\t\tname: displayName,\n\t\t\tphotoURL: photoURL,\n\t\t\tid: uid,\n\t\t\tunread: 0,\n\t\t\tlastRead: 0,\n\t\t}\n\n\t\t// TODO figure wtf is wrong here\n\t\tyield call(\n\t\t\t// @ts-ignore\n\t\t\trsf.firestore.setDocument,\n\t\t\t`rooms/${roomId}/people/${person.id}`,\n\t\t\tperson,\n\t\t)\n\n\t\tyield call(\n\t\t\t// @ts-ignore\n\t\t\trsf.firestore.setDocument,\n\t\t\t`users/${person.id}/rooms/${roomId}`,\n\t\t\t{ roomName: room.name },\n\t\t)\n\n\t\t// fetch full room and subscribe\n\t\tyield call(fetchRoom, roomId)\n\t}\n}\n\nexport function* fetchMessages(roomRef: any, cursor?: any) {\n\tconst messages: any = {}\n\n\tlet messagePage = roomRef\n\t\t.collection('messages')\n\t\t.orderBy('createdAt', 'desc')\n\t\t.limit(35) as CollectionReference\n\n\tif (cursor) {\n\t\tmessagePage = messagePage.startAfter(cursor) as CollectionReference\n\t}\n\n\tconst messagesQuery: QuerySnapshot = yield call(\n\t\trsf.firestore.getCollection,\n\t\tmessagePage,\n\t)\n\n\t// const lastMessageQuery = messagesQuery.docs[messagesQuery.size - 1]\n\t// const lastMessage = { id: lastMessageQuery.id, ...lastMessageQuery.data() }\n\n\tmessagesQuery.forEach((messageDoc: any) => {\n\t\tmessages[messageDoc.id] = { id: messageDoc.id, ...messageDoc.data() }\n\t})\n\n\t// const messagePage2 = roomRef\n\t// .collection('messages')\n\t// .orderBy('createdAt', 'desc')\n\t// // @ts-ignore\n\t// .startAfter(lastMessage.createdAt)\n\t// .limit(35) as CollectionReference\n\n\t// const messagesQuery2 = yield call(rsf.firestore.getCollection, messagePage2)\n\n\t// messagesQuery2.forEach((messageDoc: any) => {\n\t// \tmessages[messageDoc.id] = { id: messageDoc.id, ...messageDoc.data() }\n\t// })\n\n\t// console.log({ messages, m1Count: Object.keys(messages).length, messages2, m2Count: Object.keys(messages2).length })\n\n\treturn messages\n}\n\nexport function* fetchRoom(roomId: string) {\n\tconsole.log('try fetch room ', roomId)\n\t// fetch joined room from firestore\n\tconst roomRef = database.collection('rooms').doc(roomId)\n\tconst roomDoc = yield call(rsf.firestore.getDocument, roomRef)\n\n\t// if we have such room\n\tif (roomDoc.exists) {\n\t\tconst room = roomDoc.data()\n\t\tconst people: any[] = []\n\n\t\t// get room's people\n\t\tconst peopleQuery = yield call(\n\t\t\trsf.firestore.getCollection,\n\t\t\troomRef.collection('people'),\n\t\t)\n\t\tpeopleQuery.forEach((peopleDoc: any) => {\n\t\t\tpeople.push({ id: peopleDoc.id, ...peopleDoc.data() })\n\t\t})\n\t\tconsole.log({ people })\n\n\t\t// get room's messages first page\n\t\tconst messages = yield call(fetchMessages, roomRef)\n\n\t\tyield put(\n\t\t\tupdateRoom({\n\t\t\t\tid: roomRef.id,\n\t\t\t\tname: room ? room.name : 'Error',\n\t\t\t\tpeople,\n\t\t\t\tmessages,\n\t\t\t\tmessageCount: messages.length,\n\t\t\t\tcanFetchMore: messages.length === 35,\n\t\t\t}),\n\t\t)\n\n\t\t// subscribe to latest message\n\t\tconst newestMessage = roomRef\n\t\t\t.collection('messages')\n\t\t\t.orderBy('createdAt', 'desc')\n\t\t\t.limit(1) as CollectionReference\n\n\t\t// TODO merge this with other messages to save on reads\n\t\tyield fork(rsf.firestore.syncCollection, newestMessage, {\n\t\t\tsuccessActionCreator: (snapshot: any) => syncMessages(snapshot, roomId),\n\t\t})\n\t}\n}\n\nexport function* fetchMoreMessages(roomId: string) {\n\tconsole.log('try fetch room ', roomId)\n\t// fetch joined room from firestore\n\tconst roomRef = database.collection('rooms').doc(roomId)\n\tconst roomDoc = yield call(rsf.firestore.getDocument, roomRef)\n\n\tif (roomDoc.exists) {\n\t\t// find oldest message\n\t\tconst getEarliestMessageInRoom = makeGetEarliestMessageForRoomId(roomId)\n\t\tconst earliestMessage = yield select(getEarliestMessageInRoom)\n\n\t\tconsole.log({ earliestMessage })\n\n\t\t// fetch next page after that message\n\t}\n}\n\nfunction* joinRoomListener() {\n\tyield takeEvery(types.JOIN_ROOM_SAGA, joinRoom)\n}\n\nfunction* updateRoomPresencesListener() {\n\tyield takeEvery(types.UPDATE_ROOM_PRESENCES, updateRoomPresences)\n}\n\nexport default [joinRoomListener(), updateRoomPresencesListener()]\n","import { put, select, takeLatest, fork, call } from 'redux-saga/effects'\nimport database, { firebase, rsf } from '../firebase/firebase'\nimport { availableRooms } from '../actions/rooms'\nimport * as types from '../constants/ActionTypes'\nimport { fetchRoom } from './roomSagas'\n\n// worker Saga\nfunction* initSlacker(action: any) {\n\tconst auth = yield select(state => state.auth)\n\n\tif (!auth.uid) {\n\t\tconsole.log('no auth!')\n\t\treturn\n\t}\n\n\t// fetch all rooms\n\tconst roomsPromise = database.collection('rooms').get()\n\n\tconst roomsQuery: firebase.firestore.QuerySnapshot = yield roomsPromise\n\tconst rooms: RoomItem[] = []\n\troomsQuery.forEach(doc => {\n\t\tconst room = {\n\t\t\tid: doc.id,\n\t\t\t...doc.data(),\n\t\t}\n\t\t// @ts-ignore\n\t\trooms.push(room)\n\t})\n\n\tyield put(availableRooms(rooms))\n\tconst generalRoom = rooms.find(room => room.name === 'general')\n\n\t// get user rooms\n\tconst userRoomsQuery = yield call(\n\t\trsf.firestore.getCollection,\n\t\t`users/${auth.uid}/rooms`,\n\t)\n\n\tif (!userRoomsQuery.empty) {\n\t\tconst userRoomIds: string[] = []\n\t\tuserRoomsQuery.forEach((userRoomDoc: any) =>\n\t\t\tuserRoomIds.push(userRoomDoc.id),\n\t\t)\n\n\t\t// fetch each joined room\n\t\tfor (let roomId of userRoomIds) {\n\t\t\tyield fork(fetchRoom, roomId)\n\t\t}\n\n\t\t// if no general room, join that as well\n\t\tif (generalRoom && !userRoomIds.includes(generalRoom.id)) {\n\t\t\tyield put({\n\t\t\t\ttype: types.JOIN_ROOM_SAGA,\n\t\t\t\troomId: generalRoom.id,\n\t\t\t\troom: generalRoom,\n\t\t\t})\n\t\t}\n\t} else {\n\t\tif (generalRoom) {\n\t\t\tyield put({\n\t\t\t\ttype: types.JOIN_ROOM_SAGA,\n\t\t\t\troomId: generalRoom.id,\n\t\t\t\troom: generalRoom,\n\t\t\t})\n\t\t}\n\t}\n}\n\nfunction* initSlackerListner() {\n\tyield takeLatest(types.INIT_SLACKER_SAGA, initSlacker)\n}\n\nexport default initSlackerListner\n","import { all } from 'redux-saga/effects'\nimport initSaga from './initSaga'\nimport roomSagas from './roomSagas'\n\nexport default function* rootSaga() {\n\tyield all([initSaga(), ...roomSagas])\n}\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport createSagaMiddleware from 'redux-saga'\nimport reducers from '../reducers'\n\nimport mySaga from '../sagas/rootSaga'\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware()\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nexport default () => {\n\tconst store = createStore(\n\t\treducers,\n\t\tcomposeEnhancers(applyMiddleware(thunk, sagaMiddleware)),\n\t)\n\n\tsagaMiddleware.run(mySaga)\n\n\treturn store\n}\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { HashRouter as Router, Route } from 'react-router-dom'\nimport ReactDOM from 'react-dom'\nimport 'antd/dist/antd.css'\n\nimport App from './containers/App'\nimport configureStore from './store/configureStore'\n\nconst store = configureStore()\nconst jsx = (\n\t<Provider store={store}>\n\t\t<Router>\n\t\t\t<Route path={'/'} component={App} />\n\t\t</Router>\n\t</Provider>\n)\n\nReactDOM.render(jsx, document.getElementById('container'))\n"],"sourceRoot":""}