{"version":3,"sources":["firebase/firebase.ts","actions/rooms.ts","components/RoomContainer.tsx","components/CreateChatDialog.tsx","components/App.tsx","actions/auth.ts","reducers/auth.ts","reducers/rooms.ts","store/configureStore.ts","index.tsx"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","byCreatedAt","a","b","Date","createdAt","createRoom","_ref","id","name","people","_ref$messages","messages","type","room","updateMessages","roomId","Header","Layout","Content","Title","Typography","ChatWrapper","styled","div","_templateObject","LoadingWrapper","_templateObject2","Messages","_templateObject3","Message","_templateObject4","InputForm","form","_templateObject5","Input","input","_templateObject6","SendButton","button","_templateObject7","RoomContainer","state","messageValue","messagesEnd","handleTyping","e","_this","setState","target","value","scrollToBottom","scrollIntoView","behavior","handleSend","preventDefault","props","text","trySendMessage","prevProps","length","this","previousLastMessage","slice","currentLastMessage","sender","uid","auth","_this2","_this$props","isLoading","content","react_default","createElement","spin","size","map","message","key","style","float","clear","ref","el","onSubmit","onChange","react","background","padding","display","flexRirection","alignItems","margin","level","overflow","Component","connect","ownProps","match","params","rooms","find","status","arguments","undefined","dispatch","getState","user","displayName","moment","format","collection","concat","add","TextArea","Text","TextWrap","CreateChatDialog_templateObject","CreateChatDialog","roomName","description","handleChange","console","log","Object","defineProperty","handleSubmit","_this$props$auth","userDisplayName","unread","lastRead","tryCreateRoom","handleClose","modal","title","visible","isOpen","onOk","onCancel","okButtonProps","disabled","cancelButtonProps","rows","roomData","showCreateError","get","then","snapshot","forEach","doc","data","push","objectSpread","r","roomRef","set","Sider","ButtonWrap","App_templateObject","MenuLabel","App_templateObject2","App","isCreateRoomDialogOpen","handleCloseCreateChatDialog","handleOpenCreateChatDialog","handleRoomSelect","history","tryLogin","nextProps","initSlacker","layout","height","position","left","es_button","icon","onClick","components_CreateChatDialog","menu","theme","mode","onSelect","defaultSelectedKeys","location","pathname","Item","className","marginLeft","react_router","path","component","signInAnonymously","response","loginSuccess","catch","error","code","userRoomsQuery","empty","userRoomDoc","roomDoc","exists","peopleQuery","peopleDoc","messagesQuery","messageDoc","sort","onSnapshot","personQuery","action","defaultState","reducers_rooms","toConsumableArray","person","p","filter","personID","time","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createBrowserHistory","store","createStore","combineReducers","authReducer","roomsReducer","applyMiddleware","thunk","jsx","es","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8cdc15bf.chunk.js","sourcesContent":["import * as firebase from \"firebase\";\n\nconst config = {\n  apiKey: \"AIzaSyB2tCxT6yP0CWtCbD9JDj3ZKaxxW8T25PI\",\n  authDomain: \"slacker-c3b01.firebaseapp.com\",\n  databaseURL: \"https://slacker-c3b01.firebaseio.com\",\n  projectId: \"slacker-c3b01\",\n  storageBucket: \"slacker-c3b01.appspot.com\",\n  messagingSenderId: \"286218247810\"\n};\n\nfirebase.initializeApp(config);\n\nconst database = firebase.firestore();\n// const githubAuthProvider = new firebase.auth.GithubAuthProvider();\n\nexport { firebase, database as default };\n","import database, { firebase } from '../firebase/firebase'\n// import { history } from \"../routers/AppRouter\";\nimport moment from 'moment'\nimport * as path from 'path'\n// import { ipcRenderer } from 'electron';\n\nconst byCreatedAt = function(a: any, b: any) {\n\t// @ts-ignore\n\treturn new Date(a.createdAt) - new Date(b.createdAt)\n}\n\nexport interface RoomData {\n\tid?: string;\n\tname: string;\n\tpeople: any;\n\tmessages?: any;\n}\n\nexport const createRoom = ({ id, name, people, messages = [] }: RoomData) => ({\n\ttype: 'CREATE_ROOM',\n\troom: {\n\t\tid,\n\t\tname,\n\t\tpeople,\n\t\tmessages,\n\t},\n})\n\nexport const tryCreateRoom = (roomData: RoomData, showCreateError: any) => {\n\treturn (dispatch: any, getState: any) => {\n\t\tconsole.log('Attempting to create room...')\n\t\tconst room = {\n\t\t\tname: roomData.name,\n\t\t}\n\t\t// get all rooms\n\t\treturn database\n\t\t\t.collection('rooms')\n\t\t\t.get()\n\t\t\t.then(snapshot => {\n\t\t\t\tconst rooms: Room[] = []\n\t\t\t\tsnapshot.forEach(doc => {\n\t\t\t\t\tconsole.log(doc)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst room: Room = doc.data()\n\t\t\t\t\trooms.push({\n\t\t\t\t\t\t...room,\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t// if no room with this name\n\t\t\t\tif (!rooms.find(r => r.name === room.name)) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tdatabase\n\t\t\t\t\t\t\t.collection('rooms')\n\t\t\t\t\t\t\t.add(room)\n\t\t\t\t\t\t\t// create this room and\n\t\t\t\t\t\t\t.then(roomRef => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\tdatabase\n\t\t\t\t\t\t\t\t\t\t.collection(`rooms/${roomRef.id}/people`)\n\t\t\t\t\t\t\t\t\t\t.doc(roomData.people.id)\n\t\t\t\t\t\t\t\t\t\t// assign people to it?\n\t\t\t\t\t\t\t\t\t\t.set(roomData.people)\n\t\t\t\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t\t\t\tdatabase\n\t\t\t\t\t\t\t\t\t\t\t\t.collection(`users/${roomData.people.id}/rooms`)\n\t\t\t\t\t\t\t\t\t\t\t\t.doc(roomRef.id)\n\t\t\t\t\t\t\t\t\t\t\t\t.set({ roomName: room.name })\n\n\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\tcreateRoom({\n\t\t\t\t\t\t\t\t\t\t\t\t\tid: roomRef.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t...roomData,\n\t\t\t\t\t\t\t\t\t\t\t\t\tpeople: [roomData.people],\n\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tconst perName = roomData.people.name\n\t\t\t\t\t\t\t\t\t\t\t// dispatch(\n\t\t\t\t\t\t\t\t\t\t\t// \tstartSendMessage(\n\t\t\t\t\t\t\t\t\t\t\t// \t\t`${perName} created this room`,\n\t\t\t\t\t\t\t\t\t\t\t// \t\troom.name,\n\t\t\t\t\t\t\t\t\t\t\t// \t\ttrue,\n\t\t\t\t\t\t\t\t\t\t\t// \t),\n\t\t\t\t\t\t\t\t\t\t\t// ).then(() => {\n\t\t\t\t\t\t\t\t\t\t\t// \tdispatch(startListening(room.name))\n\t\t\t\t\t\t\t\t\t\t\t// \t// history.push(`/room/${room.name}`);\n\t\t\t\t\t\t\t\t\t\t\t// })\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\treturn showCreateError('Room name not available!')\n\t\t\t\t}\n\t\t\t})\n\t}\n}\n\nexport const startListening = (roomId: string) => {\n\treturn (dispatch: any, getState: any) => {\n\t\treturn database\n\t\t\t.collection(`rooms/${roomId}/messages`)\n\t\t\t.onSnapshot(messagesQuery => {\n\t\t\t\tif (getState().rooms.find((room: Room) => room.id === roomId)) {\n\t\t\t\t\tdatabase\n\t\t\t\t\t\t.collection(`rooms/${roomId}/people`)\n\t\t\t\t\t\t.get()\n\t\t\t\t\t\t.then(personQuery => {\n\t\t\t\t\t\t\tconst messages: any[] = []\n\t\t\t\t\t\t\tmessagesQuery.forEach(doc => {\n\t\t\t\t\t\t\t\tmessages.push({ id: doc.id, ...doc.data() })\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tconsole.log('listener -> ', { messages })\n\t\t\t\t\t\t\tmessages.sort(byCreatedAt)\n\t\t\t\t\t\t\tdispatch(updateMessages(messages, roomId))\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t// dispatch(\n\t\t\t\t\t\t\t// \tsendMessage(\n\t\t\t\t\t\t\t// \t\t{\n\t\t\t\t\t\t\t// \t\t\t...message,\n\t\t\t\t\t\t\t// \t\t\tid: msgSnapshot ? msgSnapshot.key : 'nullSnap',\n\t\t\t\t\t\t\t// \t\t},\n\t\t\t\t\t\t\t// \t\troomName,\n\t\t\t\t\t\t\t// \t),\n\t\t\t\t\t\t\t// )\n\t\t\t\t\t\t\t// dispatch(orderRoomsStartState())\n\t\t\t\t\t\t\t// if (message.sender.displayName !== getState().auth.displayName) {\n\t\t\t\t\t\t\t// \t// ipcRenderer.send('playNotif', message.sender.displayName, message.text);\n\t\t\t\t\t\t\t// \tconst audio = new Audio('/sounds/notif.mp3')\n\t\t\t\t\t\t\t// \taudio.play()\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t// const keyword =\n\t\t\t\t\t\t\t// \tmessage.status && message.text.split(' ').splice(-1, 1)[0]\n\t\t\t\t\t\t\t// if (keyword === 'left') {\n\t\t\t\t\t\t\t// \tdispatch(onLeft(roomName, message.sender.uid))\n\t\t\t\t\t\t\t// } else if (keyword === 'joined') {\n\t\t\t\t\t\t\t// \tdispatch(\n\t\t\t\t\t\t\t// \t\tonJoined(roomName, personSnapshot.val()[message.sender.uid]),\n\t\t\t\t\t\t\t// \t)\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t// const personID = getState().auth.uid\n\n\t\t\t\t\t\t\t// if (personID === message.sender.uid && keyword !== 'left') {\n\t\t\t\t\t\t\t// \tdatabase\n\t\t\t\t\t\t\t// \t\t.ref(`rooms/${roomName}/people/${personID}`)\n\t\t\t\t\t\t\t// \t\t.update({ unread: 0, lastRead: message.createdAt })\n\t\t\t\t\t\t\t// \t\t.then(() => {\n\t\t\t\t\t\t\t// \t\t\tdispatch(\n\t\t\t\t\t\t\t// \t\t\t\tsetUnread(roomName, personID, message.createdAt, 0),\n\t\t\t\t\t\t\t// \t\t\t)\n\t\t\t\t\t\t\t// \t\t})\n\t\t\t\t\t\t\t// } else if (\n\t\t\t\t\t\t\t// \tpersonID !== message.sender.uid &&\n\t\t\t\t\t\t\t// \tmoment(message.createdAt) >\n\t\t\t\t\t\t\t// \t\tmoment(personSnapshot.val()[personID].lastRead)\n\t\t\t\t\t\t\t// ) {\n\t\t\t\t\t\t\t// \tdatabase\n\t\t\t\t\t\t\t// \t\t.ref(`rooms/${roomName}/people/${personID}`)\n\t\t\t\t\t\t\t// \t\t.update({\n\t\t\t\t\t\t\t// \t\t\tunread: personSnapshot.val()[personID].unread + 1,\n\t\t\t\t\t\t\t// \t\t\tlastRead: message.createdAt,\n\t\t\t\t\t\t\t// \t\t})\n\t\t\t\t\t\t\t// \t\t.then(() => {\n\t\t\t\t\t\t\t// \t\t\tdispatch(\n\t\t\t\t\t\t\t// \t\t\t\tsetUnread(\n\t\t\t\t\t\t\t// \t\t\t\t\troomName,\n\t\t\t\t\t\t\t// \t\t\t\t\tpersonID,\n\t\t\t\t\t\t\t// \t\t\t\t\tmessage.createdAt,\n\t\t\t\t\t\t\t// \t\t\t\t\tpersonSnapshot.val()[personID].unread + 1,\n\t\t\t\t\t\t\t// \t\t\t\t),\n\t\t\t\t\t\t\t// \t\t\t)\n\t\t\t\t\t\t\t// \t\t})\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t}\n}\n\nconst isAlreadyAdded = (data: any, id: string) => {\n\tfor (var key in data) {\n\t\tif (data[key].id === id) return true\n\t}\n\treturn false\n}\n\n// export const startJoinRoom = (data: Room, showJoinError: any) => {\n// \treturn (dispatch: any, getState: any) => {\n// \t\tconst state = getState()\n// \t\treturn database.ref(`rooms/${data.roomName}`).once('value', snapshot => {\n// \t\t\tconst value = snapshot.val()\n// \t\t\tconst id = data.id || ''\n// \t\t\tif (value === null) {\n// \t\t\t\treturn showJoinError('Room not found!')\n// \t\t\t} else if (value.people && value.people[id]) {\n// \t\t\t\t// history.push(`room/${data.roomName}`);\n// \t\t\t} else {\n// \t\t\t\tdispatch(startListening(data.roomName))\n// \t\t\t\tconst person = {\n// \t\t\t\t\tname: data.name,\n// \t\t\t\t\tid: data.id,\n// \t\t\t\t\tunread: data.unread,\n// \t\t\t\t\tlastRead: 0,\n// \t\t\t\t}\n// \t\t\t\tlet people: any[] = []\n// \t\t\t\tlet messages: any[] = []\n// \t\t\t\tfor (var key in value.people) {\n// \t\t\t\t\tpeople.push({\n// \t\t\t\t\t\tid: value.people[key].id,\n// \t\t\t\t\t\tname: value.people[key].name,\n// \t\t\t\t\t\tunread: value.people[key].unread,\n// \t\t\t\t\t\tlastRead: value.people[key].lastRead,\n// \t\t\t\t\t})\n// \t\t\t\t}\n// \t\t\t\tfor (var key in value.messages) {\n// \t\t\t\t\tmessages.push({\n// \t\t\t\t\t\t...value.messages[key],\n// \t\t\t\t\t})\n// \t\t\t\t}\n// \t\t\t\treturn database\n// \t\t\t\t\t.ref(`rooms/${data.roomName}/people/${person.id}`)\n// \t\t\t\t\t.set(person)\n// \t\t\t\t\t.then(ref => {\n// \t\t\t\t\t\tdatabase\n// \t\t\t\t\t\t\t.ref(`users/${person.id}/rooms/${data.roomName}`)\n// \t\t\t\t\t\t\t.set({ roomName: data.roomName })\n\n// \t\t\t\t\t\tdispatch(\n// \t\t\t\t\t\t\tcreateRoom({\n// \t\t\t\t\t\t\t\tpeople: [...people, person],\n// \t\t\t\t\t\t\t\tname: data.roomName,\n// \t\t\t\t\t\t\t\tmessages,\n// \t\t\t\t\t\t\t}),\n// \t\t\t\t\t\t)\n// \t\t\t\t\t\tconst perName = person.name\n\n// \t\t\t\t\t\tdispatch(startSendMessage(`${perName} joined`, data.roomName, true))\n\n// \t\t\t\t\t\t// history.push(`room/${data.roomName}`);\n// \t\t\t\t\t})\n// \t\t\t}\n// \t\t})\n// \t}\n// }\n\nexport const sendMessage = (message: any, roomName: string) => ({\n\ttype: 'SEND_MESSAGE',\n\tmessage,\n\troomName,\n})\n\nexport const updateMessages = (messages: any, roomId: string) => ({\n\ttype: 'UPDATE_MESSAGES',\n\tmessages,\n\troomId,\n})\n\nexport const trySendMessage = (\n\ttext: string,\n\troomId: string,\n\tstatus: boolean = false,\n) => {\n\treturn (dispatch: any, getState: any) => {\n\t\tconst user = getState().auth\n\t\tif (user) {\n\t\t\tconst uid = user.uid\n\t\t\tconst displayName = user.displayName\n\t\t\tconst message = {\n\t\t\t\tsender: { uid, displayName },\n\t\t\t\ttext,\n\t\t\t\tcreatedAt: moment().format(),\n\t\t\t\tstatus,\n\t\t\t}\n\t\t\treturn database.collection(`rooms/${roomId}/messages`).add(message)\n\t\t}\n\t}\n}\n\nexport const orderRoomsStartState = () => ({\n\ttype: 'ORDER_ROOMS_START_STATE',\n})\n\nexport const initSlacker = () => {\n\treturn (dispatch: any, getState: any) => {\n\t\t// console.log('initializing slacker')\n\t\tconst uid = getState().auth.uid\n\t\tif (uid) {\n\t\t\t// console.log('user found, ', uid)\n\t\t\tconst usersRef = database.collection('users')\n\t\t\treturn usersRef\n\t\t\t\t.doc(uid)\n\t\t\t\t.collection('rooms')\n\t\t\t\t.get()\n\t\t\t\t.then(userRoomsQuery => {\n\t\t\t\t\tif (!userRoomsQuery.empty) {\n\t\t\t\t\t\tuserRoomsQuery.forEach(userRoomDoc => {\n\t\t\t\t\t\t\tconst roomRef = database.collection('rooms').doc(userRoomDoc.id)\n\n\t\t\t\t\t\t\troomRef.get().then(roomDoc => {\n\t\t\t\t\t\t\t\tif (roomDoc.exists) {\n\t\t\t\t\t\t\t\t\tconst room = roomDoc.data()\n\t\t\t\t\t\t\t\t\tconst people: any[] = []\n\t\t\t\t\t\t\t\t\tconst messages: any[] = []\n\t\t\t\t\t\t\t\t\troomRef\n\t\t\t\t\t\t\t\t\t\t.collection('people')\n\t\t\t\t\t\t\t\t\t\t.get()\n\t\t\t\t\t\t\t\t\t\t.then(peopleQuery => {\n\t\t\t\t\t\t\t\t\t\t\tpeopleQuery.forEach(peopleDoc => {\n\t\t\t\t\t\t\t\t\t\t\t\tpeople.push(peopleDoc.data())\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\tconsole.log({ people })\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t\t\t\troomRef\n\t\t\t\t\t\t\t\t\t\t\t\t.collection('messages')\n\t\t\t\t\t\t\t\t\t\t\t\t.get()\n\t\t\t\t\t\t\t\t\t\t\t\t.then(messagesQuery => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessagesQuery.forEach(messageDoc => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessages.push({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: messageDoc.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t...messageDoc.data(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessages.sort(byCreatedAt)\n\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log({ messages })\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcreateRoom({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: roomRef.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: room ? room.name : 'Error',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpeople,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessages,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tdispatch(startListening(roomRef.id))\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t}\n\t}\n}\n\nexport const clearState = {\n\ttype: 'CLEAR_STATE',\n}\n\nexport const leaveRoom = (roomName: string, userId: string) => ({\n\ttype: 'LEAVE_ROOM',\n\troomName,\n\tuserId,\n})\n\n// export const startLeaveRoom = (roomName: string) => {\n// \treturn (dispatch: any, getState: any) => {\n// \t\tconst user = getState().auth\n// \t\tif (user) {\n// \t\t\tconst userId = user.uid\n// \t\t\tconst displayName = user.displayName\n// \t\t\tdatabase.ref(`rooms/${roomName}/people/${userId}`).remove()\n// \t\t\tdatabase.ref(`users/${userId}/rooms/${roomName}`).remove(() => {\n// \t\t\t\tdispatch(leaveRoom(roomName, userId))\n// \t\t\t\tdispatch(startSendMessage(`${displayName} left`, roomName, true))\n// \t\t\t\t// history.push(\"/join\");\n// \t\t\t})\n// \t\t}\n// \t}\n// }\n\nexport const clearUnread = (\n\troomName: string,\n\tuid: string,\n\ttime: any,\n\tunread: number,\n) => ({\n\ttype: 'CLEAR_UNREAD',\n\troomName,\n\tuid,\n\ttime,\n\tunread,\n})\n\nexport const setUnread = (\n\troomName: string,\n\tuid: string,\n\ttime: any,\n\tunread: number,\n) => {\n\treturn (dispatch: any) => {\n\t\tdispatch(clearUnread(roomName, uid, time, unread))\n\t}\n}\n\n// export const startClearUnread = (roomName: string) => {\n// \treturn (dispatch: any, getState: any) => {\n// \t\t// let time = moment().endOf(\"month\");\n// \t\tconst uid = getState().auth.uid\n// \t\tif (uid) {\n// \t\t\tconst time = moment().format()\n// \t\t\treturn database\n// \t\t\t\t.ref(`rooms/${roomName}/people/${uid}`)\n// \t\t\t\t.update({\n// \t\t\t\t\tunread: 0,\n// \t\t\t\t\tlastRead: time,\n// \t\t\t\t})\n// \t\t\t\t.then(() => {\n// \t\t\t\t\tdispatch(clearUnread(roomName, uid, time, 0))\n// \t\t\t\t})\n// \t\t}\n// \t}\n// }\n\nexport const onLeft = (roomName: string, personID: string) => ({\n\ttype: 'ON_LEFT',\n\troomName,\n\tpersonID,\n})\n\nexport const onJoined = (roomName: string, person: any) => ({\n\ttype: 'ON_JOINED',\n\troomName,\n\tperson,\n})\n","import React, { Fragment, Component } from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport { Layout, Typography, Spin } from 'antd'\n\nimport { trySendMessage } from '../actions/rooms'\n\nconst { Header, Content } = Layout\nconst { Title } = Typography\n\nconst ChatWrapper = styled.div`\n\theight: 100%;\n\tpadding: 24;\n\tdisplay: flex;\n\tflex-direction: column;\n\tbackground: '#fff';\n`\n\nconst LoadingWrapper = styled.div`\n\theight: 100%;\n\tpadding: 24;\n\tdisplay: flex;\n\tflex-direction: column;\n\tbackground: '#fff';\n\tjustify-content: center;\n\talign-items: center;\n`\n\nconst Messages = styled.div`\n\tflex-grow: 1;\n\toverflow: scroll;\n`\n\nconst Message = styled.div`\n\tdisplay: flex;\n\tmin-height: 40px;\n\tborder-bottom: 1px solid grey;\n`\n\nconst InputForm = styled.form`\n\theight: 50px;\n\tbackground-color: #fff;\n\tborder-radius: 4px;\n\tdisplay: flex;\n\tflex-direction: row;\n\tflex-shrink: 0;\n\tmargin-top: 10px;\n`\n\nconst Input = styled.input`\n\tpadding-left: 14px;\n\tborder: none;\n\tborder-radius: 4px;\n\tflex-grow: 1;\n`\n\nconst SendButton = styled.button`\n\tflex-shrink: 0;\n`\n\ninterface Props {\n\tauth: Auth;\n\troom: RoomItem | { id: null, name: string, messages: any[] };\n\tisLoading: boolean;\n\tmessages: any[];\n\ttrySendMessage: (text: string, roomId: string, status?: boolean) => void;\n}\n\nclass RoomContainer extends Component<Props> {\n\tstate = {\n\t\tmessageValue: '',\n\t}\n\n\tmessagesEnd: any = null\n\n\thandleTyping = (e: any) => {\n\t\tthis.setState({ messageValue: e.target.value })\n\t}\n\n\tscrollToBottom = () => {\n\t\tif (this.messagesEnd) {\n\t\t\tthis.messagesEnd.scrollIntoView({ behavior: 'auto' })\n\t\t}\n\t}\n\n\thandleSend = (e: any) => {\n\t\te.preventDefault()\n\t\tconst { room } = this.props\n\t\tif (!!room.id) {\n\t\t\tconst text = this.state.messageValue\n\t\t\tthis.props.trySendMessage(text, room.id)\n\t\t\tthis.setState({\n\t\t\t\tmessageValue: '',\n\t\t\t})\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps: Props) {\n\t\tif (prevProps.messages.length === 0 && this.props.messages.length > 0) {\n\t\t\tthis.scrollToBottom()\n\t\t\treturn\n\t\t}\n\n\t\tif (\n\t\t\tprevProps.messages.length !== this.props.messages.length &&\n\t\t\tprevProps.messages.length > 0 &&\n\t\t\tthis.props.messages.length > 0\n\t\t) {\n\t\t\tconst previousLastMessage = prevProps.messages.slice(-1)[0]\n\t\t\tconst currentLastMessage = this.props.messages.slice(-1)[0]\n\t\t\tif (\n\t\t\t\tpreviousLastMessage.id !== currentLastMessage.id &&\n\t\t\t\t!!currentLastMessage &&\n\t\t\t\tcurrentLastMessage.sender.uid === this.props.auth.uid\n\t\t\t) {\n\t\t\t\t// last message was ours, scroll to the bottom\n\t\t\t\tthis.scrollToBottom()\n\t\t\t}\n\t\t}\n\n\t\t// check last message, if its mine, scroll to bottom?\n\t}\n\n\trender() {\n\t\tconst { room, messages, isLoading } = this.props\n\t\t// console.log(messages)\n\t\tlet content = (\n\t\t\t<LoadingWrapper>\n\t\t\t\t<Spin size=\"large\" />\n\t\t\t</LoadingWrapper>\n\t\t)\n\t\tif (!isLoading) {\n\t\t\tcontent = (\n\t\t\t\t<ChatWrapper>\n\t\t\t\t\t<Messages>\n\t\t\t\t\t\t{messages.map(message => (\n\t\t\t\t\t\t\t<Message key={message.id}>{message.text}</Message>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{ float: 'left', clear: 'both' }}\n\t\t\t\t\t\t\tref={el => {\n\t\t\t\t\t\t\t\tthis.messagesEnd = el\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Messages>\n\t\t\t\t\t<InputForm onSubmit={this.handleSend}>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tvalue={this.state.messageValue}\n\t\t\t\t\t\t\tonChange={this.handleTyping}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<SendButton type={'submit'}>Send</SendButton>\n\t\t\t\t\t</InputForm>\n\t\t\t\t</ChatWrapper>\n\t\t\t)\n\t\t}\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<Header\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackground: '#fff',\n\t\t\t\t\t\tpadding: 16,\n\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\tflexRirection: 'row',\n\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Title style={{ margin: 0 }} level={3}>\n\t\t\t\t\t\t{room.name}\n\t\t\t\t\t</Title>\n\t\t\t\t</Header>\n\t\t\t\t<Content\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tmargin: '24px 16px',\n\t\t\t\t\t\toverflow: 'initial',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{content}\n\t\t\t\t</Content>\n\t\t\t</Fragment>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: StoreState, ownProps: any) => {\n\tconst { roomId } = ownProps.match.params\n\tconst room = state.rooms.find(room => room.id === roomId)\n\tconst messages = room ? room.messages : []\n\treturn {\n\t\tauth: state.auth,\n\t\troom: room || { id: null, name: '', messages: [] },\n\t\tmessages,\n\t\tisLoading: !room,\n\t}\n}\n\nexport default connect(\n\tmapStateToProps,\n\t{ trySendMessage },\n)(RoomContainer)\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { connect } from 'react-redux'\nimport { Modal, Input, Typography } from 'antd'\nimport { tryCreateRoom, RoomData } from '../actions/rooms'\n\nconst { TextArea } = Input\nconst { Text } = Typography\n\nconst TextWrap = styled.div`\n\tmargin-top: 5px;\n\tmargin-bottom: 5px;\n`\n\ninterface Props {\n\tisOpen: boolean;\n\thandleClose: () => void;\n\ttryCreateRoom: (roomData: RoomData, showCreateError?: any) => Promise<any>;\n\tauth: Auth;\n}\n\ninterface State {\n\troomName: string;\n\tdescription: string;\n}\n\nclass CreateChatDialog extends Component<Props, State> {\n\tstate = {\n\t\troomName: '',\n\t\tdescription: '',\n\t}\n\n\thandleChange = (e: any) => {\n\t\tconsole.log(e.target.name)\n\t\t// @ts-ignore\n\t\tthis.setState({\n\t\t\t[e.target.name]: e.target.value,\n\t\t})\n\t}\n\n\thandleSubmit = () => {\n\t\tconst { uid, displayName: userDisplayName } = this.props.auth\n\t\tif (uid) {\n\t\t\tconsole.log('Create this room pls')\n\t\t\tconst roomName = this.state.roomName\n\t\t\tif (roomName && roomName.length > 0) {\n\t\t\t\t// this.setState({ error: '' })\n\t\t\t\tconst room = {\n\t\t\t\t\tname: roomName,\n\t\t\t\t\tpeople: {\n\t\t\t\t\t\tid: uid,\n\t\t\t\t\t\tname: userDisplayName,\n\t\t\t\t\t\tunread: 0,\n\t\t\t\t\t\tlastRead: 0,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tthis.props.tryCreateRoom(room)\n\t\t\t\tthis.props.handleClose()\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Modal\n\t\t\t\ttitle=\"Create Room\"\n\t\t\t\tvisible={this.props.isOpen}\n\t\t\t\tonOk={this.handleSubmit}\n\t\t\t\tonCancel={this.props.handleClose}\n\t\t\t\tokButtonProps={{ disabled: !this.props.auth.uid }}\n\t\t\t\tcancelButtonProps={{ disabled: !this.props.auth.uid }}\n\t\t\t>\n\t\t\t\t<TextWrap>\n\t\t\t\t\t<Text>Name:</Text>\n\t\t\t\t</TextWrap>\n\t\t\t\t<Input\n\t\t\t\t\tname=\"roomName\"\n\t\t\t\t\tvalue={this.state.roomName}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t\t<TextWrap>\n\t\t\t\t\t<Text>Description:</Text>\n\t\t\t\t</TextWrap>\n\t\t\t\t<TextArea\n\t\t\t\t\tname=\"description\"\n\t\t\t\t\tvalue={this.state.description}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\trows={4}\n\t\t\t\t/>\n\t\t\t</Modal>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: any) => ({\n\tauth: state.auth,\n})\n\nexport default connect(\n\tmapStateToProps,\n\t{ tryCreateRoom },\n)(CreateChatDialog)\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { connect } from 'react-redux'\nimport { Layout, Menu, Button, Typography } from 'antd'\nimport RoomContainer from './RoomContainer'\nimport CreateChatDialog from './CreateChatDialog'\nimport { tryLogin } from '../actions/auth'\nimport { initSlacker } from '../actions/rooms'\nimport '../styles/index.css'\n\nconst { Sider } = Layout\nconst { Text } = Typography\n\nconst ButtonWrap = styled.div`\n\ttext-align: center;\n\tpadding: 15px;\n`\n\nconst MenuLabel = styled.button`\n\tpadding-left: 10px;\n\tcolor: rgba(255, 255, 255, 0.65);\n\tbackground: none;\n\tborder: none;\n\ttransition: color 1s;\n\tcursor: pointer;\n\t&:hover {\n\t\tcolor: #fff;\n\t}\n`\n\ninterface Props {\n\ttryLogin: () => void;\n\tinitSlacker: () => void;\n\tauth: Auth;\n\trooms: RoomItem[];\n\thistory: any;\n\tlocation: {\n\t\tpathname: any,\n\t};\n}\n\ninterface State {\n\tisCreateRoomDialogOpen: boolean;\n}\n\nclass App extends Component<Props> {\n\tstate = {\n\t\tisCreateRoomDialogOpen: false,\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.tryLogin()\n\t}\n\n\tcomponentWillUpdate(nextProps: Props) {\n\t\tif (!this.props.auth.uid && nextProps.auth.uid) {\n\t\t\tthis.props.initSlacker()\n\t\t}\n\t}\n\n\thandleCloseCreateChatDialog = () => {\n\t\tthis.setState({\n\t\t\tisCreateRoomDialogOpen: false,\n\t\t})\n\t}\n\n\thandleOpenCreateChatDialog = () => {\n\t\tthis.setState({\n\t\t\tisCreateRoomDialogOpen: true,\n\t\t})\n\t}\n\n\thandleRoomSelect = ({ key }: { key: string }) => {\n\t\tthis.props.history.push(key)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Layout style={{ height: '100%' }}>\n\t\t\t\t<Sider\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\toverflow: 'auto',\n\t\t\t\t\t\theight: '100vh',\n\t\t\t\t\t\tposition: 'fixed',\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<ButtonWrap>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ticon=\"plus\"\n\t\t\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\t\t\tonClick={this.handleOpenCreateChatDialog}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCreate room\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</ButtonWrap>\n\t\t\t\t\t<CreateChatDialog\n\t\t\t\t\t\tisOpen={this.state.isCreateRoomDialogOpen}\n\t\t\t\t\t\thandleClose={this.handleCloseCreateChatDialog}\n\t\t\t\t\t/>\n\t\t\t\t\t<MenuLabel>\n\t\t\t\t\t\t<span>Rooms:</span>\n\t\t\t\t\t</MenuLabel>\n\t\t\t\t\t<Menu\n\t\t\t\t\t\ttheme=\"dark\"\n\t\t\t\t\t\tmode=\"inline\"\n\t\t\t\t\t\tonSelect={this.handleRoomSelect}\n\t\t\t\t\t\tdefaultSelectedKeys={[this.props.location.pathname]}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.props.rooms.map(room => (\n\t\t\t\t\t\t\t<Menu.Item key={`/r/${room.id}`}>\n\t\t\t\t\t\t\t\t<span className=\"nav-text\"># {room.name}</span>\n\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Menu>\n\t\t\t\t</Sider>\n\t\t\t\t<Layout style={{ marginLeft: 200 }}>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path={'/r/:roomId'} component={RoomContainer} />\n\t\t\t\t\t\t<Route path={'/'}>\n\t\t\t\t\t\t\t<div>No chat selected</div>\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</Layout>\n\t\t\t</Layout>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n\tauth: state.auth,\n\trooms: state.rooms,\n})\n\nexport default connect(\n\tmapStateToProps,\n\t{ tryLogin, initSlacker },\n)(App)\n","import { firebase } from \"../firebase/firebase\";\n\nexport const loginSuccess = (uid: string, displayName: string) => ({\n  type: \"LOGIN\",\n  uid,\n  displayName\n});\n\nexport const tryLogin = () => {\n  return (dispatch: any) => {\n    return firebase\n      .auth()\n      .signInAnonymously()\n      .then(response => {\n        // console.log(response);\n        const { user } = response;\n\n        if (user) {\n          const displayName = user.displayName || \"Ninja\";\n          return dispatch(loginSuccess(user.uid, displayName));\n        }\n      })\n      .catch(function(error) {\n        console.log({ error });\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        // ...\n      });\n  };\n};\n\nexport const logout = () => ({\n  type: \"LOGOUT\"\n});\n\nexport const tryLogout = () => {\n  return () => {\n    return firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        console.log(\"log out!!!\");\n      });\n  };\n};\n","export default (state = {}, action: any) => {\n  switch (action.type) {\n    case \"LOGIN\":\n      return {\n        uid: action.uid,\n        displayName: action.displayName\n      };\n    case \"LOGOUT\":\n      return {};\n    default:\n      return state;\n  }\n};\n","import moment from \"moment\";\n\nconst defaultState: Room[] = [];\n\nexport default (state = defaultState, action: any) => {\n  switch (action.type) {\n    case \"CREATE_ROOM\":\n      return [...state, action.room];\n    case \"JOIN_ROOM\":\n      return state.map(room => {\n        if (room.name === action.roomName) {\n          return {\n            ...room,\n            people: [...room.people, action.person]\n          };\n        } else {\n          return room;\n        }\n      });\n\n    case \"ON_LEFT\":\n      // console.log('onleft');\n\n      return state.map(room => {\n        // console.log(room);\n        if (room.name === action.roomName) {\n          const p = room.people.filter((person: Person) => {\n            return person.id !== action.personID;\n          });\n          // console.log(p);\n          return {\n            ...room,\n            people: p\n          };\n        } else {\n          return room;\n        }\n      });\n\n    case \"ON_JOINED\":\n      return state.map(room => {\n        if (room.name === action.roomName) {\n          room.people.push(action.person);\n          return room;\n        } else {\n          return room;\n        }\n      });\n\n    case \"SEND_MESSAGE\":\n      return state.map(room => {\n        if (room.name === action.roomName) {\n          return {\n            ...room,\n            messages: [...room.messages, action.message]\n          };\n        } else {\n          return room;\n        }\n      });\n    case \"UPDATE_MESSAGES\":\n      return state.map(room => {\n        if (room.id === action.roomId) {\n          return {\n            ...room,\n            messages: [...action.messages]\n          };\n        } else {\n          return room;\n        }\n      });\n    // case 'REORDER_ROOMS':\n    //   let room;\n    //   let rooms = state.filter((r) => {\n    //     if(r.name === action.roomName) {\n    //       room = r;\n    //       return false;\n    //     }\n    //     else {\n    //       return true;\n    //     }\n    //   });\n    //   rooms.unshift(room);\n    //   return rooms;\n    case \"ORDER_ROOMS_START_STATE\":\n      //  const x =  action.rooms.sort((a, b) => {\n      //   //  console.log('a', a);\n      //   //  console.log('b', b);\n      //   if(a.messages.length > 0 && b.messages.length > 0) {\n      //     console.log(typeof a.messages);\n\n      //     return moment(a.messages[a.messages.length-1].createdAt) > moment(b.messages[b.messages.length-1].createdAt)\n      //     // {\n      //   //     return -1;\n      //   //   } else {\n      //   //     return 1;\n      //   //   }\n      //   // }\n      //   // else {\n      //   //   return -1;\n      //   }\n      // });\n      // console.log(typeof x)\n      // console.log(x);\n      // return x;\n      state.sort((a: any, b: any) => {\n        return moment(a.messages[a.messages.length - 1].createdAt) <\n          moment(b.messages[b.messages.length - 1].createdAt)\n          ? 1\n          : -1;\n      });\n      // console.log(state);\n      return state.map(room => room);\n\n    case \"CLEAR_UNREAD\":\n      return state.map(room => {\n        if (room.name === action.roomName) {\n          const people = room.people.map((person: Person) => {\n            if (person.id === action.uid) {\n              return {\n                ...person,\n                unread: action.unread,\n                lastRead: action.time\n              };\n            } else {\n              return person;\n            }\n          });\n          return { ...room, people };\n        } else {\n          return room;\n        }\n      });\n\n    case \"LEAVE_ROOM\":\n      return state.filter(room => {\n        return room.name !== action.roomName;\n      });\n    case \"CLEAR_STATE\":\n      return [];\n    default:\n      return state;\n  }\n};\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport authReducer from \"../reducers/auth\";\nimport roomsReducer from \"../reducers/rooms\";\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default () => {\n  const store = createStore(\n    combineReducers({\n      auth: authReducer,\n      rooms: roomsReducer\n    }),\n    composeEnhancers(applyMiddleware(thunk))\n  );\n\n  return store;\n};\n","import React from 'react'\nimport { createBrowserHistory } from 'history'\nimport { Provider } from 'react-redux'\nimport { Router, Route } from 'react-router'\nimport ReactDOM from 'react-dom'\nimport 'antd/dist/antd.css'\n\nimport App from './components/App'\nimport configureStore from './store/configureStore'\n\nconst history = createBrowserHistory()\n\nconst store = configureStore()\nconst jsx = (\n\t<Provider store={store}>\n\t\t<Router history={history}>\n\t\t\t<Route path={'/'} component={App} />\n\t\t</Router>\n\t</Provider>\n)\n\nReactDOM.render(jsx, document.getElementById('container'))\n"],"sourceRoot":""}